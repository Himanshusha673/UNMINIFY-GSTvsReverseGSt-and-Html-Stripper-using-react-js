{"ast":null,"code":"'use strict';\n\nconst parser = require('shift-parser');\nconst codegen = require('./helpers/codegen');\nconst safetyLevels = require('./safety-levels');\nconst TRANSFORMATIONS = {\n  [safetyLevels.USELESS]: [],\n  [safetyLevels.SAFE]: [require('./transforms/safe/cleanup'), require('./transforms/safe/cleanup-with-state')],\n  [safetyLevels.MOSTLY_SAFE]: [],\n  [safetyLevels.UNSAFE]: [require('./transforms/unsafe/remove-unused')],\n  [safetyLevels.WILDLY_UNSAFE]: [require('./transforms/wildly-unsafe/inline'), require('./transforms/wildly-unsafe/partial-evaluate')]\n};\nfunction unminifySource(src, options) {\n  let tree = parser.parseScript(src);\n  return codegen(unminifyTree(tree, options));\n}\nfunction unminifyTree(tree, {\n  safety = safetyLevels.SAFE,\n  additionalTransforms = []\n} = {}) {\n  let transformations = [];\n  for (let i = 0; i <= safety; ++i) {\n    transformations.push(...TRANSFORMATIONS[i]);\n  }\n  transformations.push(...additionalTransforms);\n  let lastTree = tree;\n  // cap at 100 on general principles, but theoretically `while (true)` should be ok\n  for (let i = 0; i < 100; ++i) {\n    let newTree = lastTree;\n    for (let transformation of transformations) {\n      newTree = transformation(newTree);\n    }\n    if (newTree === lastTree) break;\n    lastTree = newTree;\n  }\n  return lastTree;\n}\nmodule.exports = unminifySource;\nmodule.exports.unminifySource = unminifySource;\nmodule.exports.unminifyTree = unminifyTree;\nmodule.exports.safetyLevels = safetyLevels;","map":{"version":3,"names":["parser","require","codegen","safetyLevels","TRANSFORMATIONS","USELESS","SAFE","MOSTLY_SAFE","UNSAFE","WILDLY_UNSAFE","unminifySource","src","options","tree","parseScript","unminifyTree","safety","additionalTransforms","transformations","i","push","lastTree","newTree","transformation","module","exports"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/unminify/src/index.js"],"sourcesContent":["'use strict';\n\nconst parser = require('shift-parser');\nconst codegen = require('./helpers/codegen');\nconst safetyLevels = require('./safety-levels');\n\nconst TRANSFORMATIONS = {\n  [safetyLevels.USELESS]: [],\n  [safetyLevels.SAFE]: [\n    require('./transforms/safe/cleanup'),\n    require('./transforms/safe/cleanup-with-state'),\n  ],\n  [safetyLevels.MOSTLY_SAFE]: [],\n  [safetyLevels.UNSAFE]: [\n    require('./transforms/unsafe/remove-unused'),\n  ],\n  [safetyLevels.WILDLY_UNSAFE]: [\n    require('./transforms/wildly-unsafe/inline'),\n    require('./transforms/wildly-unsafe/partial-evaluate'),\n  ],\n};\n\nfunction unminifySource(src, options) {\n  let tree = parser.parseScript(src);\n  return codegen(unminifyTree(tree, options));\n}\n\nfunction unminifyTree(tree, { safety = safetyLevels.SAFE, additionalTransforms = [] } = {}) {\n  let transformations = [];\n  for (let i = 0; i <= safety; ++i) {\n    transformations.push(...TRANSFORMATIONS[i]);\n  }\n  transformations.push(...additionalTransforms);\n\n  let lastTree = tree;\n  // cap at 100 on general principles, but theoretically `while (true)` should be ok\n  for (let i = 0; i < 100; ++i) {\n    let newTree = lastTree;\n    for (let transformation of transformations) {\n      newTree = transformation(newTree);\n    }\n    if (newTree === lastTree) break;\n    lastTree = newTree;\n  }\n\n  return lastTree;\n}\n\nmodule.exports = unminifySource;\nmodule.exports.unminifySource = unminifySource;\nmodule.exports.unminifyTree = unminifyTree;\nmodule.exports.safetyLevels = safetyLevels;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAc,CAAC;AACtC,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAME,YAAY,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAE/C,MAAMG,eAAe,GAAG;EACtB,CAACD,YAAY,CAACE,OAAO,GAAG,EAAE;EAC1B,CAACF,YAAY,CAACG,IAAI,GAAG,CACnBL,OAAO,CAAC,2BAA2B,CAAC,EACpCA,OAAO,CAAC,sCAAsC,CAAC,CAChD;EACD,CAACE,YAAY,CAACI,WAAW,GAAG,EAAE;EAC9B,CAACJ,YAAY,CAACK,MAAM,GAAG,CACrBP,OAAO,CAAC,mCAAmC,CAAC,CAC7C;EACD,CAACE,YAAY,CAACM,aAAa,GAAG,CAC5BR,OAAO,CAAC,mCAAmC,CAAC,EAC5CA,OAAO,CAAC,6CAA6C,CAAC;AAE1D,CAAC;AAED,SAASS,cAAcA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACpC,IAAIC,IAAI,GAAGb,MAAM,CAACc,WAAW,CAACH,GAAG,CAAC;EAClC,OAAOT,OAAO,CAACa,YAAY,CAACF,IAAI,EAAED,OAAO,CAAC,CAAC;AAC7C;AAEA,SAASG,YAAYA,CAACF,IAAI,EAAE;EAAEG,MAAM,GAAGb,YAAY,CAACG,IAAI;EAAEW,oBAAoB,GAAG;AAAG,CAAC,GAAG,CAAC,CAAC,EAAE;EAC1F,IAAIC,eAAe,GAAG,EAAE;EACxB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,MAAM,EAAE,EAAEG,CAAC,EAAE;IAChCD,eAAe,CAACE,IAAI,CAAC,GAAGhB,eAAe,CAACe,CAAC,CAAC,CAAC;EAC7C;EACAD,eAAe,CAACE,IAAI,CAAC,GAAGH,oBAAoB,CAAC;EAE7C,IAAII,QAAQ,GAAGR,IAAI;EACnB;EACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,GAAG,EAAE,EAAEA,CAAC,EAAE;IAC5B,IAAIG,OAAO,GAAGD,QAAQ;IACtB,KAAK,IAAIE,cAAc,IAAIL,eAAe,EAAE;MAC1CI,OAAO,GAAGC,cAAc,CAACD,OAAO,CAAC;IACnC;IACA,IAAIA,OAAO,KAAKD,QAAQ,EAAE;IAC1BA,QAAQ,GAAGC,OAAO;EACpB;EAEA,OAAOD,QAAQ;AACjB;AAEAG,MAAM,CAACC,OAAO,GAAGf,cAAc;AAC/Bc,MAAM,CAACC,OAAO,CAACf,cAAc,GAAGA,cAAc;AAC9Cc,MAAM,CAACC,OAAO,CAACV,YAAY,GAAGA,YAAY;AAC1CS,MAAM,CAACC,OAAO,CAACtB,YAAY,GAAGA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}