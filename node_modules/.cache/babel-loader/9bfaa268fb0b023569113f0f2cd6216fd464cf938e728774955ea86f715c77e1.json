{"ast":null,"code":"const reduce = require('shift-reducer').default;\nconst {\n  TokenStream\n} = require('./token-stream');\nconst MinimalCodeGen = require('./minimal-codegen');\nfunction codeGen(script, generator = new MinimalCodeGen()) {\n  let ts = new TokenStream();\n  let rep = reduce(generator, script);\n  rep.emit(ts);\n  return ts.result;\n}\nconst {\n  ExtensibleCodeGen,\n  FormattedCodeGen,\n  Sep\n} = require('./formatted-codegen');\nconst {\n  Precedence,\n  getPrecedence,\n  escapeStringLiteral,\n  CodeRep,\n  Empty,\n  Token,\n  NumberCodeRep,\n  Paren,\n  Bracket,\n  Brace,\n  NoIn,\n  ContainsIn,\n  Seq,\n  Semi,\n  CommaSep,\n  SemiOp\n} = require('./coderep');\nconst codeGenWithLocation = require('./with-location');\nmodule.exports = {\n  default: codeGen,\n  codeGen,\n  MinimalCodeGen,\n  ExtensibleCodeGen,\n  FormattedCodeGen,\n  Sep,\n  Precedence,\n  getPrecedence,\n  escapeStringLiteral,\n  CodeRep,\n  Empty,\n  Token,\n  NumberCodeRep,\n  Paren,\n  Bracket,\n  Brace,\n  NoIn,\n  ContainsIn,\n  Seq,\n  Semi,\n  CommaSep,\n  SemiOp,\n  codeGenWithLocation\n};","map":{"version":3,"names":["reduce","require","default","TokenStream","MinimalCodeGen","codeGen","script","generator","ts","rep","emit","result","ExtensibleCodeGen","FormattedCodeGen","Sep","Precedence","getPrecedence","escapeStringLiteral","CodeRep","Empty","Token","NumberCodeRep","Paren","Bracket","Brace","NoIn","ContainsIn","Seq","Semi","CommaSep","SemiOp","codeGenWithLocation","module","exports"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-codegen/src/index.js"],"sourcesContent":["const reduce = require('shift-reducer').default;\nconst { TokenStream } = require('./token-stream');\nconst MinimalCodeGen = require('./minimal-codegen');\n\nfunction codeGen(script, generator = new MinimalCodeGen) {\n  let ts = new TokenStream;\n  let rep = reduce(generator, script);\n  rep.emit(ts);\n  return ts.result;\n}\n\nconst { ExtensibleCodeGen, FormattedCodeGen, Sep } = require('./formatted-codegen');\nconst { Precedence, getPrecedence, escapeStringLiteral, CodeRep, Empty, Token, NumberCodeRep, Paren, Bracket, Brace, NoIn, ContainsIn, Seq, Semi, CommaSep, SemiOp } = require('./coderep');\nconst codeGenWithLocation = require('./with-location');\n\nmodule.exports = {\n  default: codeGen,\n  codeGen,\n  MinimalCodeGen,\n  ExtensibleCodeGen,\n  FormattedCodeGen,\n  Sep,\n  Precedence,\n  getPrecedence,\n  escapeStringLiteral,\n  CodeRep,\n  Empty,\n  Token,\n  NumberCodeRep,\n  Paren,\n  Bracket,\n  Brace,\n  NoIn,\n  ContainsIn,\n  Seq,\n  Semi,\n  CommaSep,\n  SemiOp,\n  codeGenWithLocation,\n};\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC,CAACC,OAAO;AAC/C,MAAM;EAAEC;AAAY,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AACjD,MAAMG,cAAc,GAAGH,OAAO,CAAC,mBAAmB,CAAC;AAEnD,SAASI,OAAOA,CAACC,MAAM,EAAEC,SAAS,GAAG,IAAIH,cAAc,CAAD,CAAC,EAAE;EACvD,IAAII,EAAE,GAAG,IAAIL,WAAW,CAAD,CAAC;EACxB,IAAIM,GAAG,GAAGT,MAAM,CAACO,SAAS,EAAED,MAAM,CAAC;EACnCG,GAAG,CAACC,IAAI,CAACF,EAAE,CAAC;EACZ,OAAOA,EAAE,CAACG,MAAM;AAClB;AAEA,MAAM;EAAEC,iBAAiB;EAAEC,gBAAgB;EAAEC;AAAI,CAAC,GAAGb,OAAO,CAAC,qBAAqB,CAAC;AACnF,MAAM;EAAEc,UAAU;EAAEC,aAAa;EAAEC,mBAAmB;EAAEC,OAAO;EAAEC,KAAK;EAAEC,KAAK;EAAEC,aAAa;EAAEC,KAAK;EAAEC,OAAO;EAAEC,KAAK;EAAEC,IAAI;EAAEC,UAAU;EAAEC,GAAG;EAAEC,IAAI;EAAEC,QAAQ;EAAEC;AAAO,CAAC,GAAG7B,OAAO,CAAC,WAAW,CAAC;AAC3L,MAAM8B,mBAAmB,GAAG9B,OAAO,CAAC,iBAAiB,CAAC;AAEtD+B,MAAM,CAACC,OAAO,GAAG;EACf/B,OAAO,EAAEG,OAAO;EAChBA,OAAO;EACPD,cAAc;EACdQ,iBAAiB;EACjBC,gBAAgB;EAChBC,GAAG;EACHC,UAAU;EACVC,aAAa;EACbC,mBAAmB;EACnBC,OAAO;EACPC,KAAK;EACLC,KAAK;EACLC,aAAa;EACbC,KAAK;EACLC,OAAO;EACPC,KAAK;EACLC,IAAI;EACJC,UAAU;EACVC,GAAG;EACHC,IAAI;EACJC,QAAQ;EACRC,MAAM;EACNC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}