{"ast":null,"code":"/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Flattener = require('./flattener');\nconst {\n  DeclarationType\n} = require('./declaration');\nclass Serializer {\n  constructor(scope) {\n    this.scope = scope;\n    let nodes = Flattener.flatten(scope.astNode);\n    this.ids = new Map();\n    nodes.forEach(n => this.ids.set(n, this.ids.size));\n    this.declarationCompare = declarationCompare.bind(this, this.ids);\n    this.referenceCompare = referenceCompare.bind(this, this.ids);\n    this.variableCompare = variableCompare.bind(this, this.ids);\n  }\n  serialize() {\n    return this.serializeScope(this.scope);\n  }\n  serializeScope(scope) {\n    return `{\"node\": \"${this.serializeNode(scope.astNode)}\"` + `, \"type\": \"${scope.type.name}\"` + `, \"isDynamic\": ${scope.dynamic}` + `, \"through\": ${this.serializeReferenceList(this.collectThrough(scope.through))}` + `, \"variables\": ${this.serializeVariableList(scope.variableList)}` + `, \"children\": [${scope.children.map(this.serializeScope.bind(this)).join(', ')}]` + '}';\n  }\n  serializeNode(node) {\n    if (node.type === 'IdentifierExpression') {\n      return 'IdentifierExpression(' + node.name + ')_' + this.ids.get(node);\n    } else if (node.type === 'AssignmentTargetIdentifier') {\n      return 'AssignmentTargetIdentifier(' + node.name + ')_' + this.ids.get(node);\n    } else if (node.type === 'BindingIdentifier') {\n      return 'BindingIdentifier(' + node.name + ')_' + this.ids.get(node);\n    }\n    return node.type + '_' + this.ids.get(node);\n  }\n  collectThrough(through) {\n    let references = [];\n    through.forEach(v => references.push(v));\n    return references.sort(this.referenceCompare);\n  }\n  serializeReference(reference) {\n    return `{\"node\": \"${this.serializeNode(reference.node)}\"` + `, \"accessibility\": \"${reference.accessibility.isDelete ? 'Delete' : ''}${reference.accessibility.isRead ? 'Read' : ''}${reference.accessibility.isWrite ? 'Write' : ''}\"` + '}';\n  }\n  serializeReferenceList(references) {\n    return `[${references.map(this.serializeReference.bind(this)).join(', ')}]`;\n  }\n  serializeDeclaration(declaration) {\n    return `{\"node\": \"${this.serializeNode(declaration.node)}\"` + `, \"kind\": \"${declaration.type.name}\"` + '}';\n  }\n  serializeVariable(variable) {\n    return `{\"name\": \"${variable.name}\"` + `, \"references\": ${this.serializeReferenceList(variable.references)}` + `, \"declarations\": [${variable.declarations.map(this.serializeDeclaration.bind(this)).join(', ')}]` + '}';\n  }\n  serializeVariableList(variables) {\n    variables = variables.slice(0).sort(this.variableCompare);\n    return `[${variables.map(this.serializeVariable.bind(this)).join(', ')}]`;\n  }\n}\nfunction declarationCompare(ids, d1, d2) {\n  function kindToInd(kind) {\n    switch (kind) {\n      case DeclarationType.VAR:\n        return 0;\n      case DeclarationType.CONST:\n        return 1;\n      case DeclarationType.LET:\n        return 2;\n      case DeclarationType.FUNCTION_DECLARATION:\n        return 3;\n      case DeclarationType.FUNCTION_VAR_DECLARATION:\n        return 4;\n      case DeclarationType.FUNCTION_NAME:\n        return 5;\n      case DeclarationType.CLASS_NAME:\n        return 6;\n      case DeclarationType.PARAMETER:\n        return 7;\n      case DeclarationType.CATCH_PARAMETER:\n        return 8;\n      case DeclarationType.IMPORT:\n        return 9;\n      default:\n        throw 'Unrecognized declaration type';\n    }\n  }\n  let comparison = kindToInd(d1.type) - kindToInd(d2.type);\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return ids.get(d1.node) - ids.get(d2.node);\n}\nfunction referenceCompare(ids, r1, r2) {\n  let comparison = (r1.accessibility.isRead ? 1 : 0) + (r1.accessibility.isWrite ? 2 : 0) + (r1.accessibility.isDelete ? 4 : 0) - ((r2.accessibility.isRead ? 1 : 0) + (r2.accessibility.isWrite ? 2 : 0) + (r2.accessibility.isDelete ? 4 : 0));\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return ids.get(r1.node) - ids.get(r2.node);\n}\nfunction variableCompare(ids, v1, v2) {\n  if (v1.name < v2.name) {\n    return -1;\n  }\n  if (v1.name > v2.name) {\n    return 1;\n  }\n  let comparison = v1.declarations.length - v2.declarations.length;\n  if (comparison !== 0) {\n    return comparison;\n  }\n  comparison = v1.references.length - v2.references.length;\n  if (comparison !== 0) {\n    return comparison;\n  }\n  for (let i = 0; i < v1.declarations.length; ++i) {\n    let d1 = v1.declarations[i];\n    let d2 = v2.declarations[i];\n    comparison = declarationCompare(ids, d1, d2);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  for (let i = 0; i < v1.references.length; ++i) {\n    let r1 = v1.references[i];\n    let r2 = v2.references[i];\n    comparison = referenceCompare(ids, r1, r2);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return 0;\n}\nfunction serialize(scope) {\n  return new Serializer(scope).serialize();\n}\nmodule.exports = {\n  serialize\n};","map":{"version":3,"names":["Flattener","require","DeclarationType","Serializer","constructor","scope","nodes","flatten","astNode","ids","Map","forEach","n","set","size","declarationCompare","bind","referenceCompare","variableCompare","serialize","serializeScope","serializeNode","type","name","dynamic","serializeReferenceList","collectThrough","through","serializeVariableList","variableList","children","map","join","node","get","references","v","push","sort","serializeReference","reference","accessibility","isDelete","isRead","isWrite","serializeDeclaration","declaration","serializeVariable","variable","declarations","variables","slice","d1","d2","kindToInd","kind","VAR","CONST","LET","FUNCTION_DECLARATION","FUNCTION_VAR_DECLARATION","FUNCTION_NAME","CLASS_NAME","PARAMETER","CATCH_PARAMETER","IMPORT","comparison","r1","r2","v1","v2","length","i","module","exports"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-scope/src/scope-serializer.js"],"sourcesContent":["/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Flattener = require('./flattener');\nconst { DeclarationType } = require('./declaration');\n\nclass Serializer {\n  constructor(scope) {\n    this.scope = scope;\n    let nodes = Flattener.flatten(scope.astNode);\n    this.ids = new Map;\n    nodes.forEach(n => this.ids.set(n, this.ids.size));\n    this.declarationCompare = declarationCompare.bind(this, this.ids);\n    this.referenceCompare = referenceCompare.bind(this, this.ids);\n    this.variableCompare = variableCompare.bind(this, this.ids);\n  }\n\n  serialize() {\n    return this.serializeScope(this.scope);\n  }\n\n  serializeScope(scope) {\n    return `{\"node\": \"${this.serializeNode(scope.astNode)}\"`\n   + `, \"type\": \"${scope.type.name}\"`\n   + `, \"isDynamic\": ${scope.dynamic}`\n   + `, \"through\": ${this.serializeReferenceList(this.collectThrough(scope.through))}`\n   + `, \"variables\": ${this.serializeVariableList(scope.variableList)}`\n   + `, \"children\": [${scope.children.map(this.serializeScope.bind(this)).join(', ')}]`\n   + '}';\n  }\n\n  serializeNode(node) {\n    if (node.type === 'IdentifierExpression') {\n      return 'IdentifierExpression(' + node.name + ')_' + this.ids.get(node);\n    } else if (node.type === 'AssignmentTargetIdentifier') {\n      return 'AssignmentTargetIdentifier(' + node.name + ')_' + this.ids.get(node);\n    } else if (node.type === 'BindingIdentifier') {\n      return 'BindingIdentifier(' + node.name + ')_' + this.ids.get(node);\n    }\n    return node.type + '_' + this.ids.get(node);\n\n  }\n\n  collectThrough(through) {\n    let references = [];\n    through.forEach(v => references.push(v));\n    return references.sort(this.referenceCompare);\n  }\n\n  serializeReference(reference) {\n    return `{\"node\": \"${this.serializeNode(reference.node)}\"`\n   + `, \"accessibility\": \"${reference.accessibility.isDelete ? 'Delete' : ''}${reference.accessibility.isRead ? 'Read' : ''}${reference.accessibility.isWrite ? 'Write' : ''}\"`\n   + '}';\n  }\n\n  serializeReferenceList(references) {\n    return `[${references.map(this.serializeReference.bind(this)).join(', ')}]`;\n  }\n\n  serializeDeclaration(declaration) {\n    return `{\"node\": \"${this.serializeNode(declaration.node)}\"`\n   + `, \"kind\": \"${declaration.type.name}\"`\n   + '}';\n  }\n\n  serializeVariable(variable) {\n    return `{\"name\": \"${variable.name}\"`\n   + `, \"references\": ${this.serializeReferenceList(variable.references)}`\n   + `, \"declarations\": [${variable.declarations.map(this.serializeDeclaration.bind(this)).join(', ')}]`\n   + '}';\n  }\n\n  serializeVariableList(variables) {\n    variables = variables.slice(0).sort(this.variableCompare);\n    return `[${variables.map(this.serializeVariable.bind(this)).join(', ')}]`;\n  }\n}\n\n\nfunction declarationCompare(ids, d1, d2) {\n  function kindToInd(kind) {\n    switch (kind) {\n      case DeclarationType.VAR:\n        return 0;\n      case DeclarationType.CONST:\n        return 1;\n      case DeclarationType.LET:\n        return 2;\n      case DeclarationType.FUNCTION_DECLARATION:\n        return 3;\n      case DeclarationType.FUNCTION_VAR_DECLARATION:\n        return 4;\n      case DeclarationType.FUNCTION_NAME:\n        return 5;\n      case DeclarationType.CLASS_NAME:\n        return 6;\n      case DeclarationType.PARAMETER:\n        return 7;\n      case DeclarationType.CATCH_PARAMETER:\n        return 8;\n      case DeclarationType.IMPORT:\n        return 9;\n      default:\n        throw 'Unrecognized declaration type';\n    }\n  }\n  let comparison = kindToInd(d1.type) - kindToInd(d2.type);\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return ids.get(d1.node) - ids.get(d2.node);\n}\n\nfunction referenceCompare(ids, r1, r2) {\n  let comparison = (r1.accessibility.isRead ? 1 : 0) + (r1.accessibility.isWrite ? 2 : 0) + (r1.accessibility.isDelete ? 4 : 0)\n                    - ((r2.accessibility.isRead ? 1 : 0) + (r2.accessibility.isWrite ? 2 : 0) + (r2.accessibility.isDelete ? 4 : 0));\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return ids.get(r1.node) - ids.get(r2.node);\n}\n\nfunction variableCompare(ids, v1, v2) {\n  if (v1.name < v2.name) {\n    return -1;\n  }\n  if (v1.name > v2.name) {\n    return 1;\n  }\n  let comparison = v1.declarations.length - v2.declarations.length;\n  if (comparison !== 0) {\n    return comparison;\n  }\n  comparison = v1.references.length - v2.references.length;\n  if (comparison !== 0) {\n    return comparison;\n  }\n  for (let i = 0; i < v1.declarations.length; ++i) {\n    let d1 = v1.declarations[i];\n    let d2 = v2.declarations[i];\n    comparison = declarationCompare(ids, d1, d2);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  for (let i = 0; i < v1.references.length; ++i) {\n    let r1 = v1.references[i];\n    let r2 = v2.references[i];\n    comparison = referenceCompare(ids, r1, r2);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return 0;\n}\n\nfunction serialize(scope) {\n  return (new Serializer(scope)).serialize();\n}\n\nmodule.exports = { serialize };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}