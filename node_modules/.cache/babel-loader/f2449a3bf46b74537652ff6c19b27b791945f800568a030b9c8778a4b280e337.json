{"ast":null,"code":"const objectAssign = require('object-assign');\nconst {\n  keyword\n} = require('esutils');\nconst {\n  Precedence,\n  getPrecedence,\n  escapeStringLiteral,\n  CodeRep,\n  Empty,\n  Token,\n  NumberCodeRep,\n  Paren,\n  Bracket,\n  Brace,\n  NoIn,\n  ContainsIn,\n  Seq,\n  SemiOp\n} = require('./coderep');\nconst INDENT = '  ';\nclass Linebreak extends CodeRep {\n  constructor() {\n    super();\n    this.indentation = 0;\n  }\n  emit(ts) {\n    ts.put('\\n');\n    for (let i = 0; i < this.indentation; ++i) {\n      ts.put(INDENT);\n    }\n  }\n}\nfunction empty() {\n  return new Empty();\n}\nfunction noIn(rep) {\n  return new NoIn(rep);\n}\nfunction markContainsIn(state) {\n  return state.containsIn ? new ContainsIn(state) : state;\n}\nfunction seq(...reps) {\n  return new Seq(reps);\n}\nfunction isEmpty(codeRep) {\n  return codeRep instanceof Empty || codeRep instanceof Linebreak || codeRep instanceof Seq && codeRep.children.every(isEmpty);\n}\nlet Sep = {};\nconst separatorNames = ['ARRAY_EMPTY', 'ARRAY_BEFORE_COMMA', 'ARRAY_AFTER_COMMA', 'SPREAD', 'AWAIT', 'AFTER_FORAWAIT_AWAIT', 'BEFORE_DEFAULT_EQUALS', 'AFTER_DEFAULT_EQUALS', 'REST', 'OBJECT_BEFORE_COMMA', 'OBJECT_AFTER_COMMA', 'BEFORE_PROP', 'AFTER_PROP', 'BEFORE_JUMP_LABEL', 'ARGS_BEFORE_COMMA', 'ARGS_AFTER_COMMA', 'CALL', 'BEFORE_CATCH_BINDING', 'AFTER_CATCH_BINDING', 'BEFORE_CLASS_NAME', 'BEFORE_EXTENDS', 'AFTER_EXTENDS', 'BEFORE_CLASS_DECLARATION_ELEMENTS', 'BEFORE_CLASS_EXPRESSION_ELEMENTS', 'AFTER_STATIC', 'BEFORE_CLASS_ELEMENT', 'AFTER_CLASS_ELEMENT', 'BEFORE_TERNARY_QUESTION', 'AFTER_TERNARY_QUESTION', 'BEFORE_TERNARY_COLON', 'AFTER_TERNARY_COLON', 'COMPUTED_MEMBER_EXPRESSION', 'COMPUTED_MEMBER_ASSIGNMENT_TARGET', 'AFTER_DO', 'BEFORE_DOWHILE_WHILE', 'AFTER_DOWHILE_WHILE', 'AFTER_FORIN_FOR', 'BEFORE_FORIN_IN', 'AFTER_FORIN_FOR', 'BEFORE_FORIN_BODY', 'AFTER_FOROF_FOR', 'BEFORE_FOROF_OF', 'AFTER_FOROF_FOR', 'BEFORE_FOROF_BODY', 'AFTER_FOR_FOR', 'BEFORE_FOR_INIT', 'AFTER_FOR_INIT', 'EMPTY_FOR_INIT', 'BEFORE_FOR_TEST', 'AFTER_FOR_TEST', 'EMPTY_FOR_TEST', 'BEFORE_FOR_UPDATE', 'AFTER_FOR_UPDATE', 'EMPTY_FOR_UPDATE', 'BEFORE_FOR_BODY', 'BEFORE_GENERATOR_STAR', 'AFTER_GENERATOR_STAR', 'BEFORE_FUNCTION_PARAMS', 'BEFORE_FUNCTION_DECLARATION_BODY', 'BEFORE_FUNCTION_EXPRESSION_BODY', 'AFTER_FUNCTION_DIRECTIVES', 'BEFORE_ARROW', 'AFTER_ARROW', 'AFTER_GET', 'BEFORE_GET_PARAMS', 'BEFORE_GET_BODY', 'AFTER_IF', 'AFTER_IF_TEST', 'BEFORE_ELSE', 'AFTER_ELSE', 'PARAMETER_BEFORE_COMMA', 'PARAMETER_AFTER_COMMA', 'NAMED_IMPORT_BEFORE_COMMA', 'NAMED_IMPORT_AFTER_COMMA', 'IMPORT_BEFORE_COMMA', 'IMPORT_AFTER_COMMA', 'BEFORE_IMPORT_BINDINGS', 'BEFORE_IMPORT_MODULE', 'AFTER_IMPORT_BINDINGS', 'AFTER_FROM', 'BEFORE_IMPORT_NAMESPACE', 'BEFORE_IMPORT_STAR', 'AFTER_IMPORT_STAR', 'AFTER_IMPORT_AS', 'AFTER_NAMESPACE_BINDING', 'BEFORE_IMPORT_AS', 'AFTER_IMPORT_AS', 'EXPORTS_BEFORE_COMMA', 'EXPORTS_AFTER_COMMA', 'BEFORE_EXPORT_STAR', 'AFTER_EXPORT_STAR', 'BEFORE_EXPORT_BINDINGS', 'AFTER_EXPORT_FROM_BINDINGS', 'AFTER_EXPORT_LOCAL_BINDINGS', 'AFTER_EXPORT', 'EXPORT_DEFAULT', 'AFTER_EXPORT_DEFAULT', 'BEFORE_EXPORT_AS', 'AFTER_EXPORT_AS', 'BEFORE_LABEL_COLON', 'AFTER_LABEL_COLON', 'AFTER_METHOD_GENERATOR_STAR', 'AFTER_METHOD_ASYNC', 'AFTER_METHOD_NAME', 'BEFORE_METHOD_BODY', 'AFTER_MODULE_DIRECTIVES', 'AFTER_NEW', 'BEFORE_NEW_ARGS', 'EMPTY_NEW_CALL', 'NEW_TARGET_BEFORE_DOT', 'NEW_TARGET_AFTER_DOT', 'RETURN', 'AFTER_SET', 'BEFORE_SET_PARAMS', 'BEFORE_SET_BODY', 'AFTER_SCRIPT_DIRECTIVES', 'BEFORE_STATIC_MEMBER_DOT', 'AFTER_STATIC_MEMBER_DOT', 'BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT', 'AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT', 'BEFORE_CASE_TEST', 'AFTER_CASE_TEST', 'BEFORE_CASE_BODY', 'AFTER_CASE_BODY', 'DEFAULT', 'AFTER_DEFAULT_BODY', 'BEFORE_SWITCH_DISCRIM', 'BEFORE_SWITCH_BODY', 'TEMPLATE_TAG', 'BEFORE_TEMPLATE_EXPRESSION', 'AFTER_TEMPLATE_EXPRESSION', 'THROW', 'AFTER_TRY', 'BEFORE_CATCH', 'BEFORE_FINALLY', 'AFTER_FINALLY', 'VARIABLE_DECLARATION', 'YIELD', 'BEFORE_YIELD_STAR', 'AFTER_YIELD_STAR', 'DECLARATORS_BEFORE_COMMA', 'DECLARATORS_AFTER_COMMA', 'BEFORE_INIT_EQUALS', 'AFTER_INIT_EQUALS', 'AFTER_WHILE', 'BEFORE_WHILE_BODY', 'AFTER_WITH', 'BEFORE_WITH_BODY', 'PAREN_AVOIDING_DIRECTIVE_BEFORE', 'PAREN_AVOIDING_DIRECTIVE_AFTER', 'PRECEDENCE_BEFORE', 'PRECEDENCE_AFTER', 'EXPRESSION_PAREN_BEFORE', 'EXPRESSION_PAREN_AFTER', 'CALL_PAREN_BEFORE', 'CALL_PAREN_AFTER', 'CALL_PAREN_EMPTY', 'CATCH_PAREN_BEFORE', 'CATCH_PAREN_AFTER', 'DO_WHILE_TEST_PAREN_BEFORE', 'DO_WHILE_TEST_PAREN_AFTER', 'EXPRESSION_STATEMENT_PAREN_BEFORE', 'EXPRESSION_STATEMENT_PAREN_AFTER', 'FOR_LET_PAREN_BEFORE', 'FOR_LET_PAREN_AFTER', 'FOR_IN_LET_PAREN_BEFORE', 'FOR_IN_LET_PAREN_AFTER', 'FOR_IN_PAREN_BEFORE', 'FOR_IN_PAREN_AFTER', 'FOR_OF_LET_PAREN_BEFORE', 'FOR_OF_LET_PAREN_AFTER', 'FOR_OF_PAREN_BEFORE', 'FOR_OF_PAREN_AFTER', 'PARAMETERS_PAREN_BEFORE', 'PARAMETERS_PAREN_AFTER', 'PARAMETERS_PAREN_EMPTY', 'ARROW_PARAMETERS_PAREN_BEFORE', 'ARROW_PARAMETERS_PAREN_AFTER', 'ARROW_PARAMETERS_PAREN_EMPTY', 'ARROW_BODY_PAREN_BEFORE', 'ARROW_BODY_PAREN_AFTER', 'BEFORE_ARROW_ASYNC_PARAMS', 'GETTER_PARAMS', 'IF_PAREN_BEFORE', 'IF_PAREN_AFTER', 'EXPORT_PAREN_BEFORE', 'EXPORT_PAREN_AFTER', 'NEW_CALLEE_PAREN_BEFORE', 'NEW_CALLEE_PAREN_AFTER', 'NEW_PAREN_BEFORE', 'NEW_PAREN_AFTER', 'NEW_PAREN_EMPTY', 'SETTER_PARAM_BEFORE', 'SETTER_PARAM_AFTER', 'SWITCH_DISCRIM_PAREN_BEFORE', 'SWITCH_DISCRIM_PAREN_AFTER', 'WHILE_TEST_PAREN_BEFORE', 'WHILE_TEST_PAREN_AFTER', 'WITH_PAREN_BEFORE', 'WITH_PAREN_AFTER', 'OBJECT_BRACE_INITIAL', 'OBJECT_BRACE_FINAL', 'OBJECT_EMPTY', 'BLOCK_BRACE_INITIAL', 'BLOCK_BRACE_FINAL', 'BLOCK_EMPTY', 'CLASS_BRACE_INITIAL', 'CLASS_BRACE_FINAL', 'CLASS_EMPTY', 'CLASS_EXPRESSION_BRACE_INITIAL', 'CLASS_EXPRESSION_BRACE_FINAL', 'CLASS_EXPRESSION_BRACE_EMPTY', 'FUNCTION_BRACE_INITIAL', 'FUNCTION_BRACE_FINAL', 'FUNCTION_EMPTY', 'FUNCTION_EXPRESSION_BRACE_INITIAL', 'FUNCTION_EXPRESSION_BRACE_FINAL', 'FUNCTION_EXPRESSION_EMPTY', 'ARROW_BRACE_INITIAL', 'ARROW_BRACE_FINAL', 'ARROW_BRACE_EMPTY', 'GET_BRACE_INTIAL', 'GET_BRACE_FINAL', 'GET_BRACE_EMPTY', 'MISSING_ELSE_INTIIAL', 'MISSING_ELSE_FINAL', 'MISSING_ELSE_EMPTY', 'IMPORT_BRACE_INTIAL', 'IMPORT_BRACE_FINAL', 'IMPORT_BRACE_EMPTY', 'EXPORT_BRACE_INITIAL', 'EXPORT_BRACE_FINAL', 'EXPORT_BRACE_EMPTY', 'METHOD_BRACE_INTIAL', 'METHOD_BRACE_FINAL', 'METHOD_BRACE_EMPTY', 'SET_BRACE_INTIIAL', 'SET_BRACE_FINAL', 'SET_BRACE_EMPTY', 'SWITCH_BRACE_INTIAL', 'SWITCH_BRACE_FINAL', 'SWITCH_BRACE_EMPTY', 'ARRAY_INITIAL', 'ARRAY_FINAL', 'COMPUTED_MEMBER_BRACKET_INTIAL', 'COMPUTED_MEMBER_BRACKET_FINAL', 'COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL', 'COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL', 'COMPUTED_PROPERTY_BRACKET_INTIAL', 'COMPUTED_PROPERTY_BRACKET_FINAL'];\nfor (let i = 0; i < separatorNames.length; ++i) {\n  Sep[separatorNames[i]] = {\n    type: separatorNames[i]\n  };\n}\nSep.BEFORE_ASSIGN_OP = function (op) {\n  return {\n    type: 'BEFORE_ASSIGN_OP',\n    op\n  };\n};\nSep.AFTER_ASSIGN_OP = function (op) {\n  return {\n    type: 'AFTER_ASSIGN_OP',\n    op\n  };\n};\nSep.BEFORE_BINOP = function (op) {\n  return {\n    type: 'BEFORE_BINOP',\n    op\n  };\n};\nSep.AFTER_BINOP = function (op) {\n  return {\n    type: 'AFTER_BINOP',\n    op\n  };\n};\nSep.BEFORE_POSTFIX = function (op) {\n  return {\n    type: 'BEFORE_POSTFIX',\n    op\n  };\n};\nSep.UNARY = function (op) {\n  return {\n    type: 'UNARY',\n    op\n  };\n};\nSep.AFTER_STATEMENT = function (node) {\n  return {\n    type: 'AFTER_STATEMENT',\n    node\n  };\n};\nSep.BEFORE_FUNCTION_NAME = function (node) {\n  return {\n    type: 'BEFORE_FUNCTION_NAME',\n    node\n  };\n};\nclass ExtensibleCodeGen {\n  parenToAvoidBeingDirective(element, original) {\n    if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {\n      return seq(this.paren(original.children[0], Sep.PAREN_AVOIDING_DIRECTIVE_BEFORE, Sep.PAREN_AVOIDING_DIRECTIVE_AFTER), this.semiOp());\n    }\n    return original;\n  }\n  t(token, isRegExp = false) {\n    return new Token(token, isRegExp);\n  }\n  p(node, precedence, a) {\n    return getPrecedence(node) < precedence ? this.paren(a, Sep.PRECEDENCE_BEFORE, Sep.PRECEDENCE_AFTER) : a;\n  }\n  getAssignmentExpr(state) {\n    return state ? state.containsGroup ? this.paren(state, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER) : state : empty();\n  }\n  paren(rep, first, last, emptySep) {\n    if (isEmpty(rep)) {\n      return new Paren(this.sep(emptySep));\n    }\n    return new Paren(seq(first ? this.sep(first) : empty(), rep, last ? this.sep(last) : empty()));\n  }\n  brace(rep, node, first, last, emptySep) {\n    if (isEmpty(rep)) {\n      return new Brace(this.sep(emptySep));\n    }\n    return new Brace(seq(this.sep(first), rep, this.sep(last)));\n  }\n  bracket(rep, first, last, emptySep) {\n    if (isEmpty(rep)) {\n      return new Bracket(this.sep(emptySep));\n    }\n    return new Bracket(seq(this.sep(first), rep, this.sep(last)));\n  }\n  commaSep(pieces, before, after) {\n    let first = true;\n    pieces = pieces.map(p => {\n      if (first) {\n        first = false;\n        return p;\n      }\n      return seq(this.sep(before), this.t(','), this.sep(after), p);\n    });\n    return seq(...pieces);\n  }\n  semiOp() {\n    return new SemiOp();\n  }\n  sep( /* kind */\n  ) {\n    return empty();\n  }\n  reduceArrayExpression(node, {\n    elements\n  }) {\n    if (elements.length === 0) {\n      return this.bracket(empty(), null, null, Sep.ARRAY_EMPTY);\n    }\n    let content = this.commaSep(elements.map(e => this.getAssignmentExpr(e)), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);\n    if (elements.length > 0 && elements[elements.length - 1] == null) {\n      content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));\n    }\n    return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL);\n  }\n  reduceAwaitExpression(node, {\n    expression\n  }) {\n    return seq(this.t('await'), this.sep(Sep.AWAIT), this.p(node.expression, getPrecedence(node), expression));\n  }\n  reduceSpreadElement(node, {\n    expression\n  }) {\n    return seq(this.t('...'), this.sep(Sep.SPREAD), this.p(node.expression, Precedence.Assignment, expression));\n  }\n  reduceSpreadProperty(node, {\n    expression\n  }) {\n    return seq(this.t('...'), this.sep(Sep.SPREAD), this.getAssignmentExpr(expression));\n  }\n  reduceAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    let leftCode = binding;\n    let rightCode = expression;\n    let containsIn = expression.containsIn;\n    let startsWithCurly = binding.startsWithCurly;\n    let startsWithLetSquareBracket = binding.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = binding.startsWithFunctionOrClass;\n    if (getPrecedence(node.expression) < getPrecedence(node)) {\n      rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      containsIn = false;\n    }\n    return objectAssign(seq(leftCode, this.sep(Sep.BEFORE_ASSIGN_OP('=')), this.t('='), this.sep(Sep.AFTER_ASSIGN_OP('=')), rightCode), {\n      containsIn,\n      startsWithCurly,\n      startsWithLetSquareBracket,\n      startsWithFunctionOrClass\n    });\n  }\n  reduceAssignmentTargetIdentifier(node) {\n    let a = this.t(node.name);\n    if (node.name === 'let') {\n      a.startsWithLet = true;\n    }\n    return a;\n  }\n  reduceAssignmentTargetWithDefault(node, {\n    binding,\n    init\n  }) {\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n  reduceCompoundAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    let leftCode = binding;\n    let rightCode = expression;\n    let containsIn = expression.containsIn;\n    let startsWithCurly = binding.startsWithCurly;\n    let startsWithLetSquareBracket = binding.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = binding.startsWithFunctionOrClass;\n    if (getPrecedence(node.expression) < getPrecedence(node)) {\n      rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      containsIn = false;\n    }\n    return objectAssign(seq(leftCode, this.sep(Sep.BEFORE_ASSIGN_OP(node.operator)), this.t(node.operator), this.sep(Sep.AFTER_ASSIGN_OP(node.operator)), rightCode), {\n      containsIn,\n      startsWithCurly,\n      startsWithLetSquareBracket,\n      startsWithFunctionOrClass\n    });\n  }\n  reduceBinaryExpression(node, {\n    left,\n    right\n  }) {\n    let leftCode = left;\n    let startsWithCurly = left.startsWithCurly;\n    let startsWithLetSquareBracket = left.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = left.startsWithFunctionOrClass;\n    let leftContainsIn = left.containsIn;\n    let isRightAssociative = node.operator === '**';\n    if (getPrecedence(node.left) < getPrecedence(node) || isRightAssociative && (getPrecedence(node.left) === getPrecedence(node) || node.left.type === 'UnaryExpression')) {\n      leftCode = this.paren(leftCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      startsWithCurly = false;\n      startsWithLetSquareBracket = false;\n      startsWithFunctionOrClass = false;\n      leftContainsIn = false;\n    }\n    let rightCode = right;\n    let rightContainsIn = right.containsIn;\n    if (getPrecedence(node.right) < getPrecedence(node) || !isRightAssociative && getPrecedence(node.right) === getPrecedence(node)) {\n      rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      rightContainsIn = false;\n    }\n    return objectAssign(seq(leftCode, this.sep(Sep.BEFORE_BINOP(node.operator)), this.t(node.operator), this.sep(Sep.AFTER_BINOP(node.operator)), rightCode), {\n      containsIn: leftContainsIn || rightContainsIn || node.operator === 'in',\n      containsGroup: node.operator === ',',\n      startsWithCurly,\n      startsWithLetSquareBracket,\n      startsWithFunctionOrClass\n    });\n  }\n  reduceBindingWithDefault(node, {\n    binding,\n    init\n  }) {\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n  reduceBindingIdentifier(node) {\n    let a = this.t(node.name);\n    if (node.name === 'let') {\n      a.startsWithLet = true;\n    }\n    return a;\n  }\n  reduceArrayAssignmentTarget(node, {\n    elements,\n    rest\n  }) {\n    let content;\n    if (elements.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      elements = elements.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]);\n      content = this.commaSep(elements.map(e => this.getAssignmentExpr(e)), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);\n      if (elements.length > 0 && elements[elements.length - 1] == null) {\n        content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));\n      }\n    }\n    return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL, Sep.ARRAY_EMPTY);\n  }\n  reduceArrayBinding(node, {\n    elements,\n    rest\n  }) {\n    let content;\n    if (elements.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      elements = elements.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]);\n      content = this.commaSep(elements.map(e => this.getAssignmentExpr(e)), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);\n      if (elements.length > 0 && elements[elements.length - 1] == null) {\n        content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));\n      }\n    }\n    return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL, Sep.ARRAY_EMPTY);\n  }\n  reduceObjectAssignmentTarget(node, {\n    properties,\n    rest\n  }) {\n    let content;\n    if (properties.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      content = this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n      content = rest == null ? content : this.commaSep([content, seq(this.t('...'), this.sep(Sep.REST), rest)], Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n    }\n    let state = this.brace(content, node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);\n    state.startsWithCurly = true;\n    return state;\n  }\n  reduceObjectBinding(node, {\n    properties,\n    rest\n  }) {\n    let content;\n    if (properties.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      content = this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n      content = rest == null ? content : this.commaSep([content, seq(this.t('...'), this.sep(Sep.REST), rest)], Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n    }\n    let state = this.brace(content, node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);\n    state.startsWithCurly = true;\n    return state;\n  }\n  reduceAssignmentTargetPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    if (node.init == null) return binding;\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n  reduceAssignmentTargetPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), binding);\n  }\n  reduceBindingPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    if (node.init == null) return binding;\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n  reduceBindingPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), binding);\n  }\n  reduceBlock(node, {\n    statements\n  }) {\n    return this.brace(seq(...statements), node, Sep.BLOCK_BRACE_INITIAL, Sep.BLOCK_BRACE_FINAL, Sep.BLOCK_EMPTY);\n  }\n  reduceBlockStatement(node, {\n    block\n  }) {\n    return seq(block, this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceBreakStatement(node) {\n    return seq(this.t('break'), node.label ? seq(this.sep(Sep.BEFORE_JUMP_LABEL), this.t(node.label)) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceCallExpression(node, {\n    callee,\n    arguments: args\n  }) {\n    const parenthizedArgs = args.map((a, i) => this.p(node.arguments[i], Precedence.Assignment, a));\n    return objectAssign(seq(this.p(node.callee, getPrecedence(node), callee), this.sep(Sep.CALL), this.paren(this.commaSep(parenthizedArgs, Sep.ARGS_BEFORE_COMMA, Sep.ARGS_AFTER_COMMA), Sep.CALL_PAREN_BEFORE, Sep.CALL_PAREN_AFTER, Sep.CALL_PAREN_EMPTY)), {\n      startsWithCurly: callee.startsWithCurly,\n      startsWithLet: callee.startsWithLet,\n      startsWithLetSquareBracket: callee.startsWithLetSquareBracket,\n      startsWithFunctionOrClass: callee.startsWithFunctionOrClass\n    });\n  }\n  reduceCatchClause(node, {\n    binding,\n    body\n  }) {\n    if (binding == null) {\n      return seq(this.t('catch'), this.sep(Sep.BEFORE_CATCH_BINDING), body);\n    }\n    return seq(this.t('catch'), this.sep(Sep.BEFORE_CATCH_BINDING), this.paren(binding, Sep.CATCH_PAREN_BEFORE, Sep.CATCH_PAREN_AFTER), this.sep(Sep.AFTER_CATCH_BINDING), body);\n  }\n  reduceClassDeclaration(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    let state = seq(this.t('class'), node.name.name === '*default*' ? empty() : seq(this.sep(Sep.BEFORE_CLASS_NAME), name));\n    if (_super != null) {\n      state = seq(state, this.sep(Sep.BEFORE_EXTENDS), this.t('extends'), this.sep(Sep.AFTER_EXTENDS), this.p(node.super, Precedence.New, _super));\n    }\n    state = seq(state, this.sep(Sep.BEFORE_CLASS_DECLARATION_ELEMENTS), this.brace(seq(...elements), node, Sep.CLASS_BRACE_INITIAL, Sep.CLASS_BRACE_FINAL, Sep.CLASS_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n    return state;\n  }\n  reduceClassExpression(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    let state = this.t('class');\n    if (name != null) {\n      state = seq(state, this.sep(Sep.BEFORE_CLASS_NAME), name);\n    }\n    if (_super != null) {\n      state = seq(state, this.sep(Sep.BEFORE_EXTENDS), this.t('extends'), this.sep(Sep.AFTER_EXTENDS), this.p(node.super, Precedence.New, _super));\n    }\n    state = seq(state, this.sep(Sep.BEFORE_CLASS_EXPRESSION_ELEMENTS), this.brace(seq(...elements), node, Sep.CLASS_EXPRESSION_BRACE_INITIAL, Sep.CLASS_EXPRESSION_BRACE_FINAL, Sep.CLASS_EXPRESSION_BRACE_EMPTY));\n    state.startsWithFunctionOrClass = true;\n    return state;\n  }\n  reduceClassElement(node, {\n    method\n  }) {\n    method = seq(this.sep(Sep.BEFORE_CLASS_ELEMENT), method, this.sep(Sep.AFTER_CLASS_ELEMENT));\n    if (!node.isStatic) return method;\n    return seq(this.t('static'), this.sep(Sep.AFTER_STATIC), method);\n  }\n  reduceComputedMemberAssignmentTarget(node, {\n    object,\n    expression\n  }) {\n    let startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';\n    return objectAssign(seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET), this.bracket(expression, Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL, Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL)), {\n      startsWithLet: object.startsWithLet,\n      startsWithLetSquareBracket,\n      startsWithCurly: object.startsWithCurly,\n      startsWithFunctionOrClass: object.startsWithFunctionOrClass\n    });\n  }\n  reduceComputedMemberExpression(node, {\n    object,\n    expression\n  }) {\n    let startsWithLetSquareBracket = object.startsWithLetSquareBracket || node.object.type === 'IdentifierExpression' && node.object.name === 'let';\n    return objectAssign(seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.COMPUTED_MEMBER_EXPRESSION), this.bracket(expression, Sep.COMPUTED_MEMBER_BRACKET_INTIAL, Sep.COMPUTED_MEMBER_BRACKET_FINAL)), {\n      startsWithLet: object.startsWithLet,\n      startsWithLetSquareBracket,\n      startsWithCurly: object.startsWithCurly,\n      startsWithFunctionOrClass: object.startsWithFunctionOrClass\n    });\n  }\n  reduceComputedPropertyName(node, {\n    expression\n  }) {\n    return this.bracket(this.p(node.expression, Precedence.Assignment, expression), Sep.COMPUTED_PROPERTY_BRACKET_INTIAL, Sep.COMPUTED_PROPERTY_BRACKET_FINAL);\n  }\n  reduceConditionalExpression(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    let containsIn = test.containsIn || alternate.containsIn;\n    let startsWithCurly = test.startsWithCurly;\n    let startsWithLetSquareBracket = test.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = test.startsWithFunctionOrClass;\n    return objectAssign(seq(this.p(node.test, Precedence.LogicalOR, test), this.sep(Sep.BEFORE_TERNARY_QUESTION), this.t('?'), this.sep(Sep.AFTER_TERNARY_QUESTION), this.p(node.consequent, Precedence.Assignment, consequent), this.sep(Sep.BEFORE_TERNARY_COLON), this.t(':'), this.sep(Sep.AFTER_TERNARY_COLON), this.p(node.alternate, Precedence.Assignment, alternate)), {\n      containsIn,\n      startsWithCurly,\n      startsWithLetSquareBracket,\n      startsWithFunctionOrClass\n    });\n  }\n  reduceContinueStatement(node) {\n    return seq(this.t('continue'), node.label ? seq(this.sep(Sep.BEFORE_JUMP_LABEL), this.t(node.label)) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceDataProperty(node, {\n    name,\n    expression\n  }) {\n    return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), this.getAssignmentExpr(expression));\n  }\n  reduceDebuggerStatement(node) {\n    return seq(this.t('debugger'), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceDoWhileStatement(node, {\n    body,\n    test\n  }) {\n    return seq(this.t('do'), this.sep(Sep.AFTER_DO), body, this.sep(Sep.BEFORE_DOWHILE_WHILE), this.t('while'), this.sep(Sep.AFTER_DOWHILE_WHILE), this.paren(test, Sep.DO_WHILE_TEST_PAREN_BEFORE, Sep.DO_WHILE_TEST_PAREN_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceEmptyStatement(node) {\n    return seq(this.t(';'), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceExpressionStatement(node, {\n    expression\n  }) {\n    let needsParens = expression.startsWithCurly || expression.startsWithLetSquareBracket || expression.startsWithFunctionOrClass;\n    return seq(needsParens ? this.paren(expression, Sep.EXPRESSION_STATEMENT_PAREN_BEFORE, Sep.EXPRESSION_STATEMENT_PAREN_AFTER) : expression, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceForInStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;\n    return objectAssign(seq(this.t('for'), this.sep(Sep.AFTER_FORIN_FOR), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_IN_LET_PAREN_BEFORE, Sep.FOR_IN_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FORIN_IN), this.t('in'), this.sep(Sep.AFTER_FORIN_FOR), right), Sep.FOR_IN_PAREN_BEFORE, Sep.FOR_IN_PAREN_AFTER), this.sep(Sep.BEFORE_FORIN_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n  reduceForOfStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;\n    return objectAssign(seq(this.t('for'), this.sep(Sep.AFTER_FOROF_FOR), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_OF_LET_PAREN_BEFORE, Sep.FOR_OF_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FOROF_OF), this.t('of'), this.sep(Sep.AFTER_FOROF_FOR), this.p(node.right, Precedence.Assignment, right)), Sep.FOR_OF_PAREN_BEFORE, Sep.FOR_OF_PAREN_AFTER), this.sep(Sep.BEFORE_FOROF_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n  reduceForStatement(node, {\n    init,\n    test,\n    update,\n    body\n  }) {\n    if (init) {\n      if (init.startsWithLetSquareBracket) {\n        init = this.paren(init, Sep.FOR_LET_PAREN_BEFORE, Sep.FOR_LET_PAREN_AFTER);\n      }\n      init = noIn(markContainsIn(init));\n    }\n    return objectAssign(seq(this.t('for'), this.sep(Sep.AFTER_FOR_FOR), this.paren(seq(init ? seq(this.sep(Sep.BEFORE_FOR_INIT), init, this.sep(Sep.AFTER_FOR_INIT)) : this.sep(Sep.EMPTY_FOR_INIT), this.t(';'), test ? seq(this.sep(Sep.BEFORE_FOR_TEST), test, this.sep(Sep.AFTER_FOR_TEST)) : this.sep(Sep.EMPTY_FOR_TEST), this.t(';'), update ? seq(this.sep(Sep.BEFORE_FOR_UPDATE), update, this.sep(Sep.AFTER_FOR_UPDATE)) : this.sep(Sep.EMPTY_FOR_UPDATE))), this.sep(Sep.BEFORE_FOR_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n  reduceForAwaitStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;\n    return objectAssign(seq(this.t('for'), this.sep(Sep.AFTER_FOROF_FOR), this.t('await'), this.sep(Sep.AFTER_FORAWAIT_AWAIT), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_OF_LET_PAREN_BEFORE, Sep.FOR_OF_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FOROF_OF), this.t('of'), this.sep(Sep.AFTER_FOROF_FOR), this.p(node.right, Precedence.Assignment, right)), Sep.FOR_OF_PAREN_BEFORE, Sep.FOR_OF_PAREN_AFTER), this.sep(Sep.BEFORE_FOROF_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n  reduceFunctionBody(node, {\n    directives,\n    statements\n  }) {\n    if (statements.length) {\n      statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);\n    }\n    return seq(...directives, directives.length ? this.sep(Sep.AFTER_FUNCTION_DIRECTIVES) : empty(), ...statements);\n  }\n  reduceFunctionDeclaration(node, {\n    name,\n    params,\n    body\n  }) {\n    return seq(node.isAsync ? this.t('async') : empty(), this.t('function'), node.isGenerator ? seq(this.sep(Sep.BEFORE_GENERATOR_STAR), this.t('*'), this.sep(Sep.AFTER_GENERATOR_STAR)) : empty(), this.sep(Sep.BEFORE_FUNCTION_NAME(node)), node.name.name === '*default*' ? empty() : name, this.sep(Sep.BEFORE_FUNCTION_PARAMS), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_FUNCTION_DECLARATION_BODY), this.brace(body, node, Sep.FUNCTION_BRACE_INITIAL, Sep.FUNCTION_BRACE_FINAL, Sep.FUNCTION_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceFunctionExpression(node, {\n    name,\n    params,\n    body\n  }) {\n    let state = seq(node.isAsync ? this.t('async') : empty(), this.t('function'), node.isGenerator ? seq(this.sep(Sep.BEFORE_GENERATOR_STAR), this.t('*'), this.sep(Sep.AFTER_GENERATOR_STAR)) : empty(), this.sep(Sep.BEFORE_FUNCTION_NAME(node)), name ? name : empty(), this.sep(Sep.BEFORE_FUNCTION_PARAMS), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_FUNCTION_EXPRESSION_BODY), this.brace(body, node, Sep.FUNCTION_EXPRESSION_BRACE_INITIAL, Sep.FUNCTION_EXPRESSION_BRACE_FINAL, Sep.FUNCTION_EXPRESSION_EMPTY));\n    state.startsWithFunctionOrClass = true;\n    return state;\n  }\n  reduceFormalParameters(node, {\n    items,\n    rest\n  }) {\n    return this.commaSep(items.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]), Sep.PARAMETER_BEFORE_COMMA, Sep.PARAMETER_AFTER_COMMA);\n  }\n  reduceArrowExpression(node, {\n    params,\n    body\n  }) {\n    if (node.params.rest != null || node.params.items.length !== 1 || node.params.items[0].type !== 'BindingIdentifier') {\n      params = this.paren(params, Sep.ARROW_PARAMETERS_PAREN_BEFORE, Sep.ARROW_PARAMETERS_PAREN_AFTER, Sep.ARROW_PARAMETERS_PAREN_EMPTY);\n    }\n    let containsIn = false;\n    if (node.body.type === 'FunctionBody') {\n      body = this.brace(body, node, Sep.ARROW_BRACE_INITIAL, Sep.ARROW_BRACE_FINAL, Sep.ARROW_BRACE_EMPTY);\n    } else if (body.startsWithCurly) {\n      body = this.paren(body, Sep.ARROW_BODY_PAREN_BEFORE, Sep.ARROW_BODY_PAREN_AFTER);\n    } else if (body.containsIn) {\n      containsIn = true;\n    }\n    return objectAssign(seq(node.isAsync ? seq(this.t('async'), this.sep(Sep.BEFORE_ARROW_ASYNC_PARAMS)) : empty(), params, this.sep(Sep.BEFORE_ARROW), this.t('=>'), this.sep(Sep.AFTER_ARROW), this.p(node.body, Precedence.Assignment, body)), {\n      containsIn\n    });\n  }\n  reduceGetter(node, {\n    name,\n    body\n  }) {\n    return seq(this.t('get'), this.sep(Sep.AFTER_GET), name, this.sep(Sep.BEFORE_GET_PARAMS), this.paren(empty(), null, null, Sep.GETTER_PARAMS), this.sep(Sep.BEFORE_GET_BODY), this.brace(body, node, Sep.GET_BRACE_INTIAL, Sep.GET_BRACE_FINAL, Sep.GET_BRACE_EMPTY));\n  }\n  reduceIdentifierExpression(node) {\n    let a = this.t(node.name);\n    if (node.name === 'let') {\n      a.startsWithLet = true;\n    }\n    return a;\n  }\n  reduceIfStatement(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    if (alternate && consequent.endsWithMissingElse) {\n      consequent = this.brace(consequent, node, Sep.MISSING_ELSE_INTIIAL, Sep.MISSING_ELSE_FINAL, Sep.MISSING_ELSE_EMPTY);\n    }\n    return objectAssign(seq(this.t('if'), this.sep(Sep.AFTER_IF), this.paren(test, Sep.IF_PAREN_BEFORE, Sep.IF_PAREN_AFTER), this.sep(Sep.AFTER_IF_TEST), consequent, alternate ? seq(this.sep(Sep.BEFORE_ELSE), this.t('else'), this.sep(Sep.AFTER_ELSE), alternate) : empty(), this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true\n    });\n  }\n  reduceImport(node, {\n    defaultBinding,\n    namedImports\n  }) {\n    let bindings = [];\n    if (defaultBinding != null) {\n      bindings.push(defaultBinding);\n    }\n    if (namedImports.length > 0) {\n      bindings.push(this.brace(this.commaSep(namedImports, Sep.NAMED_IMPORT_BEFORE_COMMA, Sep.NAMED_IMPORT_AFTER_COMMA), node, Sep.IMPORT_BRACE_INTIAL, Sep.IMPORT_BRACE_FINAL, Sep.IMPORT_BRACE_EMPTY));\n    }\n    if (bindings.length === 0) {\n      return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_MODULE), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n    }\n    return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_BINDINGS), this.commaSep(bindings, Sep.IMPORT_BEFORE_COMMA, Sep.IMPORT_AFTER_COMMA), this.sep(Sep.AFTER_IMPORT_BINDINGS), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceImportNamespace(node, {\n    defaultBinding,\n    namespaceBinding\n  }) {\n    return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_NAMESPACE), defaultBinding == null ? empty() : seq(defaultBinding, this.sep(Sep.IMPORT_BEFORE_COMMA), this.t(','), this.sep(Sep.IMPORT_AFTER_COMMA)), this.sep(Sep.BEFORE_IMPORT_STAR), this.t('*'), this.sep(Sep.AFTER_IMPORT_STAR), this.t('as'), this.sep(Sep.AFTER_IMPORT_AS), namespaceBinding, this.sep(Sep.AFTER_NAMESPACE_BINDING), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceImportSpecifier(node, {\n    binding\n  }) {\n    if (node.name == null) return binding;\n    return seq(this.t(node.name), this.sep(Sep.BEFORE_IMPORT_AS), this.t('as'), this.sep(Sep.AFTER_IMPORT_AS), binding);\n  }\n  reduceExportAllFrom(node) {\n    return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_STAR), this.t('*'), this.sep(Sep.AFTER_EXPORT_STAR), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceExportFrom(node, {\n    namedExports\n  }) {\n    return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_BINDINGS), this.brace(this.commaSep(namedExports, Sep.EXPORTS_BEFORE_COMMA, Sep.EXPORTS_AFTER_COMMA), node, Sep.EXPORT_BRACE_INITIAL, Sep.EXPORT_BRACE_FINAL, Sep.EXPORT_BRACE_EMPTY), this.sep(Sep.AFTER_EXPORT_FROM_BINDINGS), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceExportLocals(node, {\n    namedExports\n  }) {\n    return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_BINDINGS), this.brace(this.commaSep(namedExports, Sep.EXPORTS_BEFORE_COMMA, Sep.EXPORTS_AFTER_COMMA), node, Sep.EXPORT_BRACE_INITIAL, Sep.EXPORT_BRACE_FINAL, Sep.EXPORT_BRACE_EMPTY), this.sep(Sep.AFTER_EXPORT_LOCAL_BINDINGS), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceExport(node, {\n    declaration\n  }) {\n    switch (node.declaration.type) {\n      case 'FunctionDeclaration':\n      case 'ClassDeclaration':\n        break;\n      default:\n        declaration = seq(declaration, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n    }\n    return seq(this.t('export'), this.sep(Sep.AFTER_EXPORT), declaration);\n  }\n  reduceExportDefault(node, {\n    body\n  }) {\n    body = body.startsWithFunctionOrClass ? this.paren(body, Sep.EXPORT_PAREN_BEFORE, Sep.EXPORT_PAREN_AFTER) : body;\n    switch (node.body.type) {\n      case 'FunctionDeclaration':\n      case 'ClassDeclaration':\n        return seq(this.t('export'), this.sep(Sep.EXPORT_DEFAULT), this.t('default'), this.sep(Sep.AFTER_EXPORT_DEFAULT), body);\n      default:\n        return seq(this.t('export'), this.sep(Sep.EXPORT_DEFAULT), this.t('default'), this.sep(Sep.AFTER_EXPORT_DEFAULT), this.p(node.body, Precedence.Assignment, body), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n    }\n  }\n  reduceExportFromSpecifier(node) {\n    if (node.exportedName == null) return this.t(node.name);\n    return seq(this.t(node.name), this.sep(Sep.BEFORE_EXPORT_AS), this.t('as'), this.sep(Sep.AFTER_EXPORT_AS), this.t(node.exportedName));\n  }\n  reduceExportLocalSpecifier(node, {\n    name\n  }) {\n    if (node.exportedName == null) return name;\n    return seq(name, this.sep(Sep.BEFORE_EXPORT_AS), this.t('as'), this.sep(Sep.AFTER_EXPORT_AS), this.t(node.exportedName));\n  }\n  reduceLabeledStatement(node, {\n    body\n  }) {\n    return objectAssign(seq(this.t(node.label), this.sep(Sep.BEFORE_LABEL_COLON), this.t(':'), this.sep(Sep.AFTER_LABEL_COLON), body), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n  reduceLiteralBooleanExpression(node) {\n    return this.t(node.value.toString());\n  }\n  reduceLiteralNullExpression( /* node */\n  ) {\n    return this.t('null');\n  }\n  reduceLiteralInfinityExpression( /* node */\n  ) {\n    return this.t('2e308');\n  }\n  reduceLiteralNumericExpression(node) {\n    return new NumberCodeRep(node.value);\n  }\n  reduceLiteralRegExpExpression(node) {\n    return this.t(`/${node.pattern}/${node.global ? 'g' : ''}${node.ignoreCase ? 'i' : ''}${node.multiLine ? 'm' : ''}${node.dotAll ? 's' : ''}${node.unicode ? 'u' : ''}${node.sticky ? 'y' : ''}`, true);\n  }\n  reduceLiteralStringExpression(node) {\n    return this.t(escapeStringLiteral(node.value));\n  }\n  reduceMethod(node, {\n    name,\n    params,\n    body\n  }) {\n    return seq(node.isAsync ? seq(this.t('async'), this.sep(Sep.AFTER_METHOD_ASYNC)) : empty(), node.isGenerator ? seq(this.t('*'), this.sep(Sep.AFTER_METHOD_GENERATOR_STAR)) : empty(), name, this.sep(Sep.AFTER_METHOD_NAME), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_METHOD_BODY), this.brace(body, node, Sep.METHOD_BRACE_INTIAL, Sep.METHOD_BRACE_FINAL, Sep.METHOD_BRACE_EMPTY));\n  }\n  reduceModule(node, {\n    directives,\n    items\n  }) {\n    if (items.length) {\n      items[0] = this.parenToAvoidBeingDirective(node.items[0], items[0]);\n    }\n    return seq(...directives, directives.length ? this.sep(Sep.AFTER_MODULE_DIRECTIVES) : empty(), ...items);\n  }\n  reduceNewExpression(node, {\n    callee,\n    arguments: args\n  }) {\n    const parenthizedArgs = args.map((a, i) => this.p(node.arguments[i], Precedence.Assignment, a));\n    let calleeRep = getPrecedence(node.callee) === Precedence.Call ? this.paren(callee, Sep.NEW_CALLEE_PAREN_BEFORE, Sep.NEW_CALLEE_PAREN_AFTER) : this.p(node.callee, getPrecedence(node), callee);\n    return seq(this.t('new'), this.sep(Sep.AFTER_NEW), calleeRep, args.length === 0 ? this.sep(Sep.EMPTY_NEW_CALL) : seq(this.sep(Sep.BEFORE_NEW_ARGS), this.paren(this.commaSep(parenthizedArgs, Sep.ARGS_BEFORE_COMMA, Sep.ARGS_AFTER_COMMA), Sep.NEW_PAREN_BEFORE, Sep.NEW_PAREN_AFTER, Sep.NEW_PAREN_EMPTY)));\n  }\n  reduceNewTargetExpression() {\n    return seq(this.t('new'), this.sep(Sep.NEW_TARGET_BEFORE_DOT), this.t('.'), this.sep(Sep.NEW_TARGET_AFTER_DOT), this.t('target'));\n  }\n  reduceObjectExpression(node, {\n    properties\n  }) {\n    let state = this.brace(this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA), node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);\n    state.startsWithCurly = true;\n    return state;\n  }\n  reduceUpdateExpression(node, {\n    operand\n  }) {\n    if (node.isPrefix) {\n      return this.reduceUnaryExpression(...arguments);\n    }\n    return objectAssign(seq(this.p(node.operand, Precedence.New, operand), this.sep(Sep.BEFORE_POSTFIX(node.operator)), this.t(node.operator)), {\n      startsWithCurly: operand.startsWithCurly,\n      startsWithLetSquareBracket: operand.startsWithLetSquareBracket,\n      startsWithFunctionOrClass: operand.startsWithFunctionOrClass\n    });\n  }\n  reduceUnaryExpression(node, {\n    operand\n  }) {\n    return seq(this.t(node.operator), this.sep(Sep.UNARY(node.operator)), this.p(node.operand, getPrecedence(node), operand));\n  }\n  reduceReturnStatement(node, {\n    expression\n  }) {\n    return seq(this.t('return'), expression ? seq(this.sep(Sep.RETURN), expression) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceScript(node, {\n    directives,\n    statements\n  }) {\n    if (statements.length) {\n      statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);\n    }\n    return seq(...directives, directives.length ? this.sep(Sep.AFTER_SCRIPT_DIRECTIVES) : empty(), ...statements);\n  }\n  reduceSetter(node, {\n    name,\n    param,\n    body\n  }) {\n    return seq(this.t('set'), this.sep(Sep.AFTER_SET), name, this.sep(Sep.BEFORE_SET_PARAMS), this.paren(param, Sep.SETTER_PARAM_BEFORE, Sep.SETTER_PARAM_AFTER), this.sep(Sep.BEFORE_SET_BODY), this.brace(body, node, Sep.SET_BRACE_INTIIAL, Sep.SET_BRACE_FINAL, Sep.SET_BRACE_EMPTY));\n  }\n  reduceShorthandProperty(node, {\n    name\n  }) {\n    return name;\n  }\n  reduceStaticMemberAssignmentTarget(node, {\n    object\n  }) {\n    const state = seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT), this.t('.'), this.sep(Sep.AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT), this.t(node.property));\n    state.startsWithLet = object.startsWithLet;\n    state.startsWithCurly = object.startsWithCurly;\n    state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;\n    state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;\n    return state;\n  }\n  reduceStaticMemberExpression(node, {\n    object\n  }) {\n    const state = seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.BEFORE_STATIC_MEMBER_DOT), this.t('.'), this.sep(Sep.AFTER_STATIC_MEMBER_DOT), this.t(node.property));\n    state.startsWithLet = object.startsWithLet;\n    state.startsWithCurly = object.startsWithCurly;\n    state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;\n    state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;\n    return state;\n  }\n  reduceStaticPropertyName(node) {\n    if (keyword.isIdentifierNameES6(node.value)) {\n      return this.t(node.value);\n    }\n    let n = parseFloat(node.value);\n    if (n >= 0 && n.toString() === node.value) {\n      return new NumberCodeRep(n);\n    }\n    return this.t(escapeStringLiteral(node.value));\n  }\n  reduceSuper() {\n    return this.t('super');\n  }\n  reduceSwitchCase(node, {\n    test,\n    consequent\n  }) {\n    return seq(this.t('case'), this.sep(Sep.BEFORE_CASE_TEST), test, this.sep(Sep.AFTER_CASE_TEST), this.t(':'), this.sep(Sep.BEFORE_CASE_BODY), seq(...consequent), this.sep(Sep.AFTER_CASE_BODY));\n  }\n  reduceSwitchDefault(node, {\n    consequent\n  }) {\n    return seq(this.t('default'), this.sep(Sep.DEFAULT), this.t(':'), this.sep(Sep.BEFORE_CASE_BODY), seq(...consequent), this.sep(Sep.AFTER_DEFAULT_BODY));\n  }\n  reduceSwitchStatement(node, {\n    discriminant,\n    cases\n  }) {\n    return seq(this.t('switch'), this.sep(Sep.BEFORE_SWITCH_DISCRIM), this.paren(discriminant, Sep.SWITCH_DISCRIM_PAREN_BEFORE, Sep.SWITCH_DISCRIM_PAREN_AFTER), this.sep(Sep.BEFORE_SWITCH_BODY), this.brace(seq(...cases), node, Sep.SWITCH_BRACE_INTIAL, Sep.SWITCH_BRACE_FINAL, Sep.SWITCH_BRACE_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceSwitchStatementWithDefault(node, {\n    discriminant,\n    preDefaultCases,\n    defaultCase,\n    postDefaultCases\n  }) {\n    return seq(this.t('switch'), this.sep(Sep.BEFORE_SWITCH_DISCRIM), this.paren(discriminant, Sep.SWITCH_DISCRIM_PAREN_BEFORE, Sep.SWITCH_DISCRIM_PAREN_AFTER), this.sep(Sep.BEFORE_SWITCH_BODY), this.brace(seq(...preDefaultCases, defaultCase, ...postDefaultCases), node, Sep.SWITCH_BRACE_INTIAL, Sep.SWITCH_BRACE_FINAL, Sep.SWITCH_BRACE_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceTemplateExpression(node, {\n    tag,\n    elements\n  }) {\n    let state = node.tag == null ? empty() : seq(this.p(node.tag, getPrecedence(node), tag), this.sep(Sep.TEMPLATE_TAG));\n    state = seq(state, this.t('`'));\n    for (let i = 0, l = node.elements.length; i < l; ++i) {\n      if (node.elements[i].type === 'TemplateElement') {\n        let d = '';\n        if (i > 0) d += '}';\n        d += node.elements[i].rawValue;\n        if (i < l - 1) d += '${';\n        state = seq(state, this.t(d));\n      } else {\n        state = seq(state, this.sep(Sep.BEFORE_TEMPLATE_EXPRESSION), elements[i], this.sep(Sep.AFTER_TEMPLATE_EXPRESSION));\n      }\n    }\n    state = seq(state, this.t('`'));\n    if (node.tag != null) {\n      state.startsWithCurly = tag.startsWithCurly;\n      state.startsWithLet = tag.startsWithLet;\n      state.startsWithLetSquareBracket = tag.startsWithLetSquareBracket;\n      state.startsWithFunctionOrClass = tag.startsWithFunctionOrClass;\n    }\n    return state;\n  }\n  reduceTemplateElement(node) {\n    return this.t(node.rawValue);\n  }\n  reduceThisExpression( /* node */\n  ) {\n    return this.t('this');\n  }\n  reduceThrowStatement(node, {\n    expression\n  }) {\n    return seq(this.t('throw'), this.sep(Sep.THROW), expression, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceTryCatchStatement(node, {\n    body,\n    catchClause\n  }) {\n    return seq(this.t('try'), this.sep(Sep.AFTER_TRY), body, this.sep(Sep.BEFORE_CATCH), catchClause, this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceTryFinallyStatement(node, {\n    body,\n    catchClause,\n    finalizer\n  }) {\n    return seq(this.t('try'), this.sep(Sep.AFTER_TRY), body, catchClause ? seq(this.sep(Sep.BEFORE_CATCH), catchClause) : empty(), this.sep(Sep.BEFORE_FINALLY), this.t('finally'), this.sep(Sep.AFTER_FINALLY), finalizer, this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceYieldExpression(node, {\n    expression\n  }) {\n    if (node.expression == null) return this.t('yield');\n    return objectAssign(seq(this.t('yield'), this.sep(Sep.YIELD), this.p(node.expression, getPrecedence(node), expression)), {\n      containsIn: expression.containsIn\n    });\n  }\n  reduceYieldGeneratorExpression(node, {\n    expression\n  }) {\n    return objectAssign(seq(this.t('yield'), this.sep(Sep.BEFORE_YIELD_STAR), this.t('*'), this.sep(Sep.AFTER_YIELD_STAR), this.p(node.expression, getPrecedence(node), expression)), {\n      containsIn: expression.containsIn\n    });\n  }\n  reduceDirective(node) {\n    let delim = node.rawValue.match(/(^|[^\\\\])(\\\\\\\\)*\"/) ? '\\'' : '\"';\n    return seq(this.t(delim + node.rawValue + delim), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceVariableDeclaration(node, {\n    declarators\n  }) {\n    return seq(this.t(node.kind), this.sep(Sep.VARIABLE_DECLARATION), this.commaSep(declarators, Sep.DECLARATORS_BEFORE_COMMA, Sep.DECLARATORS_AFTER_COMMA));\n  }\n  reduceVariableDeclarationStatement(node, {\n    declaration\n  }) {\n    return seq(declaration, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceVariableDeclarator(node, {\n    binding,\n    init\n  }) {\n    let containsIn = init && init.containsIn && !init.containsGroup;\n    if (init) {\n      if (init.containsGroup) {\n        init = this.paren(init, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      } else {\n        init = markContainsIn(init);\n      }\n    }\n    return objectAssign(init == null ? binding : seq(binding, this.sep(Sep.BEFORE_INIT_EQUALS), this.t('='), this.sep(Sep.AFTER_INIT_EQUALS), init), {\n      containsIn\n    });\n  }\n  reduceWhileStatement(node, {\n    test,\n    body\n  }) {\n    return objectAssign(seq(this.t('while'), this.sep(Sep.AFTER_WHILE), this.paren(test, Sep.WHILE_TEST_PAREN_BEFORE, Sep.WHILE_TEST_PAREN_AFTER), this.sep(Sep.BEFORE_WHILE_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n  reduceWithStatement(node, {\n    object,\n    body\n  }) {\n    return objectAssign(seq(this.t('with'), this.sep(Sep.AFTER_WITH), this.paren(object, Sep.WITH_PAREN_BEFORE, Sep.WITH_PAREN_AFTER), this.sep(Sep.BEFORE_WITH_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: body.endsWithMissingElse\n    });\n  }\n}\nfunction withoutTrailingLinebreak(state) {\n  if (state && state instanceof Seq) {\n    let lastChild = state.children[state.children.length - 1];\n    /* istanbul ignore next */\n    while (lastChild instanceof Empty) {\n      state.children.pop();\n      lastChild = state.children[state.children.length - 1];\n    }\n    /* istanbul ignore else */\n    if (lastChild instanceof Seq) {\n      withoutTrailingLinebreak(lastChild);\n    } else if (lastChild instanceof Linebreak) {\n      state.children.pop();\n    }\n  }\n  return state;\n}\nfunction indent(rep, includingFinal) {\n  let finalLinebreak;\n  function indentNode(node) {\n    if (node instanceof Linebreak) {\n      finalLinebreak = node;\n      ++node.indentation;\n    }\n  }\n  rep.forEach(indentNode);\n  if (!includingFinal) {\n    --finalLinebreak.indentation;\n  }\n  return rep;\n}\nclass FormattedCodeGen extends ExtensibleCodeGen {\n  parenToAvoidBeingDirective(element, original) {\n    if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {\n      return seq(this.paren(original.children[0], Sep.PAREN_AVOIDING_DIRECTIVE_BEFORE, Sep.PAREN_AVOIDING_DIRECTIVE_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(element)));\n    }\n    return original;\n  }\n  brace(rep, node) {\n    if (isEmpty(rep)) {\n      return this.t('{}');\n    }\n    switch (node.type) {\n      case 'ObjectAssignmentTarget':\n      case 'ObjectBinding':\n      case 'Import':\n      case 'ExportFrom':\n      case 'ExportLocals':\n      case 'ObjectExpression':\n        return new Brace(rep);\n    }\n    rep = seq(new Linebreak(), rep);\n    indent(rep, false);\n    return new Brace(rep);\n  }\n  reduceDoWhileStatement(node, {\n    body,\n    test\n  }) {\n    return seq(this.t('do'), this.sep(Sep.AFTER_DO), withoutTrailingLinebreak(body), this.sep(Sep.BEFORE_DOWHILE_WHILE), this.t('while'), this.sep(Sep.AFTER_DOWHILE_WHILE), this.paren(test, Sep.DO_WHILE_TEST_PAREN_BEFORE, Sep.DO_WHILE_TEST_PAREN_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n  reduceIfStatement(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    if (alternate && consequent.endsWithMissingElse) {\n      consequent = this.brace(consequent, node);\n    }\n    return objectAssign(seq(this.t('if'), this.sep(Sep.AFTER_IF), this.paren(test, Sep.IF_PAREN_BEFORE, Sep.IF_PAREN_AFTER), this.sep(Sep.AFTER_IF_TEST), withoutTrailingLinebreak(consequent), alternate ? seq(this.sep(Sep.BEFORE_ELSE), this.t('else'), this.sep(Sep.AFTER_ELSE), withoutTrailingLinebreak(alternate)) : empty(), this.sep(Sep.AFTER_STATEMENT(node))), {\n      endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true\n    });\n  }\n  reduceSwitchCase(node, {\n    test,\n    consequent\n  }) {\n    consequent = indent(withoutTrailingLinebreak(seq(this.sep(Sep.BEFORE_CASE_BODY), ...consequent)), true);\n    return seq(this.t('case'), this.sep(Sep.BEFORE_CASE_TEST), test, this.sep(Sep.AFTER_CASE_TEST), this.t(':'), consequent, this.sep(Sep.AFTER_CASE_BODY));\n  }\n  reduceSwitchDefault(node, {\n    consequent\n  }) {\n    consequent = indent(withoutTrailingLinebreak(seq(this.sep(Sep.BEFORE_CASE_BODY), ...consequent)), true);\n    return seq(this.t('default'), this.sep(Sep.DEFAULT), this.t(':'), consequent, this.sep(Sep.AFTER_DEFAULT_BODY));\n  }\n  sep(separator) {\n    switch (separator.type) {\n      case 'AWAIT':\n      case 'AFTER_FORAWAIT_AWAIT':\n      case 'ARRAY_AFTER_COMMA':\n      case 'OBJECT_AFTER_COMMA':\n      case 'ARGS_AFTER_COMMA':\n      case 'PARAMETER_AFTER_COMMA':\n      case 'DECLARATORS_AFTER_COMMA':\n      case 'NAMED_IMPORT_AFTER_COMMA':\n      case 'IMPORT_AFTER_COMMA':\n      case 'BEFORE_DEFAULT_EQUALS':\n      case 'AFTER_DEFAULT_EQUALS':\n      case 'AFTER_PROP':\n      case 'BEFORE_JUMP_LABEL':\n      case 'BEFORE_CATCH_BINDING':\n      case 'AFTER_CATCH_BINDING':\n      case 'BEFORE_CLASS_NAME':\n      case 'BEFORE_EXTENDS':\n      case 'AFTER_EXTENDS':\n      case 'BEFORE_CLASS_DECLARATION_ELEMENTS':\n      case 'BEFORE_CLASS_EXPRESSION_ELEMENTS':\n      case 'AFTER_STATIC':\n      case 'BEFORE_TERNARY_QUESTION':\n      case 'AFTER_TERNARY_QUESTION':\n      case 'BEFORE_TERNARY_COLON':\n      case 'AFTER_TERNARY_COLON':\n      case 'AFTER_DO':\n      case 'BEFORE_DOWHILE_WHILE':\n      case 'AFTER_DOWHILE_WHILE':\n      case 'AFTER_FORIN_FOR':\n      case 'BEFORE_FORIN_IN':\n      case 'BEFORE_FORIN_BODY':\n      case 'BEFORE_FOROF_OF':\n      case 'AFTER_FOROF_FOR':\n      case 'BEFORE_FOROF_BODY':\n      case 'AFTER_FOR_FOR':\n      case 'BEFORE_FOR_TEST':\n      case 'BEFORE_FOR_UPDATE':\n      case 'BEFORE_FOR_BODY':\n      case 'BEFORE_FUNCTION_DECLARATION_BODY':\n      case 'BEFORE_FUNCTION_EXPRESSION_BODY':\n      case 'BEFORE_ARROW':\n      case 'AFTER_ARROW':\n      case 'BEFORE_ARROW_ASYNC_PARAMS':\n      case 'AFTER_GET':\n      case 'BEFORE_GET_BODY':\n      case 'AFTER_IF':\n      case 'AFTER_IF_TEST':\n      case 'BEFORE_ELSE':\n      case 'AFTER_ELSE':\n      case 'BEFORE_IMPORT_BINDINGS':\n      case 'BEFORE_IMPORT_MODULE':\n      case 'AFTER_IMPORT_BINDINGS':\n      case 'AFTER_FROM':\n      case 'BEFORE_IMPORT_NAMESPACE':\n      case 'BEFORE_IMPORT_STAR':\n      case 'AFTER_IMPORT_STAR':\n      case 'AFTER_NAMESPACE_BINDING':\n      case 'BEFORE_IMPORT_AS':\n      case 'AFTER_IMPORT_AS':\n      case 'EXPORTS_AFTER_COMMA':\n      case 'BEFORE_EXPORT_STAR':\n      case 'AFTER_EXPORT_STAR':\n      case 'BEFORE_EXPORT_BINDINGS':\n      case 'AFTER_EXPORT_FROM_BINDINGS':\n      case 'AFTER_EXPORT':\n      case 'AFTER_EXPORT_DEFAULT':\n      case 'BEFORE_EXPORT_AS':\n      case 'AFTER_EXPORT_AS':\n      case 'AFTER_LABEL_COLON':\n      case 'AFTER_METHOD_ASYNC':\n      case 'BEFORE_METHOD_BODY':\n      case 'AFTER_NEW':\n      case 'RETURN':\n      case 'AFTER_SET':\n      case 'BEFORE_SET_BODY':\n      case 'BEFORE_SET_PARAMS':\n      case 'BEFORE_CASE_TEST':\n      case 'BEFORE_SWITCH_DISCRIM':\n      case 'BEFORE_SWITCH_BODY':\n      case 'THROW':\n      case 'AFTER_TRY':\n      case 'BEFORE_CATCH':\n      case 'BEFORE_FINALLY':\n      case 'AFTER_FINALLY':\n      case 'VARIABLE_DECLARATION':\n      case 'YIELD':\n      case 'AFTER_YIELD_STAR':\n      case 'BEFORE_INIT_EQUALS':\n      case 'AFTER_INIT_EQUALS':\n      case 'AFTER_WHILE':\n      case 'BEFORE_WHILE_BODY':\n      case 'AFTER_WITH':\n      case 'BEFORE_WITH_BODY':\n      case 'BEFORE_FUNCTION_NAME':\n      case 'AFTER_BINOP':\n      case 'BEFORE_ASSIGN_OP':\n      case 'AFTER_ASSIGN_OP':\n        return this.t(' ');\n      case 'AFTER_STATEMENT':\n        switch (separator.node.type) {\n          case 'ForInStatement':\n          case 'ForOfStatement':\n          case 'ForStatement':\n          case 'WhileStatement':\n          case 'WithStatement':\n            return empty();\n          // because those already end with an AFTER_STATEMENT\n          default:\n            return new Linebreak();\n        }\n      case 'AFTER_CLASS_ELEMENT':\n      case 'BEFORE_CASE_BODY':\n      case 'AFTER_CASE_BODY':\n      case 'AFTER_DEFAULT_BODY':\n        return new Linebreak();\n      case 'BEFORE_BINOP':\n        return separator.op === ',' ? empty() : this.t(' ');\n      case 'UNARY':\n        return separator.op === 'delete' || separator.op === 'void' || separator.op === 'typeof' ? this.t(' ') : empty();\n      default:\n        return empty();\n    }\n  }\n}\nmodule.exports = {\n  Sep,\n  ExtensibleCodeGen,\n  FormattedCodeGen\n};","map":{"version":3,"names":["objectAssign","require","keyword","Precedence","getPrecedence","escapeStringLiteral","CodeRep","Empty","Token","NumberCodeRep","Paren","Bracket","Brace","NoIn","ContainsIn","Seq","SemiOp","INDENT","Linebreak","constructor","indentation","emit","ts","put","i","empty","noIn","rep","markContainsIn","state","containsIn","seq","reps","isEmpty","codeRep","children","every","Sep","separatorNames","length","type","BEFORE_ASSIGN_OP","op","AFTER_ASSIGN_OP","BEFORE_BINOP","AFTER_BINOP","BEFORE_POSTFIX","UNARY","AFTER_STATEMENT","node","BEFORE_FUNCTION_NAME","ExtensibleCodeGen","parenToAvoidBeingDirective","element","original","expression","paren","PAREN_AVOIDING_DIRECTIVE_BEFORE","PAREN_AVOIDING_DIRECTIVE_AFTER","semiOp","t","token","isRegExp","p","precedence","a","PRECEDENCE_BEFORE","PRECEDENCE_AFTER","getAssignmentExpr","containsGroup","EXPRESSION_PAREN_BEFORE","EXPRESSION_PAREN_AFTER","first","last","emptySep","sep","brace","bracket","commaSep","pieces","before","after","map","reduceArrayExpression","elements","ARRAY_EMPTY","content","e","ARRAY_BEFORE_COMMA","ARRAY_AFTER_COMMA","ARRAY_INITIAL","ARRAY_FINAL","reduceAwaitExpression","AWAIT","reduceSpreadElement","SPREAD","Assignment","reduceSpreadProperty","reduceAssignmentExpression","binding","leftCode","rightCode","startsWithCurly","startsWithLetSquareBracket","startsWithFunctionOrClass","reduceAssignmentTargetIdentifier","name","startsWithLet","reduceAssignmentTargetWithDefault","init","BEFORE_DEFAULT_EQUALS","AFTER_DEFAULT_EQUALS","reduceCompoundAssignmentExpression","operator","reduceBinaryExpression","left","right","leftContainsIn","isRightAssociative","rightContainsIn","reduceBindingWithDefault","reduceBindingIdentifier","reduceArrayAssignmentTarget","rest","REST","concat","reduceArrayBinding","reduceObjectAssignmentTarget","properties","OBJECT_BEFORE_COMMA","OBJECT_AFTER_COMMA","OBJECT_BRACE_INITIAL","OBJECT_BRACE_FINAL","OBJECT_EMPTY","reduceObjectBinding","reduceAssignmentTargetPropertyIdentifier","reduceAssignmentTargetPropertyProperty","BEFORE_PROP","AFTER_PROP","reduceBindingPropertyIdentifier","reduceBindingPropertyProperty","reduceBlock","statements","BLOCK_BRACE_INITIAL","BLOCK_BRACE_FINAL","BLOCK_EMPTY","reduceBlockStatement","block","reduceBreakStatement","label","BEFORE_JUMP_LABEL","reduceCallExpression","callee","arguments","args","parenthizedArgs","CALL","ARGS_BEFORE_COMMA","ARGS_AFTER_COMMA","CALL_PAREN_BEFORE","CALL_PAREN_AFTER","CALL_PAREN_EMPTY","reduceCatchClause","body","BEFORE_CATCH_BINDING","CATCH_PAREN_BEFORE","CATCH_PAREN_AFTER","AFTER_CATCH_BINDING","reduceClassDeclaration","super","_super","BEFORE_CLASS_NAME","BEFORE_EXTENDS","AFTER_EXTENDS","New","BEFORE_CLASS_DECLARATION_ELEMENTS","CLASS_BRACE_INITIAL","CLASS_BRACE_FINAL","CLASS_EMPTY","reduceClassExpression","BEFORE_CLASS_EXPRESSION_ELEMENTS","CLASS_EXPRESSION_BRACE_INITIAL","CLASS_EXPRESSION_BRACE_FINAL","CLASS_EXPRESSION_BRACE_EMPTY","reduceClassElement","method","BEFORE_CLASS_ELEMENT","AFTER_CLASS_ELEMENT","isStatic","AFTER_STATIC","reduceComputedMemberAssignmentTarget","object","COMPUTED_MEMBER_ASSIGNMENT_TARGET","COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL","COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL","reduceComputedMemberExpression","COMPUTED_MEMBER_EXPRESSION","COMPUTED_MEMBER_BRACKET_INTIAL","COMPUTED_MEMBER_BRACKET_FINAL","reduceComputedPropertyName","COMPUTED_PROPERTY_BRACKET_INTIAL","COMPUTED_PROPERTY_BRACKET_FINAL","reduceConditionalExpression","test","consequent","alternate","LogicalOR","BEFORE_TERNARY_QUESTION","AFTER_TERNARY_QUESTION","BEFORE_TERNARY_COLON","AFTER_TERNARY_COLON","reduceContinueStatement","reduceDataProperty","reduceDebuggerStatement","reduceDoWhileStatement","AFTER_DO","BEFORE_DOWHILE_WHILE","AFTER_DOWHILE_WHILE","DO_WHILE_TEST_PAREN_BEFORE","DO_WHILE_TEST_PAREN_AFTER","reduceEmptyStatement","reduceExpressionStatement","needsParens","EXPRESSION_STATEMENT_PAREN_BEFORE","EXPRESSION_STATEMENT_PAREN_AFTER","reduceForInStatement","AFTER_FORIN_FOR","FOR_IN_LET_PAREN_BEFORE","FOR_IN_LET_PAREN_AFTER","BEFORE_FORIN_IN","FOR_IN_PAREN_BEFORE","FOR_IN_PAREN_AFTER","BEFORE_FORIN_BODY","endsWithMissingElse","reduceForOfStatement","AFTER_FOROF_FOR","FOR_OF_LET_PAREN_BEFORE","FOR_OF_LET_PAREN_AFTER","BEFORE_FOROF_OF","FOR_OF_PAREN_BEFORE","FOR_OF_PAREN_AFTER","BEFORE_FOROF_BODY","reduceForStatement","update","FOR_LET_PAREN_BEFORE","FOR_LET_PAREN_AFTER","AFTER_FOR_FOR","BEFORE_FOR_INIT","AFTER_FOR_INIT","EMPTY_FOR_INIT","BEFORE_FOR_TEST","AFTER_FOR_TEST","EMPTY_FOR_TEST","BEFORE_FOR_UPDATE","AFTER_FOR_UPDATE","EMPTY_FOR_UPDATE","BEFORE_FOR_BODY","reduceForAwaitStatement","AFTER_FORAWAIT_AWAIT","reduceFunctionBody","directives","AFTER_FUNCTION_DIRECTIVES","reduceFunctionDeclaration","params","isAsync","isGenerator","BEFORE_GENERATOR_STAR","AFTER_GENERATOR_STAR","BEFORE_FUNCTION_PARAMS","PARAMETERS_PAREN_BEFORE","PARAMETERS_PAREN_AFTER","PARAMETERS_PAREN_EMPTY","BEFORE_FUNCTION_DECLARATION_BODY","FUNCTION_BRACE_INITIAL","FUNCTION_BRACE_FINAL","FUNCTION_EMPTY","reduceFunctionExpression","BEFORE_FUNCTION_EXPRESSION_BODY","FUNCTION_EXPRESSION_BRACE_INITIAL","FUNCTION_EXPRESSION_BRACE_FINAL","FUNCTION_EXPRESSION_EMPTY","reduceFormalParameters","items","PARAMETER_BEFORE_COMMA","PARAMETER_AFTER_COMMA","reduceArrowExpression","ARROW_PARAMETERS_PAREN_BEFORE","ARROW_PARAMETERS_PAREN_AFTER","ARROW_PARAMETERS_PAREN_EMPTY","ARROW_BRACE_INITIAL","ARROW_BRACE_FINAL","ARROW_BRACE_EMPTY","ARROW_BODY_PAREN_BEFORE","ARROW_BODY_PAREN_AFTER","BEFORE_ARROW_ASYNC_PARAMS","BEFORE_ARROW","AFTER_ARROW","reduceGetter","AFTER_GET","BEFORE_GET_PARAMS","GETTER_PARAMS","BEFORE_GET_BODY","GET_BRACE_INTIAL","GET_BRACE_FINAL","GET_BRACE_EMPTY","reduceIdentifierExpression","reduceIfStatement","MISSING_ELSE_INTIIAL","MISSING_ELSE_FINAL","MISSING_ELSE_EMPTY","AFTER_IF","IF_PAREN_BEFORE","IF_PAREN_AFTER","AFTER_IF_TEST","BEFORE_ELSE","AFTER_ELSE","reduceImport","defaultBinding","namedImports","bindings","push","NAMED_IMPORT_BEFORE_COMMA","NAMED_IMPORT_AFTER_COMMA","IMPORT_BRACE_INTIAL","IMPORT_BRACE_FINAL","IMPORT_BRACE_EMPTY","BEFORE_IMPORT_MODULE","moduleSpecifier","BEFORE_IMPORT_BINDINGS","IMPORT_BEFORE_COMMA","IMPORT_AFTER_COMMA","AFTER_IMPORT_BINDINGS","AFTER_FROM","reduceImportNamespace","namespaceBinding","BEFORE_IMPORT_NAMESPACE","BEFORE_IMPORT_STAR","AFTER_IMPORT_STAR","AFTER_IMPORT_AS","AFTER_NAMESPACE_BINDING","reduceImportSpecifier","BEFORE_IMPORT_AS","reduceExportAllFrom","BEFORE_EXPORT_STAR","AFTER_EXPORT_STAR","reduceExportFrom","namedExports","BEFORE_EXPORT_BINDINGS","EXPORTS_BEFORE_COMMA","EXPORTS_AFTER_COMMA","EXPORT_BRACE_INITIAL","EXPORT_BRACE_FINAL","EXPORT_BRACE_EMPTY","AFTER_EXPORT_FROM_BINDINGS","reduceExportLocals","AFTER_EXPORT_LOCAL_BINDINGS","reduceExport","declaration","AFTER_EXPORT","reduceExportDefault","EXPORT_PAREN_BEFORE","EXPORT_PAREN_AFTER","EXPORT_DEFAULT","AFTER_EXPORT_DEFAULT","reduceExportFromSpecifier","exportedName","BEFORE_EXPORT_AS","AFTER_EXPORT_AS","reduceExportLocalSpecifier","reduceLabeledStatement","BEFORE_LABEL_COLON","AFTER_LABEL_COLON","reduceLiteralBooleanExpression","value","toString","reduceLiteralNullExpression","reduceLiteralInfinityExpression","reduceLiteralNumericExpression","reduceLiteralRegExpExpression","pattern","global","ignoreCase","multiLine","dotAll","unicode","sticky","reduceLiteralStringExpression","reduceMethod","AFTER_METHOD_ASYNC","AFTER_METHOD_GENERATOR_STAR","AFTER_METHOD_NAME","BEFORE_METHOD_BODY","METHOD_BRACE_INTIAL","METHOD_BRACE_FINAL","METHOD_BRACE_EMPTY","reduceModule","AFTER_MODULE_DIRECTIVES","reduceNewExpression","calleeRep","Call","NEW_CALLEE_PAREN_BEFORE","NEW_CALLEE_PAREN_AFTER","AFTER_NEW","EMPTY_NEW_CALL","BEFORE_NEW_ARGS","NEW_PAREN_BEFORE","NEW_PAREN_AFTER","NEW_PAREN_EMPTY","reduceNewTargetExpression","NEW_TARGET_BEFORE_DOT","NEW_TARGET_AFTER_DOT","reduceObjectExpression","reduceUpdateExpression","operand","isPrefix","reduceUnaryExpression","reduceReturnStatement","RETURN","reduceScript","AFTER_SCRIPT_DIRECTIVES","reduceSetter","param","AFTER_SET","BEFORE_SET_PARAMS","SETTER_PARAM_BEFORE","SETTER_PARAM_AFTER","BEFORE_SET_BODY","SET_BRACE_INTIIAL","SET_BRACE_FINAL","SET_BRACE_EMPTY","reduceShorthandProperty","reduceStaticMemberAssignmentTarget","BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT","AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT","property","reduceStaticMemberExpression","BEFORE_STATIC_MEMBER_DOT","AFTER_STATIC_MEMBER_DOT","reduceStaticPropertyName","isIdentifierNameES6","n","parseFloat","reduceSuper","reduceSwitchCase","BEFORE_CASE_TEST","AFTER_CASE_TEST","BEFORE_CASE_BODY","AFTER_CASE_BODY","reduceSwitchDefault","DEFAULT","AFTER_DEFAULT_BODY","reduceSwitchStatement","discriminant","cases","BEFORE_SWITCH_DISCRIM","SWITCH_DISCRIM_PAREN_BEFORE","SWITCH_DISCRIM_PAREN_AFTER","BEFORE_SWITCH_BODY","SWITCH_BRACE_INTIAL","SWITCH_BRACE_FINAL","SWITCH_BRACE_EMPTY","reduceSwitchStatementWithDefault","preDefaultCases","defaultCase","postDefaultCases","reduceTemplateExpression","tag","TEMPLATE_TAG","l","d","rawValue","BEFORE_TEMPLATE_EXPRESSION","AFTER_TEMPLATE_EXPRESSION","reduceTemplateElement","reduceThisExpression","reduceThrowStatement","THROW","reduceTryCatchStatement","catchClause","AFTER_TRY","BEFORE_CATCH","reduceTryFinallyStatement","finalizer","BEFORE_FINALLY","AFTER_FINALLY","reduceYieldExpression","YIELD","reduceYieldGeneratorExpression","BEFORE_YIELD_STAR","AFTER_YIELD_STAR","reduceDirective","delim","match","reduceVariableDeclaration","declarators","kind","VARIABLE_DECLARATION","DECLARATORS_BEFORE_COMMA","DECLARATORS_AFTER_COMMA","reduceVariableDeclarationStatement","reduceVariableDeclarator","BEFORE_INIT_EQUALS","AFTER_INIT_EQUALS","reduceWhileStatement","AFTER_WHILE","WHILE_TEST_PAREN_BEFORE","WHILE_TEST_PAREN_AFTER","BEFORE_WHILE_BODY","reduceWithStatement","AFTER_WITH","WITH_PAREN_BEFORE","WITH_PAREN_AFTER","BEFORE_WITH_BODY","withoutTrailingLinebreak","lastChild","pop","indent","includingFinal","finalLinebreak","indentNode","forEach","FormattedCodeGen","separator","module","exports"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-codegen/src/formatted-codegen.js"],"sourcesContent":["const objectAssign = require('object-assign');\nconst { keyword } = require('esutils');\nconst { Precedence, getPrecedence, escapeStringLiteral, CodeRep, Empty, Token, NumberCodeRep, Paren, Bracket, Brace, NoIn, ContainsIn, Seq, SemiOp } = require('./coderep');\n\nconst INDENT = '  ';\nclass Linebreak extends CodeRep {\n  constructor() {\n    super();\n    this.indentation = 0;\n  }\n\n  emit(ts) {\n    ts.put('\\n');\n    for (let i = 0; i < this.indentation; ++i) {\n      ts.put(INDENT);\n    }\n  }\n}\n\nfunction empty() {\n  return new Empty();\n}\n\nfunction noIn(rep) {\n  return new NoIn(rep);\n}\n\nfunction markContainsIn(state) {\n  return state.containsIn ? new ContainsIn(state) : state;\n}\n\nfunction seq(...reps) {\n  return new Seq(reps);\n}\n\nfunction isEmpty(codeRep) {\n  return codeRep instanceof Empty || codeRep instanceof Linebreak || codeRep instanceof Seq && codeRep.children.every(isEmpty);\n}\n\nlet Sep = {};\nconst separatorNames = [\n  'ARRAY_EMPTY',\n  'ARRAY_BEFORE_COMMA',\n  'ARRAY_AFTER_COMMA',\n  'SPREAD',\n  'AWAIT',\n  'AFTER_FORAWAIT_AWAIT',\n  'BEFORE_DEFAULT_EQUALS',\n  'AFTER_DEFAULT_EQUALS',\n  'REST',\n  'OBJECT_BEFORE_COMMA',\n  'OBJECT_AFTER_COMMA',\n  'BEFORE_PROP',\n  'AFTER_PROP',\n  'BEFORE_JUMP_LABEL',\n  'ARGS_BEFORE_COMMA',\n  'ARGS_AFTER_COMMA',\n  'CALL',\n  'BEFORE_CATCH_BINDING',\n  'AFTER_CATCH_BINDING',\n  'BEFORE_CLASS_NAME',\n  'BEFORE_EXTENDS',\n  'AFTER_EXTENDS',\n  'BEFORE_CLASS_DECLARATION_ELEMENTS',\n  'BEFORE_CLASS_EXPRESSION_ELEMENTS',\n  'AFTER_STATIC',\n  'BEFORE_CLASS_ELEMENT',\n  'AFTER_CLASS_ELEMENT',\n  'BEFORE_TERNARY_QUESTION',\n  'AFTER_TERNARY_QUESTION',\n  'BEFORE_TERNARY_COLON',\n  'AFTER_TERNARY_COLON',\n  'COMPUTED_MEMBER_EXPRESSION',\n  'COMPUTED_MEMBER_ASSIGNMENT_TARGET',\n  'AFTER_DO',\n  'BEFORE_DOWHILE_WHILE',\n  'AFTER_DOWHILE_WHILE',\n  'AFTER_FORIN_FOR',\n  'BEFORE_FORIN_IN',\n  'AFTER_FORIN_FOR',\n  'BEFORE_FORIN_BODY',\n  'AFTER_FOROF_FOR',\n  'BEFORE_FOROF_OF',\n  'AFTER_FOROF_FOR',\n  'BEFORE_FOROF_BODY',\n  'AFTER_FOR_FOR',\n  'BEFORE_FOR_INIT',\n  'AFTER_FOR_INIT',\n  'EMPTY_FOR_INIT',\n  'BEFORE_FOR_TEST',\n  'AFTER_FOR_TEST',\n  'EMPTY_FOR_TEST',\n  'BEFORE_FOR_UPDATE',\n  'AFTER_FOR_UPDATE',\n  'EMPTY_FOR_UPDATE',\n  'BEFORE_FOR_BODY',\n  'BEFORE_GENERATOR_STAR',\n  'AFTER_GENERATOR_STAR',\n  'BEFORE_FUNCTION_PARAMS',\n  'BEFORE_FUNCTION_DECLARATION_BODY',\n  'BEFORE_FUNCTION_EXPRESSION_BODY',\n  'AFTER_FUNCTION_DIRECTIVES',\n  'BEFORE_ARROW',\n  'AFTER_ARROW',\n  'AFTER_GET',\n  'BEFORE_GET_PARAMS',\n  'BEFORE_GET_BODY',\n  'AFTER_IF',\n  'AFTER_IF_TEST',\n  'BEFORE_ELSE',\n  'AFTER_ELSE',\n  'PARAMETER_BEFORE_COMMA',\n  'PARAMETER_AFTER_COMMA',\n  'NAMED_IMPORT_BEFORE_COMMA',\n  'NAMED_IMPORT_AFTER_COMMA',\n  'IMPORT_BEFORE_COMMA',\n  'IMPORT_AFTER_COMMA',\n  'BEFORE_IMPORT_BINDINGS',\n  'BEFORE_IMPORT_MODULE',\n  'AFTER_IMPORT_BINDINGS',\n  'AFTER_FROM',\n  'BEFORE_IMPORT_NAMESPACE',\n  'BEFORE_IMPORT_STAR',\n  'AFTER_IMPORT_STAR',\n  'AFTER_IMPORT_AS',\n  'AFTER_NAMESPACE_BINDING',\n  'BEFORE_IMPORT_AS',\n  'AFTER_IMPORT_AS',\n  'EXPORTS_BEFORE_COMMA',\n  'EXPORTS_AFTER_COMMA',\n  'BEFORE_EXPORT_STAR',\n  'AFTER_EXPORT_STAR',\n  'BEFORE_EXPORT_BINDINGS',\n  'AFTER_EXPORT_FROM_BINDINGS',\n  'AFTER_EXPORT_LOCAL_BINDINGS',\n  'AFTER_EXPORT',\n  'EXPORT_DEFAULT',\n  'AFTER_EXPORT_DEFAULT',\n  'BEFORE_EXPORT_AS',\n  'AFTER_EXPORT_AS',\n  'BEFORE_LABEL_COLON',\n  'AFTER_LABEL_COLON',\n  'AFTER_METHOD_GENERATOR_STAR',\n  'AFTER_METHOD_ASYNC',\n  'AFTER_METHOD_NAME',\n  'BEFORE_METHOD_BODY',\n  'AFTER_MODULE_DIRECTIVES',\n  'AFTER_NEW',\n  'BEFORE_NEW_ARGS',\n  'EMPTY_NEW_CALL',\n  'NEW_TARGET_BEFORE_DOT',\n  'NEW_TARGET_AFTER_DOT',\n  'RETURN',\n  'AFTER_SET',\n  'BEFORE_SET_PARAMS',\n  'BEFORE_SET_BODY',\n  'AFTER_SCRIPT_DIRECTIVES',\n  'BEFORE_STATIC_MEMBER_DOT',\n  'AFTER_STATIC_MEMBER_DOT',\n  'BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT',\n  'AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT',\n  'BEFORE_CASE_TEST',\n  'AFTER_CASE_TEST',\n  'BEFORE_CASE_BODY',\n  'AFTER_CASE_BODY',\n  'DEFAULT',\n  'AFTER_DEFAULT_BODY',\n  'BEFORE_SWITCH_DISCRIM',\n  'BEFORE_SWITCH_BODY',\n  'TEMPLATE_TAG',\n  'BEFORE_TEMPLATE_EXPRESSION',\n  'AFTER_TEMPLATE_EXPRESSION',\n  'THROW',\n  'AFTER_TRY',\n  'BEFORE_CATCH',\n  'BEFORE_FINALLY',\n  'AFTER_FINALLY',\n  'VARIABLE_DECLARATION',\n  'YIELD',\n  'BEFORE_YIELD_STAR',\n  'AFTER_YIELD_STAR',\n  'DECLARATORS_BEFORE_COMMA',\n  'DECLARATORS_AFTER_COMMA',\n  'BEFORE_INIT_EQUALS',\n  'AFTER_INIT_EQUALS',\n  'AFTER_WHILE',\n  'BEFORE_WHILE_BODY',\n  'AFTER_WITH',\n  'BEFORE_WITH_BODY',\n  'PAREN_AVOIDING_DIRECTIVE_BEFORE',\n  'PAREN_AVOIDING_DIRECTIVE_AFTER',\n  'PRECEDENCE_BEFORE',\n  'PRECEDENCE_AFTER',\n  'EXPRESSION_PAREN_BEFORE',\n  'EXPRESSION_PAREN_AFTER',\n  'CALL_PAREN_BEFORE',\n  'CALL_PAREN_AFTER',\n  'CALL_PAREN_EMPTY',\n  'CATCH_PAREN_BEFORE',\n  'CATCH_PAREN_AFTER',\n  'DO_WHILE_TEST_PAREN_BEFORE',\n  'DO_WHILE_TEST_PAREN_AFTER',\n  'EXPRESSION_STATEMENT_PAREN_BEFORE',\n  'EXPRESSION_STATEMENT_PAREN_AFTER',\n  'FOR_LET_PAREN_BEFORE',\n  'FOR_LET_PAREN_AFTER',\n  'FOR_IN_LET_PAREN_BEFORE',\n  'FOR_IN_LET_PAREN_AFTER',\n  'FOR_IN_PAREN_BEFORE',\n  'FOR_IN_PAREN_AFTER',\n  'FOR_OF_LET_PAREN_BEFORE',\n  'FOR_OF_LET_PAREN_AFTER',\n  'FOR_OF_PAREN_BEFORE',\n  'FOR_OF_PAREN_AFTER',\n  'PARAMETERS_PAREN_BEFORE',\n  'PARAMETERS_PAREN_AFTER',\n  'PARAMETERS_PAREN_EMPTY',\n  'ARROW_PARAMETERS_PAREN_BEFORE',\n  'ARROW_PARAMETERS_PAREN_AFTER',\n  'ARROW_PARAMETERS_PAREN_EMPTY',\n  'ARROW_BODY_PAREN_BEFORE',\n  'ARROW_BODY_PAREN_AFTER',\n  'BEFORE_ARROW_ASYNC_PARAMS',\n  'GETTER_PARAMS',\n  'IF_PAREN_BEFORE',\n  'IF_PAREN_AFTER',\n  'EXPORT_PAREN_BEFORE',\n  'EXPORT_PAREN_AFTER',\n  'NEW_CALLEE_PAREN_BEFORE',\n  'NEW_CALLEE_PAREN_AFTER',\n  'NEW_PAREN_BEFORE',\n  'NEW_PAREN_AFTER',\n  'NEW_PAREN_EMPTY',\n  'SETTER_PARAM_BEFORE',\n  'SETTER_PARAM_AFTER',\n  'SWITCH_DISCRIM_PAREN_BEFORE',\n  'SWITCH_DISCRIM_PAREN_AFTER',\n  'WHILE_TEST_PAREN_BEFORE',\n  'WHILE_TEST_PAREN_AFTER',\n  'WITH_PAREN_BEFORE',\n  'WITH_PAREN_AFTER',\n  'OBJECT_BRACE_INITIAL',\n  'OBJECT_BRACE_FINAL',\n  'OBJECT_EMPTY',\n  'BLOCK_BRACE_INITIAL',\n  'BLOCK_BRACE_FINAL',\n  'BLOCK_EMPTY',\n  'CLASS_BRACE_INITIAL',\n  'CLASS_BRACE_FINAL',\n  'CLASS_EMPTY',\n  'CLASS_EXPRESSION_BRACE_INITIAL',\n  'CLASS_EXPRESSION_BRACE_FINAL',\n  'CLASS_EXPRESSION_BRACE_EMPTY',\n  'FUNCTION_BRACE_INITIAL',\n  'FUNCTION_BRACE_FINAL',\n  'FUNCTION_EMPTY',\n  'FUNCTION_EXPRESSION_BRACE_INITIAL',\n  'FUNCTION_EXPRESSION_BRACE_FINAL',\n  'FUNCTION_EXPRESSION_EMPTY',\n  'ARROW_BRACE_INITIAL',\n  'ARROW_BRACE_FINAL',\n  'ARROW_BRACE_EMPTY',\n  'GET_BRACE_INTIAL',\n  'GET_BRACE_FINAL',\n  'GET_BRACE_EMPTY',\n  'MISSING_ELSE_INTIIAL',\n  'MISSING_ELSE_FINAL',\n  'MISSING_ELSE_EMPTY',\n  'IMPORT_BRACE_INTIAL',\n  'IMPORT_BRACE_FINAL',\n  'IMPORT_BRACE_EMPTY',\n  'EXPORT_BRACE_INITIAL',\n  'EXPORT_BRACE_FINAL',\n  'EXPORT_BRACE_EMPTY',\n  'METHOD_BRACE_INTIAL',\n  'METHOD_BRACE_FINAL',\n  'METHOD_BRACE_EMPTY',\n  'SET_BRACE_INTIIAL',\n  'SET_BRACE_FINAL',\n  'SET_BRACE_EMPTY',\n  'SWITCH_BRACE_INTIAL',\n  'SWITCH_BRACE_FINAL',\n  'SWITCH_BRACE_EMPTY',\n  'ARRAY_INITIAL',\n  'ARRAY_FINAL',\n  'COMPUTED_MEMBER_BRACKET_INTIAL',\n  'COMPUTED_MEMBER_BRACKET_FINAL',\n  'COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL',\n  'COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL',\n  'COMPUTED_PROPERTY_BRACKET_INTIAL',\n  'COMPUTED_PROPERTY_BRACKET_FINAL',\n];\nfor (let i = 0; i < separatorNames.length; ++i) {\n  Sep[separatorNames[i]] = { type: separatorNames[i] };\n}\n\nSep.BEFORE_ASSIGN_OP = function (op) {\n  return {\n    type: 'BEFORE_ASSIGN_OP',\n    op,\n  };\n};\n\nSep.AFTER_ASSIGN_OP = function (op) {\n  return {\n    type: 'AFTER_ASSIGN_OP',\n    op,\n  };\n};\n\nSep.BEFORE_BINOP = function (op) {\n  return {\n    type: 'BEFORE_BINOP',\n    op,\n  };\n};\n\nSep.AFTER_BINOP = function (op) {\n  return {\n    type: 'AFTER_BINOP',\n    op,\n  };\n};\n\nSep.BEFORE_POSTFIX = function (op) {\n  return {\n    type: 'BEFORE_POSTFIX',\n    op,\n  };\n};\n\nSep.UNARY = function (op) {\n  return {\n    type: 'UNARY',\n    op,\n  };\n};\n\nSep.AFTER_STATEMENT = function (node) {\n  return {\n    type: 'AFTER_STATEMENT',\n    node,\n  };\n};\n\nSep.BEFORE_FUNCTION_NAME = function (node) {\n  return {\n    type: 'BEFORE_FUNCTION_NAME',\n    node,\n  };\n};\n\nclass ExtensibleCodeGen {\n  parenToAvoidBeingDirective(element, original) {\n    if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {\n      return seq(this.paren(original.children[0], Sep.PAREN_AVOIDING_DIRECTIVE_BEFORE, Sep.PAREN_AVOIDING_DIRECTIVE_AFTER), this.semiOp());\n    }\n    return original;\n  }\n\n  t(token, isRegExp = false) {\n    return new Token(token, isRegExp);\n  }\n\n  p(node, precedence, a) {\n    return getPrecedence(node) < precedence ? this.paren(a, Sep.PRECEDENCE_BEFORE, Sep.PRECEDENCE_AFTER) : a;\n  }\n\n  getAssignmentExpr(state) {\n    return state ? state.containsGroup ? this.paren(state, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER) : state : empty();\n  }\n\n  paren(rep, first, last, emptySep) {\n    if (isEmpty(rep)) {\n      return new Paren(this.sep(emptySep));\n    }\n    return new Paren(seq(first ? this.sep(first) : empty(), rep, last ? this.sep(last) : empty()));\n  }\n\n  brace(rep, node, first, last, emptySep) {\n    if (isEmpty(rep)) {\n      return new Brace(this.sep(emptySep));\n    }\n    return new Brace(seq(this.sep(first), rep, this.sep(last)));\n  }\n\n  bracket(rep, first, last, emptySep) {\n    if (isEmpty(rep)) {\n      return new Bracket(this.sep(emptySep));\n    }\n    return new Bracket(seq(this.sep(first), rep, this.sep(last)));\n  }\n\n  commaSep(pieces, before, after) {\n    let first = true;\n    pieces = pieces.map(p => {\n      if (first) {\n        first = false;\n        return p;\n      }\n      return seq(this.sep(before), this.t(','), this.sep(after), p);\n\n    });\n    return seq(...pieces);\n  }\n\n  semiOp() {\n    return new SemiOp;\n  }\n\n  sep(/* kind */) {\n    return empty();\n  }\n\n  reduceArrayExpression(node, { elements }) {\n    if (elements.length === 0) {\n      return this.bracket(empty(), null, null, Sep.ARRAY_EMPTY);\n    }\n\n    let content = this.commaSep(elements.map(e=>this.getAssignmentExpr(e)), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);\n    if (elements.length > 0 && elements[elements.length - 1] == null) {\n      content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));\n    }\n    return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL);\n  }\n\n  reduceAwaitExpression(node, { expression }) {\n    return seq(this.t('await'), this.sep(Sep.AWAIT), this.p(node.expression, getPrecedence(node), expression));\n  }\n\n  reduceSpreadElement(node, { expression }) {\n    return seq(this.t('...'), this.sep(Sep.SPREAD), this.p(node.expression, Precedence.Assignment, expression));\n  }\n\n  reduceSpreadProperty(node, { expression }) {\n    return seq(this.t('...'), this.sep(Sep.SPREAD), this.getAssignmentExpr(expression));\n  }\n\n  reduceAssignmentExpression(node, { binding, expression }) {\n    let leftCode = binding;\n    let rightCode = expression;\n    let containsIn = expression.containsIn;\n    let startsWithCurly = binding.startsWithCurly;\n    let startsWithLetSquareBracket = binding.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = binding.startsWithFunctionOrClass;\n    if (getPrecedence(node.expression) < getPrecedence(node)) {\n      rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      containsIn = false;\n    }\n    return objectAssign(seq(leftCode, this.sep(Sep.BEFORE_ASSIGN_OP('=')), this.t('='), this.sep(Sep.AFTER_ASSIGN_OP('=')), rightCode), { containsIn, startsWithCurly, startsWithLetSquareBracket, startsWithFunctionOrClass });\n  }\n\n  reduceAssignmentTargetIdentifier(node) {\n    let a = this.t(node.name);\n    if (node.name === 'let') {\n      a.startsWithLet = true;\n    }\n    return a;\n  }\n\n  reduceAssignmentTargetWithDefault(node, { binding, init }) {\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n\n  reduceCompoundAssignmentExpression(node, { binding, expression }) {\n    let leftCode = binding;\n    let rightCode = expression;\n    let containsIn = expression.containsIn;\n    let startsWithCurly = binding.startsWithCurly;\n    let startsWithLetSquareBracket = binding.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = binding.startsWithFunctionOrClass;\n    if (getPrecedence(node.expression) < getPrecedence(node)) {\n      rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      containsIn = false;\n    }\n    return objectAssign(seq(leftCode, this.sep(Sep.BEFORE_ASSIGN_OP(node.operator)), this.t(node.operator), this.sep(Sep.AFTER_ASSIGN_OP(node.operator)), rightCode), { containsIn, startsWithCurly, startsWithLetSquareBracket, startsWithFunctionOrClass });\n  }\n\n  reduceBinaryExpression(node, { left, right }) {\n    let leftCode = left;\n    let startsWithCurly = left.startsWithCurly;\n    let startsWithLetSquareBracket = left.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = left.startsWithFunctionOrClass;\n    let leftContainsIn = left.containsIn;\n    let isRightAssociative = node.operator === '**';\n    if (getPrecedence(node.left) < getPrecedence(node) || isRightAssociative && (getPrecedence(node.left) === getPrecedence(node) || node.left.type === 'UnaryExpression')) {\n      leftCode = this.paren(leftCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      startsWithCurly = false;\n      startsWithLetSquareBracket = false;\n      startsWithFunctionOrClass = false;\n      leftContainsIn = false;\n    }\n    let rightCode = right;\n    let rightContainsIn = right.containsIn;\n    if (getPrecedence(node.right) < getPrecedence(node) || !isRightAssociative && getPrecedence(node.right) === getPrecedence(node)) {\n      rightCode = this.paren(rightCode, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      rightContainsIn = false;\n    }\n    return objectAssign(\n      seq(leftCode, this.sep(Sep.BEFORE_BINOP(node.operator)), this.t(node.operator), this.sep(Sep.AFTER_BINOP(node.operator)), rightCode),\n      {\n        containsIn: leftContainsIn || rightContainsIn || node.operator === 'in',\n        containsGroup: node.operator === ',',\n        startsWithCurly,\n        startsWithLetSquareBracket,\n        startsWithFunctionOrClass,\n      }\n    );\n  }\n\n  reduceBindingWithDefault(node, { binding, init }) {\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n\n  reduceBindingIdentifier(node) {\n    let a = this.t(node.name);\n    if (node.name === 'let') {\n      a.startsWithLet = true;\n    }\n    return a;\n  }\n\n  reduceArrayAssignmentTarget(node, { elements, rest }) {\n    let content;\n    if (elements.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      elements = elements.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]);\n      content = this.commaSep(elements.map(e=>this.getAssignmentExpr(e)), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);\n      if (elements.length > 0 && elements[elements.length - 1] == null) {\n        content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));\n      }\n    }\n    return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL, Sep.ARRAY_EMPTY);\n  }\n\n  reduceArrayBinding(node, { elements, rest }) {\n    let content;\n    if (elements.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      elements = elements.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]);\n      content = this.commaSep(elements.map(e=>this.getAssignmentExpr(e)), Sep.ARRAY_BEFORE_COMMA, Sep.ARRAY_AFTER_COMMA);\n      if (elements.length > 0 && elements[elements.length - 1] == null) {\n        content = seq(content, this.sep(Sep.ARRAY_BEFORE_COMMA), this.t(','), this.sep(Sep.ARRAY_AFTER_COMMA));\n      }\n    }\n    return this.bracket(content, Sep.ARRAY_INITIAL, Sep.ARRAY_FINAL, Sep.ARRAY_EMPTY);\n  }\n\n  reduceObjectAssignmentTarget(node, { properties, rest }) {\n    let content;\n    if (properties.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      content = this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n      content = rest == null ? content : this.commaSep([content, seq(this.t('...'), this.sep(Sep.REST), rest)], Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n    }\n    let state = this.brace(content, node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);\n    state.startsWithCurly = true;\n    return state;\n  }\n\n  reduceObjectBinding(node, { properties, rest }) {\n    let content;\n    if (properties.length === 0) {\n      content = rest == null ? empty() : seq(this.t('...'), this.sep(Sep.REST), rest);\n    } else {\n      content = this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n      content = rest == null ? content : this.commaSep([content, seq(this.t('...'), this.sep(Sep.REST), rest)], Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA);\n    }\n    let state = this.brace(content, node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);\n    state.startsWithCurly = true;\n    return state;\n  }\n\n  reduceAssignmentTargetPropertyIdentifier(node, { binding, init }) {\n    if (node.init == null) return binding;\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n\n  reduceAssignmentTargetPropertyProperty(node, { name, binding }) {\n    return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), binding);\n  }\n\n  reduceBindingPropertyIdentifier(node, { binding, init }) {\n    if (node.init == null) return binding;\n    return seq(binding, this.sep(Sep.BEFORE_DEFAULT_EQUALS), this.t('='), this.sep(Sep.AFTER_DEFAULT_EQUALS), this.p(node.init, Precedence.Assignment, init));\n  }\n\n  reduceBindingPropertyProperty(node, { name, binding }) {\n    return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), binding);\n  }\n\n  reduceBlock(node, { statements }) {\n    return this.brace(seq(...statements), node, Sep.BLOCK_BRACE_INITIAL, Sep.BLOCK_BRACE_FINAL, Sep.BLOCK_EMPTY);\n  }\n\n  reduceBlockStatement(node, { block }) {\n    return seq(block, this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceBreakStatement(node) {\n    return seq(this.t('break'), node.label ? seq(this.sep(Sep.BEFORE_JUMP_LABEL), this.t(node.label)) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceCallExpression(node, { callee, arguments: args }) {\n    const parenthizedArgs = args.map((a, i) => this.p(node.arguments[i], Precedence.Assignment, a));\n    return objectAssign(\n      seq(this.p(node.callee, getPrecedence(node), callee), this.sep(Sep.CALL), this.paren(this.commaSep(parenthizedArgs, Sep.ARGS_BEFORE_COMMA, Sep.ARGS_AFTER_COMMA), Sep.CALL_PAREN_BEFORE, Sep.CALL_PAREN_AFTER, Sep.CALL_PAREN_EMPTY)),\n      {\n        startsWithCurly: callee.startsWithCurly,\n        startsWithLet: callee.startsWithLet,\n        startsWithLetSquareBracket: callee.startsWithLetSquareBracket,\n        startsWithFunctionOrClass: callee.startsWithFunctionOrClass,\n      }\n    );\n  }\n\n  reduceCatchClause(node, { binding, body }) {\n    if (binding == null) {\n      return seq(this.t('catch'), this.sep(Sep.BEFORE_CATCH_BINDING), body);\n    }\n    return seq(this.t('catch'),\n      this.sep(Sep.BEFORE_CATCH_BINDING),\n      this.paren(binding, Sep.CATCH_PAREN_BEFORE, Sep.CATCH_PAREN_AFTER),\n      this.sep(Sep.AFTER_CATCH_BINDING), body);\n  }\n\n  reduceClassDeclaration(node, { name, super: _super, elements }) {\n    let state = seq(this.t('class'), node.name.name === '*default*' ? empty() : seq(this.sep(Sep.BEFORE_CLASS_NAME), name));\n    if (_super != null) {\n      state = seq(state, this.sep(Sep.BEFORE_EXTENDS), this.t('extends'), this.sep(Sep.AFTER_EXTENDS), this.p(node.super, Precedence.New, _super));\n    }\n    state = seq(state, this.sep(Sep.BEFORE_CLASS_DECLARATION_ELEMENTS), this.brace(seq(...elements), node, Sep.CLASS_BRACE_INITIAL, Sep.CLASS_BRACE_FINAL, Sep.CLASS_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n    return state;\n  }\n\n  reduceClassExpression(node, { name, super: _super, elements }) {\n    let state = this.t('class');\n    if (name != null) {\n      state = seq(state, this.sep(Sep.BEFORE_CLASS_NAME), name);\n    }\n    if (_super != null) {\n      state = seq(state, this.sep(Sep.BEFORE_EXTENDS), this.t('extends'), this.sep(Sep.AFTER_EXTENDS), this.p(node.super, Precedence.New, _super));\n    }\n    state = seq(state, this.sep(Sep.BEFORE_CLASS_EXPRESSION_ELEMENTS), this.brace(seq(...elements), node, Sep.CLASS_EXPRESSION_BRACE_INITIAL, Sep.CLASS_EXPRESSION_BRACE_FINAL, Sep.CLASS_EXPRESSION_BRACE_EMPTY));\n    state.startsWithFunctionOrClass = true;\n    return state;\n  }\n\n  reduceClassElement(node, { method }) {\n    method = seq(this.sep(Sep.BEFORE_CLASS_ELEMENT), method, this.sep(Sep.AFTER_CLASS_ELEMENT));\n    if (!node.isStatic) return method;\n    return seq(this.t('static'), this.sep(Sep.AFTER_STATIC), method);\n  }\n\n  reduceComputedMemberAssignmentTarget(node, { object, expression }) {\n    let startsWithLetSquareBracket =\n      object.startsWithLetSquareBracket ||\n      node.object.type === 'IdentifierExpression' && node.object.name === 'let';\n    return objectAssign(\n      seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET), this.bracket(expression, Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_INTIAL, Sep.COMPUTED_MEMBER_ASSIGNMENT_TARGET_BRACKET_FINAL)),\n      {\n        startsWithLet: object.startsWithLet,\n        startsWithLetSquareBracket,\n        startsWithCurly: object.startsWithCurly,\n        startsWithFunctionOrClass: object.startsWithFunctionOrClass,\n      }\n    );\n  }\n\n  reduceComputedMemberExpression(node, { object, expression }) {\n    let startsWithLetSquareBracket =\n      object.startsWithLetSquareBracket ||\n      node.object.type === 'IdentifierExpression' && node.object.name === 'let';\n    return objectAssign(\n      seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.COMPUTED_MEMBER_EXPRESSION), this.bracket(expression, Sep.COMPUTED_MEMBER_BRACKET_INTIAL, Sep.COMPUTED_MEMBER_BRACKET_FINAL)),\n      {\n        startsWithLet: object.startsWithLet,\n        startsWithLetSquareBracket,\n        startsWithCurly: object.startsWithCurly,\n        startsWithFunctionOrClass: object.startsWithFunctionOrClass,\n      }\n    );\n  }\n\n  reduceComputedPropertyName(node, { expression }) {\n    return this.bracket(this.p(node.expression, Precedence.Assignment, expression), Sep.COMPUTED_PROPERTY_BRACKET_INTIAL, Sep.COMPUTED_PROPERTY_BRACKET_FINAL);\n  }\n\n  reduceConditionalExpression(node, { test, consequent, alternate }) {\n    let containsIn = test.containsIn || alternate.containsIn;\n    let startsWithCurly = test.startsWithCurly;\n    let startsWithLetSquareBracket = test.startsWithLetSquareBracket;\n    let startsWithFunctionOrClass = test.startsWithFunctionOrClass;\n    return objectAssign(\n      seq(\n        this.p(node.test, Precedence.LogicalOR, test), this.sep(Sep.BEFORE_TERNARY_QUESTION), this.t('?'), this.sep(Sep.AFTER_TERNARY_QUESTION),\n        this.p(node.consequent, Precedence.Assignment, consequent), this.sep(Sep.BEFORE_TERNARY_COLON), this.t(':'), this.sep(Sep.AFTER_TERNARY_COLON),\n        this.p(node.alternate, Precedence.Assignment, alternate)), {\n        containsIn,\n        startsWithCurly,\n        startsWithLetSquareBracket,\n        startsWithFunctionOrClass,\n      });\n  }\n\n  reduceContinueStatement(node) {\n    return seq(this.t('continue'), node.label ? seq(this.sep(Sep.BEFORE_JUMP_LABEL), this.t(node.label)) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceDataProperty(node, { name, expression }) {\n    return seq(name, this.sep(Sep.BEFORE_PROP), this.t(':'), this.sep(Sep.AFTER_PROP), this.getAssignmentExpr(expression));\n  }\n\n  reduceDebuggerStatement(node) {\n    return seq(this.t('debugger'), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceDoWhileStatement(node, { body, test }) {\n    return seq(this.t('do'), this.sep(Sep.AFTER_DO), body, this.sep(Sep.BEFORE_DOWHILE_WHILE), this.t('while'), this.sep(Sep.AFTER_DOWHILE_WHILE), this.paren(test, Sep.DO_WHILE_TEST_PAREN_BEFORE, Sep.DO_WHILE_TEST_PAREN_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceEmptyStatement(node) {\n    return seq(this.t(';'), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceExpressionStatement(node, { expression }) {\n    let needsParens =\n      expression.startsWithCurly ||\n      expression.startsWithLetSquareBracket ||\n      expression.startsWithFunctionOrClass;\n    return seq(needsParens ? this.paren(expression, Sep.EXPRESSION_STATEMENT_PAREN_BEFORE, Sep.EXPRESSION_STATEMENT_PAREN_AFTER) : expression, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceForInStatement(node, { left, right, body }) {\n    left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;\n    return objectAssign(\n      seq(this.t('for'), this.sep(Sep.AFTER_FORIN_FOR), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_IN_LET_PAREN_BEFORE, Sep.FOR_IN_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FORIN_IN), this.t('in'), this.sep(Sep.AFTER_FORIN_FOR), right), Sep.FOR_IN_PAREN_BEFORE, Sep.FOR_IN_PAREN_AFTER), this.sep(Sep.BEFORE_FORIN_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))),\n      { endsWithMissingElse: body.endsWithMissingElse });\n  }\n\n  reduceForOfStatement(node, { left, right, body }) {\n    left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;\n    return objectAssign(\n      seq(this.t('for'), this.sep(Sep.AFTER_FOROF_FOR), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_OF_LET_PAREN_BEFORE, Sep.FOR_OF_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FOROF_OF), this.t('of'), this.sep(Sep.AFTER_FOROF_FOR), this.p(node.right, Precedence.Assignment, right)), Sep.FOR_OF_PAREN_BEFORE, Sep.FOR_OF_PAREN_AFTER), this.sep(Sep.BEFORE_FOROF_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))),\n      { endsWithMissingElse: body.endsWithMissingElse });\n  }\n\n  reduceForStatement(node, { init, test, update, body }) {\n    if (init) {\n      if (init.startsWithLetSquareBracket) {\n        init = this.paren(init, Sep.FOR_LET_PAREN_BEFORE, Sep.FOR_LET_PAREN_AFTER);\n      }\n      init = noIn(markContainsIn(init));\n    }\n    return objectAssign(\n      seq(\n        this.t('for'), this.sep(Sep.AFTER_FOR_FOR),\n        this.paren(seq(init ? seq(this.sep(Sep.BEFORE_FOR_INIT), init, this.sep(Sep.AFTER_FOR_INIT)) : this.sep(Sep.EMPTY_FOR_INIT), this.t(';'), test ? seq(this.sep(Sep.BEFORE_FOR_TEST), test, this.sep(Sep.AFTER_FOR_TEST)) : this.sep(Sep.EMPTY_FOR_TEST), this.t(';'), update ? seq(this.sep(Sep.BEFORE_FOR_UPDATE), update, this.sep(Sep.AFTER_FOR_UPDATE)) : this.sep(Sep.EMPTY_FOR_UPDATE))),\n        this.sep(Sep.BEFORE_FOR_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))),\n      {\n        endsWithMissingElse: body.endsWithMissingElse,\n      });\n  }\n\n  reduceForAwaitStatement(node, { left, right, body }) {\n    left = node.left.type === 'VariableDeclaration' ? noIn(markContainsIn(left)) : left;\n    return objectAssign(\n      seq(this.t('for'), this.sep(Sep.AFTER_FOROF_FOR), this.t('await'), this.sep(Sep.AFTER_FORAWAIT_AWAIT), this.paren(seq(left.startsWithLet ? this.paren(left, Sep.FOR_OF_LET_PAREN_BEFORE, Sep.FOR_OF_LET_PAREN_AFTER) : left, this.sep(Sep.BEFORE_FOROF_OF), this.t('of'), this.sep(Sep.AFTER_FOROF_FOR), this.p(node.right, Precedence.Assignment, right)), Sep.FOR_OF_PAREN_BEFORE, Sep.FOR_OF_PAREN_AFTER), this.sep(Sep.BEFORE_FOROF_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))),\n      { endsWithMissingElse: body.endsWithMissingElse });\n  }\n\n  reduceFunctionBody(node, { directives, statements }) {\n    if (statements.length) {\n      statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);\n    }\n    return seq(...directives, directives.length ? this.sep(Sep.AFTER_FUNCTION_DIRECTIVES) : empty(), ...statements);\n  }\n\n  reduceFunctionDeclaration(node, { name, params, body }) {\n    return seq(node.isAsync ? this.t('async') : empty(), this.t('function'), node.isGenerator ? seq(this.sep(Sep.BEFORE_GENERATOR_STAR), this.t('*'), this.sep(Sep.AFTER_GENERATOR_STAR)) : empty(), this.sep(Sep.BEFORE_FUNCTION_NAME(node)), node.name.name === '*default*' ? empty() : name, this.sep(Sep.BEFORE_FUNCTION_PARAMS), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_FUNCTION_DECLARATION_BODY), this.brace(body, node, Sep.FUNCTION_BRACE_INITIAL, Sep.FUNCTION_BRACE_FINAL, Sep.FUNCTION_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceFunctionExpression(node, { name, params, body }) {\n    let state = seq(node.isAsync ? this.t('async') : empty(), this.t('function'), node.isGenerator ? seq(this.sep(Sep.BEFORE_GENERATOR_STAR), this.t('*'), this.sep(Sep.AFTER_GENERATOR_STAR)) : empty(), this.sep(Sep.BEFORE_FUNCTION_NAME(node)), name ? name : empty(), this.sep(Sep.BEFORE_FUNCTION_PARAMS), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_FUNCTION_EXPRESSION_BODY), this.brace(body, node, Sep.FUNCTION_EXPRESSION_BRACE_INITIAL, Sep.FUNCTION_EXPRESSION_BRACE_FINAL, Sep.FUNCTION_EXPRESSION_EMPTY));\n    state.startsWithFunctionOrClass = true;\n    return state;\n  }\n\n  reduceFormalParameters(node, { items, rest }) {\n    return this.commaSep(items.concat(rest == null ? [] : [seq(this.t('...'), this.sep(Sep.REST), rest)]), Sep.PARAMETER_BEFORE_COMMA, Sep.PARAMETER_AFTER_COMMA);\n  }\n\n  reduceArrowExpression(node, { params, body }) {\n    if (node.params.rest != null || node.params.items.length !== 1 || node.params.items[0].type !== 'BindingIdentifier') {\n      params = this.paren(params, Sep.ARROW_PARAMETERS_PAREN_BEFORE, Sep.ARROW_PARAMETERS_PAREN_AFTER, Sep.ARROW_PARAMETERS_PAREN_EMPTY);\n    }\n    let containsIn = false;\n    if (node.body.type === 'FunctionBody') {\n      body = this.brace(body, node, Sep.ARROW_BRACE_INITIAL, Sep.ARROW_BRACE_FINAL, Sep.ARROW_BRACE_EMPTY);\n    } else if (body.startsWithCurly) {\n      body = this.paren(body, Sep.ARROW_BODY_PAREN_BEFORE, Sep.ARROW_BODY_PAREN_AFTER);\n    } else if (body.containsIn) {\n      containsIn = true;\n    }\n    return objectAssign(seq(node.isAsync ? seq(this.t('async'), this.sep(Sep.BEFORE_ARROW_ASYNC_PARAMS)) : empty(), params, this.sep(Sep.BEFORE_ARROW), this.t('=>'), this.sep(Sep.AFTER_ARROW), this.p(node.body, Precedence.Assignment, body)), { containsIn });\n  }\n\n  reduceGetter(node, { name, body }) {\n    return seq(this.t('get'), this.sep(Sep.AFTER_GET), name, this.sep(Sep.BEFORE_GET_PARAMS), this.paren(empty(), null, null, Sep.GETTER_PARAMS), this.sep(Sep.BEFORE_GET_BODY), this.brace(body, node, Sep.GET_BRACE_INTIAL, Sep.GET_BRACE_FINAL, Sep.GET_BRACE_EMPTY));\n  }\n\n  reduceIdentifierExpression(node) {\n    let a = this.t(node.name);\n    if (node.name === 'let') {\n      a.startsWithLet = true;\n    }\n    return a;\n  }\n\n  reduceIfStatement(node, { test, consequent, alternate }) {\n    if (alternate && consequent.endsWithMissingElse) {\n      consequent = this.brace(consequent, node, Sep.MISSING_ELSE_INTIIAL, Sep.MISSING_ELSE_FINAL, Sep.MISSING_ELSE_EMPTY);\n    }\n    return objectAssign(\n      seq(this.t('if'), this.sep(Sep.AFTER_IF),\n        this.paren(test, Sep.IF_PAREN_BEFORE, Sep.IF_PAREN_AFTER), this.sep(Sep.AFTER_IF_TEST),\n        consequent,\n        alternate ? seq(this.sep(Sep.BEFORE_ELSE), this.t('else'), this.sep(Sep.AFTER_ELSE), alternate) : empty(), this.sep(Sep.AFTER_STATEMENT(node))),\n      { endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true });\n  }\n\n  reduceImport(node, { defaultBinding, namedImports }) {\n    let bindings = [];\n    if (defaultBinding != null) {\n      bindings.push(defaultBinding);\n    }\n    if (namedImports.length > 0) {\n      bindings.push(this.brace(this.commaSep(namedImports, Sep.NAMED_IMPORT_BEFORE_COMMA, Sep.NAMED_IMPORT_AFTER_COMMA), node, Sep.IMPORT_BRACE_INTIAL, Sep.IMPORT_BRACE_FINAL, Sep.IMPORT_BRACE_EMPTY));\n    }\n    if (bindings.length === 0) {\n      return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_MODULE), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n    }\n    return seq(this.t('import'), this.sep(Sep.BEFORE_IMPORT_BINDINGS), this.commaSep(bindings, Sep.IMPORT_BEFORE_COMMA, Sep.IMPORT_AFTER_COMMA), this.sep(Sep.AFTER_IMPORT_BINDINGS), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceImportNamespace(node, { defaultBinding, namespaceBinding }) {\n    return seq(\n      this.t('import'), this.sep(Sep.BEFORE_IMPORT_NAMESPACE),\n      defaultBinding == null ? empty() : seq(defaultBinding, this.sep(Sep.IMPORT_BEFORE_COMMA), this.t(','), this.sep(Sep.IMPORT_AFTER_COMMA)),\n      this.sep(Sep.BEFORE_IMPORT_STAR), this.t('*'), this.sep(Sep.AFTER_IMPORT_STAR),\n      this.t('as'), this.sep(Sep.AFTER_IMPORT_AS),\n      namespaceBinding, this.sep(Sep.AFTER_NAMESPACE_BINDING),\n      this.t('from'), this.sep(Sep.AFTER_FROM),\n      this.t(escapeStringLiteral(node.moduleSpecifier)),\n      this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node))\n    );\n  }\n\n  reduceImportSpecifier(node, { binding }) {\n    if (node.name == null) return binding;\n    return seq(this.t(node.name), this.sep(Sep.BEFORE_IMPORT_AS), this.t('as'), this.sep(Sep.AFTER_IMPORT_AS), binding);\n  }\n\n  reduceExportAllFrom(node) {\n    return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_STAR), this.t('*'), this.sep(Sep.AFTER_EXPORT_STAR), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceExportFrom(node, { namedExports }) {\n    return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_BINDINGS), this.brace(this.commaSep(namedExports, Sep.EXPORTS_BEFORE_COMMA, Sep.EXPORTS_AFTER_COMMA), node, Sep.EXPORT_BRACE_INITIAL, Sep.EXPORT_BRACE_FINAL, Sep.EXPORT_BRACE_EMPTY), this.sep(Sep.AFTER_EXPORT_FROM_BINDINGS), this.t('from'), this.sep(Sep.AFTER_FROM), this.t(escapeStringLiteral(node.moduleSpecifier)), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceExportLocals(node, { namedExports }) {\n    return seq(this.t('export'), this.sep(Sep.BEFORE_EXPORT_BINDINGS), this.brace(this.commaSep(namedExports, Sep.EXPORTS_BEFORE_COMMA, Sep.EXPORTS_AFTER_COMMA), node, Sep.EXPORT_BRACE_INITIAL, Sep.EXPORT_BRACE_FINAL, Sep.EXPORT_BRACE_EMPTY), this.sep(Sep.AFTER_EXPORT_LOCAL_BINDINGS), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceExport(node, { declaration }) {\n    switch (node.declaration.type) {\n      case 'FunctionDeclaration':\n      case 'ClassDeclaration':\n        break;\n      default:\n        declaration = seq(declaration, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n    }\n    return seq(this.t('export'), this.sep(Sep.AFTER_EXPORT), declaration);\n  }\n\n  reduceExportDefault(node, { body }) {\n    body = body.startsWithFunctionOrClass ? this.paren(body, Sep.EXPORT_PAREN_BEFORE, Sep.EXPORT_PAREN_AFTER) : body;\n    switch (node.body.type) {\n      case 'FunctionDeclaration':\n      case 'ClassDeclaration':\n        return seq(this.t('export'), this.sep(Sep.EXPORT_DEFAULT), this.t('default'), this.sep(Sep.AFTER_EXPORT_DEFAULT), body);\n      default:\n        return seq(this.t('export'), this.sep(Sep.EXPORT_DEFAULT), this.t('default'), this.sep(Sep.AFTER_EXPORT_DEFAULT), this.p(node.body, Precedence.Assignment, body), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n    }\n  }\n\n  reduceExportFromSpecifier(node) {\n    if (node.exportedName == null) return this.t(node.name);\n    return seq(this.t(node.name), this.sep(Sep.BEFORE_EXPORT_AS), this.t('as'), this.sep(Sep.AFTER_EXPORT_AS), this.t(node.exportedName));\n  }\n\n  reduceExportLocalSpecifier(node, { name }) {\n    if (node.exportedName == null) return name;\n    return seq(name, this.sep(Sep.BEFORE_EXPORT_AS), this.t('as'), this.sep(Sep.AFTER_EXPORT_AS), this.t(node.exportedName));\n  }\n\n  reduceLabeledStatement(node, { body }) {\n    return objectAssign(seq(this.t(node.label), this.sep(Sep.BEFORE_LABEL_COLON), this.t(':'), this.sep(Sep.AFTER_LABEL_COLON), body), { endsWithMissingElse: body.endsWithMissingElse });\n  }\n\n  reduceLiteralBooleanExpression(node) {\n    return this.t(node.value.toString());\n  }\n\n  reduceLiteralNullExpression(/* node */) {\n    return this.t('null');\n  }\n\n  reduceLiteralInfinityExpression(/* node */) {\n    return this.t('2e308');\n  }\n\n  reduceLiteralNumericExpression(node) {\n    return new NumberCodeRep(node.value);\n  }\n\n  reduceLiteralRegExpExpression(node) {\n    return this.t(`/${node.pattern}/${node.global ? 'g' : ''}${node.ignoreCase ? 'i' : ''}${node.multiLine ? 'm' : ''}${node.dotAll ? 's' : ''}${node.unicode ? 'u' : ''}${node.sticky ? 'y' : ''}`, true);\n  }\n\n  reduceLiteralStringExpression(node) {\n    return this.t(escapeStringLiteral(node.value));\n  }\n\n  reduceMethod(node, { name, params, body }) {\n    return seq(node.isAsync ? seq(this.t('async'), this.sep(Sep.AFTER_METHOD_ASYNC)) : empty(), node.isGenerator ? seq(this.t('*'), this.sep(Sep.AFTER_METHOD_GENERATOR_STAR)) : empty(), name, this.sep(Sep.AFTER_METHOD_NAME), this.paren(params, Sep.PARAMETERS_PAREN_BEFORE, Sep.PARAMETERS_PAREN_AFTER, Sep.PARAMETERS_PAREN_EMPTY), this.sep(Sep.BEFORE_METHOD_BODY), this.brace(body, node, Sep.METHOD_BRACE_INTIAL, Sep.METHOD_BRACE_FINAL, Sep.METHOD_BRACE_EMPTY));\n  }\n\n  reduceModule(node, { directives, items }) {\n    if (items.length) {\n      items[0] = this.parenToAvoidBeingDirective(node.items[0], items[0]);\n    }\n    return seq(...directives, directives.length ? this.sep(Sep.AFTER_MODULE_DIRECTIVES) : empty(), ...items);\n  }\n\n  reduceNewExpression(node, { callee, arguments: args }) {\n    const parenthizedArgs = args.map((a, i) => this.p(node.arguments[i], Precedence.Assignment, a));\n    let calleeRep = getPrecedence(node.callee) === Precedence.Call ? this.paren(callee, Sep.NEW_CALLEE_PAREN_BEFORE, Sep.NEW_CALLEE_PAREN_AFTER) :\n      this.p(node.callee, getPrecedence(node), callee);\n    return seq(this.t('new'), this.sep(Sep.AFTER_NEW), calleeRep, args.length === 0 ? this.sep(Sep.EMPTY_NEW_CALL) : seq(this.sep(Sep.BEFORE_NEW_ARGS), this.paren(this.commaSep(parenthizedArgs, Sep.ARGS_BEFORE_COMMA, Sep.ARGS_AFTER_COMMA), Sep.NEW_PAREN_BEFORE, Sep.NEW_PAREN_AFTER, Sep.NEW_PAREN_EMPTY)));\n  }\n\n  reduceNewTargetExpression() {\n    return seq(this.t('new'), this.sep(Sep.NEW_TARGET_BEFORE_DOT), this.t('.'), this.sep(Sep.NEW_TARGET_AFTER_DOT), this.t('target'));\n  }\n\n  reduceObjectExpression(node, { properties }) {\n    let state = this.brace(this.commaSep(properties, Sep.OBJECT_BEFORE_COMMA, Sep.OBJECT_AFTER_COMMA), node, Sep.OBJECT_BRACE_INITIAL, Sep.OBJECT_BRACE_FINAL, Sep.OBJECT_EMPTY);\n    state.startsWithCurly = true;\n    return state;\n  }\n\n  reduceUpdateExpression(node, { operand }) {\n    if (node.isPrefix) {\n      return this.reduceUnaryExpression(...arguments);\n    }\n    return objectAssign(\n      seq(this.p(node.operand, Precedence.New, operand), this.sep(Sep.BEFORE_POSTFIX(node.operator)), this.t(node.operator)),\n      {\n        startsWithCurly: operand.startsWithCurly,\n        startsWithLetSquareBracket: operand.startsWithLetSquareBracket,\n        startsWithFunctionOrClass: operand.startsWithFunctionOrClass,\n      }\n    );\n\n  }\n\n  reduceUnaryExpression(node, { operand }) {\n    return seq(this.t(node.operator), this.sep(Sep.UNARY(node.operator)), this.p(node.operand, getPrecedence(node), operand));\n  }\n\n  reduceReturnStatement(node, { expression }) {\n    return seq(this.t('return'), expression ? seq(this.sep(Sep.RETURN), expression) : empty(), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceScript(node, { directives, statements }) {\n    if (statements.length) {\n      statements[0] = this.parenToAvoidBeingDirective(node.statements[0], statements[0]);\n    }\n    return seq(...directives, directives.length ? this.sep(Sep.AFTER_SCRIPT_DIRECTIVES) : empty(), ...statements);\n  }\n\n  reduceSetter(node, { name, param, body }) {\n    return seq(this.t('set'), this.sep(Sep.AFTER_SET), name, this.sep(Sep.BEFORE_SET_PARAMS), this.paren(param, Sep.SETTER_PARAM_BEFORE, Sep.SETTER_PARAM_AFTER), this.sep(Sep.BEFORE_SET_BODY), this.brace(body, node, Sep.SET_BRACE_INTIIAL, Sep.SET_BRACE_FINAL, Sep.SET_BRACE_EMPTY));\n  }\n\n  reduceShorthandProperty(node, { name }) {\n    return name;\n  }\n\n  reduceStaticMemberAssignmentTarget(node, { object }) {\n    const state = seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.BEFORE_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT), this.t('.'), this.sep(Sep.AFTER_STATIC_MEMBER_ASSIGNMENT_TARGET_DOT), this.t(node.property));\n    state.startsWithLet = object.startsWithLet;\n    state.startsWithCurly = object.startsWithCurly;\n    state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;\n    state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;\n    return state;\n  }\n\n  reduceStaticMemberExpression(node, { object }) {\n    const state = seq(this.p(node.object, getPrecedence(node), object), this.sep(Sep.BEFORE_STATIC_MEMBER_DOT), this.t('.'), this.sep(Sep.AFTER_STATIC_MEMBER_DOT), this.t(node.property));\n    state.startsWithLet = object.startsWithLet;\n    state.startsWithCurly = object.startsWithCurly;\n    state.startsWithLetSquareBracket = object.startsWithLetSquareBracket;\n    state.startsWithFunctionOrClass = object.startsWithFunctionOrClass;\n    return state;\n  }\n\n  reduceStaticPropertyName(node) {\n    if (keyword.isIdentifierNameES6(node.value)) {\n      return this.t(node.value);\n    }\n    let n = parseFloat(node.value);\n    if (n >= 0 && n.toString() === node.value) {\n      return new NumberCodeRep(n);\n    }\n    return this.t(escapeStringLiteral(node.value));\n  }\n\n  reduceSuper() {\n    return this.t('super');\n  }\n\n  reduceSwitchCase(node, { test, consequent }) {\n    return seq(this.t('case'), this.sep(Sep.BEFORE_CASE_TEST), test, this.sep(Sep.AFTER_CASE_TEST), this.t(':'), this.sep(Sep.BEFORE_CASE_BODY), seq(...consequent), this.sep(Sep.AFTER_CASE_BODY));\n  }\n\n  reduceSwitchDefault(node, { consequent }) {\n    return seq(this.t('default'), this.sep(Sep.DEFAULT), this.t(':'), this.sep(Sep.BEFORE_CASE_BODY), seq(...consequent), this.sep(Sep.AFTER_DEFAULT_BODY));\n  }\n\n  reduceSwitchStatement(node, { discriminant, cases }) {\n    return seq(this.t('switch'), this.sep(Sep.BEFORE_SWITCH_DISCRIM), this.paren(discriminant, Sep.SWITCH_DISCRIM_PAREN_BEFORE, Sep.SWITCH_DISCRIM_PAREN_AFTER), this.sep(Sep.BEFORE_SWITCH_BODY), this.brace(seq(...cases), node, Sep.SWITCH_BRACE_INTIAL, Sep.SWITCH_BRACE_FINAL, Sep.SWITCH_BRACE_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceSwitchStatementWithDefault(node, { discriminant, preDefaultCases, defaultCase, postDefaultCases }) {\n    return seq(\n      this.t('switch'),\n      this.sep(Sep.BEFORE_SWITCH_DISCRIM), this.paren(discriminant, Sep.SWITCH_DISCRIM_PAREN_BEFORE, Sep.SWITCH_DISCRIM_PAREN_AFTER), this.sep(Sep.BEFORE_SWITCH_BODY),\n      this.brace(seq(...preDefaultCases, defaultCase, ...postDefaultCases), node, Sep.SWITCH_BRACE_INTIAL, Sep.SWITCH_BRACE_FINAL, Sep.SWITCH_BRACE_EMPTY), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceTemplateExpression(node, { tag, elements }) {\n    let state = node.tag == null ? empty() : seq(this.p(node.tag, getPrecedence(node), tag), this.sep(Sep.TEMPLATE_TAG));\n    state = seq(state, this.t('`'));\n    for (let i = 0, l = node.elements.length; i < l; ++i) {\n      if (node.elements[i].type === 'TemplateElement') {\n        let d = '';\n        if (i > 0) d += '}';\n        d += node.elements[i].rawValue;\n        if (i < l - 1) d += '${';\n        state = seq(state, this.t(d));\n      } else {\n        state = seq(state, this.sep(Sep.BEFORE_TEMPLATE_EXPRESSION), elements[i], this.sep(Sep.AFTER_TEMPLATE_EXPRESSION));\n      }\n    }\n    state = seq(state, this.t('`'));\n    if (node.tag != null) {\n      state.startsWithCurly = tag.startsWithCurly;\n      state.startsWithLet = tag.startsWithLet;\n      state.startsWithLetSquareBracket = tag.startsWithLetSquareBracket;\n      state.startsWithFunctionOrClass = tag.startsWithFunctionOrClass;\n    }\n    return state;\n  }\n\n  reduceTemplateElement(node) {\n    return this.t(node.rawValue);\n  }\n\n  reduceThisExpression(/* node */) {\n    return this.t('this');\n  }\n\n  reduceThrowStatement(node, { expression }) {\n    return seq(this.t('throw'), this.sep(Sep.THROW), expression, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceTryCatchStatement(node, { body, catchClause }) {\n    return seq(this.t('try'), this.sep(Sep.AFTER_TRY), body, this.sep(Sep.BEFORE_CATCH), catchClause, this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceTryFinallyStatement(node, { body, catchClause, finalizer }) {\n    return seq(this.t('try'), this.sep(Sep.AFTER_TRY), body, catchClause ? seq(this.sep(Sep.BEFORE_CATCH), catchClause) : empty(), this.sep(Sep.BEFORE_FINALLY), this.t('finally'), this.sep(Sep.AFTER_FINALLY), finalizer, this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceYieldExpression(node, { expression }) {\n    if (node.expression == null) return this.t('yield');\n    return objectAssign(seq(this.t('yield'), this.sep(Sep.YIELD), this.p(node.expression, getPrecedence(node), expression)), { containsIn: expression.containsIn });\n  }\n\n  reduceYieldGeneratorExpression(node, { expression }) {\n    return objectAssign(seq(this.t('yield'), this.sep(Sep.BEFORE_YIELD_STAR), this.t('*'), this.sep(Sep.AFTER_YIELD_STAR), this.p(node.expression, getPrecedence(node), expression)), { containsIn: expression.containsIn });\n  }\n\n  reduceDirective(node) {\n    let delim = node.rawValue.match(/(^|[^\\\\])(\\\\\\\\)*\"/) ? '\\'' : '\"';\n    return seq(this.t(delim + node.rawValue + delim), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceVariableDeclaration(node, { declarators }) {\n    return seq(this.t(node.kind), this.sep(Sep.VARIABLE_DECLARATION), this.commaSep(declarators, Sep.DECLARATORS_BEFORE_COMMA, Sep.DECLARATORS_AFTER_COMMA));\n  }\n\n  reduceVariableDeclarationStatement(node, { declaration }) {\n    return seq(declaration, this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceVariableDeclarator(node, { binding, init }) {\n    let containsIn = init && init.containsIn && !init.containsGroup;\n    if (init) {\n      if (init.containsGroup) {\n        init = this.paren(init, Sep.EXPRESSION_PAREN_BEFORE, Sep.EXPRESSION_PAREN_AFTER);\n      } else {\n        init = markContainsIn(init);\n      }\n    }\n    return objectAssign(init == null ? binding : seq(binding, this.sep(Sep.BEFORE_INIT_EQUALS), this.t('='), this.sep(Sep.AFTER_INIT_EQUALS), init), { containsIn });\n  }\n\n  reduceWhileStatement(node, { test, body }) {\n    return objectAssign(seq(this.t('while'), this.sep(Sep.AFTER_WHILE), this.paren(test, Sep.WHILE_TEST_PAREN_BEFORE, Sep.WHILE_TEST_PAREN_AFTER), this.sep(Sep.BEFORE_WHILE_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))), { endsWithMissingElse: body.endsWithMissingElse });\n  }\n\n  reduceWithStatement(node, { object, body }) {\n    return objectAssign(\n      seq(this.t('with'), this.sep(Sep.AFTER_WITH), this.paren(object, Sep.WITH_PAREN_BEFORE, Sep.WITH_PAREN_AFTER), this.sep(Sep.BEFORE_WITH_BODY), body, this.sep(Sep.AFTER_STATEMENT(node))),\n      { endsWithMissingElse: body.endsWithMissingElse });\n  }\n}\n\n\nfunction withoutTrailingLinebreak(state) {\n  if (state && state instanceof Seq) {\n    let lastChild = state.children[state.children.length - 1];\n    /* istanbul ignore next */\n    while (lastChild instanceof Empty) {\n      state.children.pop();\n      lastChild = state.children[state.children.length - 1];\n    }\n    /* istanbul ignore else */\n    if (lastChild instanceof Seq) {\n      withoutTrailingLinebreak(lastChild);\n    } else if (lastChild instanceof Linebreak) {\n      state.children.pop();\n    }\n  }\n  return state;\n}\n\nfunction indent(rep, includingFinal) {\n  let finalLinebreak;\n  function indentNode(node) {\n    if (node instanceof Linebreak) {\n      finalLinebreak = node;\n      ++node.indentation;\n    }\n  }\n  rep.forEach(indentNode);\n  if (!includingFinal) {\n    --finalLinebreak.indentation;\n  }\n  return rep;\n}\n\nclass FormattedCodeGen extends ExtensibleCodeGen {\n  parenToAvoidBeingDirective(element, original) {\n    if (element && element.type === 'ExpressionStatement' && element.expression.type === 'LiteralStringExpression') {\n      return seq(this.paren(original.children[0], Sep.PAREN_AVOIDING_DIRECTIVE_BEFORE, Sep.PAREN_AVOIDING_DIRECTIVE_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(element)));\n    }\n    return original;\n  }\n\n  brace(rep, node) {\n    if (isEmpty(rep)) {\n      return this.t('{}');\n    }\n\n    switch (node.type) {\n      case 'ObjectAssignmentTarget':\n      case 'ObjectBinding':\n      case 'Import':\n      case 'ExportFrom':\n      case 'ExportLocals':\n      case 'ObjectExpression':\n        return new Brace(rep);\n    }\n\n    rep = seq(new Linebreak, rep);\n    indent(rep, false);\n    return new Brace(rep);\n  }\n\n  reduceDoWhileStatement(node, { body, test }) {\n    return seq(this.t('do'), this.sep(Sep.AFTER_DO), withoutTrailingLinebreak(body), this.sep(Sep.BEFORE_DOWHILE_WHILE), this.t('while'), this.sep(Sep.AFTER_DOWHILE_WHILE), this.paren(test, Sep.DO_WHILE_TEST_PAREN_BEFORE, Sep.DO_WHILE_TEST_PAREN_AFTER), this.semiOp(), this.sep(Sep.AFTER_STATEMENT(node)));\n  }\n\n  reduceIfStatement(node, { test, consequent, alternate }) {\n    if (alternate && consequent.endsWithMissingElse) {\n      consequent = this.brace(consequent, node);\n    }\n    return objectAssign(\n      seq(this.t('if'), this.sep(Sep.AFTER_IF),\n        this.paren(test, Sep.IF_PAREN_BEFORE, Sep.IF_PAREN_AFTER), this.sep(Sep.AFTER_IF_TEST),\n        withoutTrailingLinebreak(consequent),\n        alternate ? seq(this.sep(Sep.BEFORE_ELSE), this.t('else'), this.sep(Sep.AFTER_ELSE), withoutTrailingLinebreak(alternate)) : empty(),\n        this.sep(Sep.AFTER_STATEMENT(node))),\n      { endsWithMissingElse: alternate ? alternate.endsWithMissingElse : true });\n  }\n\n  reduceSwitchCase(node, { test, consequent }) {\n    consequent = indent(withoutTrailingLinebreak(seq(this.sep(Sep.BEFORE_CASE_BODY), ...consequent)), true);\n    return seq(this.t('case'), this.sep(Sep.BEFORE_CASE_TEST), test, this.sep(Sep.AFTER_CASE_TEST), this.t(':'),\n      consequent, this.sep(Sep.AFTER_CASE_BODY));\n  }\n\n  reduceSwitchDefault(node, { consequent }) {\n    consequent = indent(withoutTrailingLinebreak(seq(this.sep(Sep.BEFORE_CASE_BODY), ...consequent)), true);\n    return seq(this.t('default'), this.sep(Sep.DEFAULT), this.t(':'),\n      consequent, this.sep(Sep.AFTER_DEFAULT_BODY));\n  }\n\n  sep(separator) {\n    switch (separator.type) {\n      case 'AWAIT':\n      case 'AFTER_FORAWAIT_AWAIT':\n      case 'ARRAY_AFTER_COMMA':\n      case 'OBJECT_AFTER_COMMA':\n      case 'ARGS_AFTER_COMMA':\n      case 'PARAMETER_AFTER_COMMA':\n      case 'DECLARATORS_AFTER_COMMA':\n      case 'NAMED_IMPORT_AFTER_COMMA':\n      case 'IMPORT_AFTER_COMMA':\n      case 'BEFORE_DEFAULT_EQUALS':\n      case 'AFTER_DEFAULT_EQUALS':\n      case 'AFTER_PROP':\n      case 'BEFORE_JUMP_LABEL':\n      case 'BEFORE_CATCH_BINDING':\n      case 'AFTER_CATCH_BINDING':\n      case 'BEFORE_CLASS_NAME':\n      case 'BEFORE_EXTENDS':\n      case 'AFTER_EXTENDS':\n      case 'BEFORE_CLASS_DECLARATION_ELEMENTS':\n      case 'BEFORE_CLASS_EXPRESSION_ELEMENTS':\n      case 'AFTER_STATIC':\n      case 'BEFORE_TERNARY_QUESTION':\n      case 'AFTER_TERNARY_QUESTION':\n      case 'BEFORE_TERNARY_COLON':\n      case 'AFTER_TERNARY_COLON':\n      case 'AFTER_DO':\n      case 'BEFORE_DOWHILE_WHILE':\n      case 'AFTER_DOWHILE_WHILE':\n      case 'AFTER_FORIN_FOR':\n      case 'BEFORE_FORIN_IN':\n      case 'BEFORE_FORIN_BODY':\n      case 'BEFORE_FOROF_OF':\n      case 'AFTER_FOROF_FOR':\n      case 'BEFORE_FOROF_BODY':\n      case 'AFTER_FOR_FOR':\n      case 'BEFORE_FOR_TEST':\n      case 'BEFORE_FOR_UPDATE':\n      case 'BEFORE_FOR_BODY':\n      case 'BEFORE_FUNCTION_DECLARATION_BODY':\n      case 'BEFORE_FUNCTION_EXPRESSION_BODY':\n      case 'BEFORE_ARROW':\n      case 'AFTER_ARROW':\n      case 'BEFORE_ARROW_ASYNC_PARAMS':\n      case 'AFTER_GET':\n      case 'BEFORE_GET_BODY':\n      case 'AFTER_IF':\n      case 'AFTER_IF_TEST':\n      case 'BEFORE_ELSE':\n      case 'AFTER_ELSE':\n      case 'BEFORE_IMPORT_BINDINGS':\n      case 'BEFORE_IMPORT_MODULE':\n      case 'AFTER_IMPORT_BINDINGS':\n      case 'AFTER_FROM':\n      case 'BEFORE_IMPORT_NAMESPACE':\n      case 'BEFORE_IMPORT_STAR':\n      case 'AFTER_IMPORT_STAR':\n      case 'AFTER_NAMESPACE_BINDING':\n      case 'BEFORE_IMPORT_AS':\n      case 'AFTER_IMPORT_AS':\n      case 'EXPORTS_AFTER_COMMA':\n      case 'BEFORE_EXPORT_STAR':\n      case 'AFTER_EXPORT_STAR':\n      case 'BEFORE_EXPORT_BINDINGS':\n      case 'AFTER_EXPORT_FROM_BINDINGS':\n      case 'AFTER_EXPORT':\n      case 'AFTER_EXPORT_DEFAULT':\n      case 'BEFORE_EXPORT_AS':\n      case 'AFTER_EXPORT_AS':\n      case 'AFTER_LABEL_COLON':\n      case 'AFTER_METHOD_ASYNC':\n      case 'BEFORE_METHOD_BODY':\n      case 'AFTER_NEW':\n      case 'RETURN':\n      case 'AFTER_SET':\n      case 'BEFORE_SET_BODY':\n      case 'BEFORE_SET_PARAMS':\n      case 'BEFORE_CASE_TEST':\n      case 'BEFORE_SWITCH_DISCRIM':\n      case 'BEFORE_SWITCH_BODY':\n      case 'THROW':\n      case 'AFTER_TRY':\n      case 'BEFORE_CATCH':\n      case 'BEFORE_FINALLY':\n      case 'AFTER_FINALLY':\n      case 'VARIABLE_DECLARATION':\n      case 'YIELD':\n      case 'AFTER_YIELD_STAR':\n      case 'BEFORE_INIT_EQUALS':\n      case 'AFTER_INIT_EQUALS':\n      case 'AFTER_WHILE':\n      case 'BEFORE_WHILE_BODY':\n      case 'AFTER_WITH':\n      case 'BEFORE_WITH_BODY':\n      case 'BEFORE_FUNCTION_NAME':\n      case 'AFTER_BINOP':\n      case 'BEFORE_ASSIGN_OP':\n      case 'AFTER_ASSIGN_OP':\n        return this.t(' ');\n      case 'AFTER_STATEMENT':\n        switch (separator.node.type) {\n          case 'ForInStatement':\n          case 'ForOfStatement':\n          case 'ForStatement':\n          case 'WhileStatement':\n          case 'WithStatement':\n            return empty(); // because those already end with an AFTER_STATEMENT\n          default:\n            return new Linebreak;\n        }\n      case 'AFTER_CLASS_ELEMENT':\n      case 'BEFORE_CASE_BODY':\n      case 'AFTER_CASE_BODY':\n      case 'AFTER_DEFAULT_BODY':\n        return new Linebreak;\n      case 'BEFORE_BINOP':\n        return separator.op === ',' ? empty() : this.t(' ');\n      case 'UNARY':\n        return separator.op === 'delete' || separator.op === 'void' || separator.op === 'typeof' ? this.t(' ') : empty();\n      default:\n        return empty();\n    }\n  }\n}\n\nmodule.exports = {\n  Sep,\n  ExtensibleCodeGen,\n  FormattedCodeGen,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}