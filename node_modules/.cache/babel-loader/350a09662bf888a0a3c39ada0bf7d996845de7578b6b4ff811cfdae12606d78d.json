{"ast":null,"code":"// Generated by generate-monoidal-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Shift = require('shift-ast');\nmodule.exports = class MonoidalReducer {\n  constructor(monoid) {\n    let identity = monoid.empty();\n    this.identity = identity;\n    let concatThunk;\n    if (monoid.prototype && typeof monoid.prototype.concatThunk === 'function') {\n      concatThunk = Function.prototype.call.bind(monoid.prototype.concatThunk);\n    } else if (typeof monoid.concatThunk === 'function') {\n      concatThunk = monoid.concatThunk;\n    } else {\n      let concat;\n      if (monoid.prototype && typeof monoid.prototype.concat === 'function') {\n        concat = Function.prototype.call.bind(monoid.prototype.concat);\n      } else if (typeof monoid.concat === 'function') {\n        concat = monoid.concat;\n      } else {\n        throw new TypeError('Monoid must provide a `concatThunk` or `concat` method');\n      }\n      if (typeof monoid.isAbsorbing === 'function') {\n        let isAbsorbing = monoid.isAbsorbing;\n        concatThunk = (a, b) => isAbsorbing(a) ? a : concat(a, b());\n      } else {\n        concatThunk = (a, b) => concat(a, b());\n      }\n    }\n    this.append = (...args) => args.reduce(concatThunk, identity);\n  }\n  reduceArrayAssignmentTarget(node, {\n    elements,\n    rest\n  }) {\n    return this.append(...elements.filter(n => n != null), rest == null ? () => this.identity : rest);\n  }\n  reduceArrayBinding(node, {\n    elements,\n    rest\n  }) {\n    return this.append(...elements.filter(n => n != null), rest == null ? () => this.identity : rest);\n  }\n  reduceArrayExpression(node, {\n    elements\n  }) {\n    return this.append(...elements.filter(n => n != null));\n  }\n  reduceArrowExpression(node, {\n    params,\n    body\n  }) {\n    return this.append(params, body);\n  }\n  reduceAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    return this.append(binding, expression);\n  }\n  reduceAssignmentTargetIdentifier(node) {\n    return this.identity;\n  }\n  reduceAssignmentTargetPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    return this.append(binding, init == null ? () => this.identity : init);\n  }\n  reduceAssignmentTargetPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    return this.append(name, binding);\n  }\n  reduceAssignmentTargetWithDefault(node, {\n    binding,\n    init\n  }) {\n    return this.append(binding, init);\n  }\n  reduceAwaitExpression(node, {\n    expression\n  }) {\n    return expression();\n  }\n  reduceBinaryExpression(node, {\n    left,\n    right\n  }) {\n    return this.append(left, right);\n  }\n  reduceBindingIdentifier(node) {\n    return this.identity;\n  }\n  reduceBindingPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    return this.append(binding, init == null ? () => this.identity : init);\n  }\n  reduceBindingPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    return this.append(name, binding);\n  }\n  reduceBindingWithDefault(node, {\n    binding,\n    init\n  }) {\n    return this.append(binding, init);\n  }\n  reduceBlock(node, {\n    statements\n  }) {\n    return this.append(...statements);\n  }\n  reduceBlockStatement(node, {\n    block\n  }) {\n    return block();\n  }\n  reduceBreakStatement(node) {\n    return this.identity;\n  }\n  reduceCallExpression(node, {\n    callee,\n    arguments: _arguments\n  }) {\n    return this.append(callee, ..._arguments);\n  }\n  reduceCatchClause(node, {\n    binding,\n    body\n  }) {\n    return this.append(binding == null ? () => this.identity : binding, body);\n  }\n  reduceClassDeclaration(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    return this.append(name, _super == null ? () => this.identity : _super, ...elements);\n  }\n  reduceClassElement(node, {\n    method\n  }) {\n    return method();\n  }\n  reduceClassExpression(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    return this.append(name == null ? () => this.identity : name, _super == null ? () => this.identity : _super, ...elements);\n  }\n  reduceCompoundAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    return this.append(binding, expression);\n  }\n  reduceComputedMemberAssignmentTarget(node, {\n    object,\n    expression\n  }) {\n    return this.append(object, expression);\n  }\n  reduceComputedMemberExpression(node, {\n    object,\n    expression\n  }) {\n    return this.append(object, expression);\n  }\n  reduceComputedPropertyName(node, {\n    expression\n  }) {\n    return expression();\n  }\n  reduceConditionalExpression(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    return this.append(test, consequent, alternate);\n  }\n  reduceContinueStatement(node) {\n    return this.identity;\n  }\n  reduceDataProperty(node, {\n    name,\n    expression\n  }) {\n    return this.append(name, expression);\n  }\n  reduceDebuggerStatement(node) {\n    return this.identity;\n  }\n  reduceDirective(node) {\n    return this.identity;\n  }\n  reduceDoWhileStatement(node, {\n    body,\n    test\n  }) {\n    return this.append(body, test);\n  }\n  reduceEmptyStatement(node) {\n    return this.identity;\n  }\n  reduceExport(node, {\n    declaration\n  }) {\n    return declaration();\n  }\n  reduceExportAllFrom(node) {\n    return this.identity;\n  }\n  reduceExportDefault(node, {\n    body\n  }) {\n    return body();\n  }\n  reduceExportFrom(node, {\n    namedExports\n  }) {\n    return this.append(...namedExports);\n  }\n  reduceExportFromSpecifier(node) {\n    return this.identity;\n  }\n  reduceExportLocalSpecifier(node, {\n    name\n  }) {\n    return name();\n  }\n  reduceExportLocals(node, {\n    namedExports\n  }) {\n    return this.append(...namedExports);\n  }\n  reduceExpressionStatement(node, {\n    expression\n  }) {\n    return expression();\n  }\n  reduceForAwaitStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    return this.append(left, right, body);\n  }\n  reduceForInStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    return this.append(left, right, body);\n  }\n  reduceForOfStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    return this.append(left, right, body);\n  }\n  reduceForStatement(node, {\n    init,\n    test,\n    update,\n    body\n  }) {\n    return this.append(init == null ? () => this.identity : init, test == null ? () => this.identity : test, update == null ? () => this.identity : update, body);\n  }\n  reduceFormalParameters(node, {\n    items,\n    rest\n  }) {\n    return this.append(...items, rest == null ? () => this.identity : rest);\n  }\n  reduceFunctionBody(node, {\n    directives,\n    statements\n  }) {\n    return this.append(...directives, ...statements);\n  }\n  reduceFunctionDeclaration(node, {\n    name,\n    params,\n    body\n  }) {\n    return this.append(name, params, body);\n  }\n  reduceFunctionExpression(node, {\n    name,\n    params,\n    body\n  }) {\n    return this.append(name == null ? () => this.identity : name, params, body);\n  }\n  reduceGetter(node, {\n    name,\n    body\n  }) {\n    return this.append(name, body);\n  }\n  reduceIdentifierExpression(node) {\n    return this.identity;\n  }\n  reduceIfStatement(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    return this.append(test, consequent, alternate == null ? () => this.identity : alternate);\n  }\n  reduceImport(node, {\n    defaultBinding,\n    namedImports\n  }) {\n    return this.append(defaultBinding == null ? () => this.identity : defaultBinding, ...namedImports);\n  }\n  reduceImportNamespace(node, {\n    defaultBinding,\n    namespaceBinding\n  }) {\n    return this.append(defaultBinding == null ? () => this.identity : defaultBinding, namespaceBinding);\n  }\n  reduceImportSpecifier(node, {\n    binding\n  }) {\n    return binding();\n  }\n  reduceLabeledStatement(node, {\n    body\n  }) {\n    return body();\n  }\n  reduceLiteralBooleanExpression(node) {\n    return this.identity;\n  }\n  reduceLiteralInfinityExpression(node) {\n    return this.identity;\n  }\n  reduceLiteralNullExpression(node) {\n    return this.identity;\n  }\n  reduceLiteralNumericExpression(node) {\n    return this.identity;\n  }\n  reduceLiteralRegExpExpression(node) {\n    return this.identity;\n  }\n  reduceLiteralStringExpression(node) {\n    return this.identity;\n  }\n  reduceMethod(node, {\n    name,\n    params,\n    body\n  }) {\n    return this.append(name, params, body);\n  }\n  reduceModule(node, {\n    directives,\n    items\n  }) {\n    return this.append(...directives, ...items);\n  }\n  reduceNewExpression(node, {\n    callee,\n    arguments: _arguments\n  }) {\n    return this.append(callee, ..._arguments);\n  }\n  reduceNewTargetExpression(node) {\n    return this.identity;\n  }\n  reduceObjectAssignmentTarget(node, {\n    properties,\n    rest\n  }) {\n    return this.append(...properties, rest == null ? () => this.identity : rest);\n  }\n  reduceObjectBinding(node, {\n    properties,\n    rest\n  }) {\n    return this.append(...properties, rest == null ? () => this.identity : rest);\n  }\n  reduceObjectExpression(node, {\n    properties\n  }) {\n    return this.append(...properties);\n  }\n  reduceReturnStatement(node, {\n    expression\n  }) {\n    return expression == null ? this.identity : expression();\n  }\n  reduceScript(node, {\n    directives,\n    statements\n  }) {\n    return this.append(...directives, ...statements);\n  }\n  reduceSetter(node, {\n    name,\n    param,\n    body\n  }) {\n    return this.append(name, param, body);\n  }\n  reduceShorthandProperty(node, {\n    name\n  }) {\n    return name();\n  }\n  reduceSpreadElement(node, {\n    expression\n  }) {\n    return expression();\n  }\n  reduceSpreadProperty(node, {\n    expression\n  }) {\n    return expression();\n  }\n  reduceStaticMemberAssignmentTarget(node, {\n    object\n  }) {\n    return object();\n  }\n  reduceStaticMemberExpression(node, {\n    object\n  }) {\n    return object();\n  }\n  reduceStaticPropertyName(node) {\n    return this.identity;\n  }\n  reduceSuper(node) {\n    return this.identity;\n  }\n  reduceSwitchCase(node, {\n    test,\n    consequent\n  }) {\n    return this.append(test, ...consequent);\n  }\n  reduceSwitchDefault(node, {\n    consequent\n  }) {\n    return this.append(...consequent);\n  }\n  reduceSwitchStatement(node, {\n    discriminant,\n    cases\n  }) {\n    return this.append(discriminant, ...cases);\n  }\n  reduceSwitchStatementWithDefault(node, {\n    discriminant,\n    preDefaultCases,\n    defaultCase,\n    postDefaultCases\n  }) {\n    return this.append(discriminant, ...preDefaultCases, defaultCase, ...postDefaultCases);\n  }\n  reduceTemplateElement(node) {\n    return this.identity;\n  }\n  reduceTemplateExpression(node, {\n    tag,\n    elements\n  }) {\n    return this.append(tag == null ? () => this.identity : tag, ...elements);\n  }\n  reduceThisExpression(node) {\n    return this.identity;\n  }\n  reduceThrowStatement(node, {\n    expression\n  }) {\n    return expression();\n  }\n  reduceTryCatchStatement(node, {\n    body,\n    catchClause\n  }) {\n    return this.append(body, catchClause);\n  }\n  reduceTryFinallyStatement(node, {\n    body,\n    catchClause,\n    finalizer\n  }) {\n    return this.append(body, catchClause == null ? () => this.identity : catchClause, finalizer);\n  }\n  reduceUnaryExpression(node, {\n    operand\n  }) {\n    return operand();\n  }\n  reduceUpdateExpression(node, {\n    operand\n  }) {\n    return operand();\n  }\n  reduceVariableDeclaration(node, {\n    declarators\n  }) {\n    return this.append(...declarators);\n  }\n  reduceVariableDeclarationStatement(node, {\n    declaration\n  }) {\n    return declaration();\n  }\n  reduceVariableDeclarator(node, {\n    binding,\n    init\n  }) {\n    return this.append(binding, init == null ? () => this.identity : init);\n  }\n  reduceWhileStatement(node, {\n    test,\n    body\n  }) {\n    return this.append(test, body);\n  }\n  reduceWithStatement(node, {\n    object,\n    body\n  }) {\n    return this.append(object, body);\n  }\n  reduceYieldExpression(node, {\n    expression\n  }) {\n    return expression == null ? this.identity : expression();\n  }\n  reduceYieldGeneratorExpression(node, {\n    expression\n  }) {\n    return expression();\n  }\n};","map":{"version":3,"names":["Shift","require","module","exports","MonoidalReducer","constructor","monoid","identity","empty","concatThunk","prototype","Function","call","bind","concat","TypeError","isAbsorbing","a","b","append","args","reduce","reduceArrayAssignmentTarget","node","elements","rest","filter","n","reduceArrayBinding","reduceArrayExpression","reduceArrowExpression","params","body","reduceAssignmentExpression","binding","expression","reduceAssignmentTargetIdentifier","reduceAssignmentTargetPropertyIdentifier","init","reduceAssignmentTargetPropertyProperty","name","reduceAssignmentTargetWithDefault","reduceAwaitExpression","reduceBinaryExpression","left","right","reduceBindingIdentifier","reduceBindingPropertyIdentifier","reduceBindingPropertyProperty","reduceBindingWithDefault","reduceBlock","statements","reduceBlockStatement","block","reduceBreakStatement","reduceCallExpression","callee","arguments","_arguments","reduceCatchClause","reduceClassDeclaration","super","_super","reduceClassElement","method","reduceClassExpression","reduceCompoundAssignmentExpression","reduceComputedMemberAssignmentTarget","object","reduceComputedMemberExpression","reduceComputedPropertyName","reduceConditionalExpression","test","consequent","alternate","reduceContinueStatement","reduceDataProperty","reduceDebuggerStatement","reduceDirective","reduceDoWhileStatement","reduceEmptyStatement","reduceExport","declaration","reduceExportAllFrom","reduceExportDefault","reduceExportFrom","namedExports","reduceExportFromSpecifier","reduceExportLocalSpecifier","reduceExportLocals","reduceExpressionStatement","reduceForAwaitStatement","reduceForInStatement","reduceForOfStatement","reduceForStatement","update","reduceFormalParameters","items","reduceFunctionBody","directives","reduceFunctionDeclaration","reduceFunctionExpression","reduceGetter","reduceIdentifierExpression","reduceIfStatement","reduceImport","defaultBinding","namedImports","reduceImportNamespace","namespaceBinding","reduceImportSpecifier","reduceLabeledStatement","reduceLiteralBooleanExpression","reduceLiteralInfinityExpression","reduceLiteralNullExpression","reduceLiteralNumericExpression","reduceLiteralRegExpExpression","reduceLiteralStringExpression","reduceMethod","reduceModule","reduceNewExpression","reduceNewTargetExpression","reduceObjectAssignmentTarget","properties","reduceObjectBinding","reduceObjectExpression","reduceReturnStatement","reduceScript","reduceSetter","param","reduceShorthandProperty","reduceSpreadElement","reduceSpreadProperty","reduceStaticMemberAssignmentTarget","reduceStaticMemberExpression","reduceStaticPropertyName","reduceSuper","reduceSwitchCase","reduceSwitchDefault","reduceSwitchStatement","discriminant","cases","reduceSwitchStatementWithDefault","preDefaultCases","defaultCase","postDefaultCases","reduceTemplateElement","reduceTemplateExpression","tag","reduceThisExpression","reduceThrowStatement","reduceTryCatchStatement","catchClause","reduceTryFinallyStatement","finalizer","reduceUnaryExpression","operand","reduceUpdateExpression","reduceVariableDeclaration","declarators","reduceVariableDeclarationStatement","reduceVariableDeclarator","reduceWhileStatement","reduceWithStatement","reduceYieldExpression","reduceYieldGeneratorExpression"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-reducer/gen/thunked-monoidal-reducer.js"],"sourcesContent":["// Generated by generate-monoidal-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Shift = require('shift-ast');\n\nmodule.exports = class MonoidalReducer {\n  constructor(monoid) {\n    let identity = monoid.empty();\n    this.identity = identity;\n\n    let concatThunk;\n    if (monoid.prototype && typeof monoid.prototype.concatThunk === 'function') {\n      concatThunk = Function.prototype.call.bind(monoid.prototype.concatThunk);\n    } else if (typeof monoid.concatThunk === 'function') {\n      concatThunk = monoid.concatThunk;\n    } else {\n      let concat;\n      if (monoid.prototype && typeof monoid.prototype.concat === 'function') {\n        concat = Function.prototype.call.bind(monoid.prototype.concat);\n      } else if (typeof monoid.concat === 'function') {\n        concat = monoid.concat;\n      } else {\n        throw new TypeError('Monoid must provide a `concatThunk` or `concat` method');\n      }\n      if (typeof monoid.isAbsorbing === 'function') {\n        let isAbsorbing = monoid.isAbsorbing;\n        concatThunk = (a, b) => isAbsorbing(a) ? a : concat(a, b());\n      } else {\n        concatThunk = (a, b) => concat(a, b());\n      }\n    }\n    this.append = (...args) => args.reduce(concatThunk, identity);\n  }\n\n  reduceArrayAssignmentTarget(node, { elements, rest }) {\n    return this.append(...elements.filter(n => n != null), rest == null ? () => this.identity : rest);\n  }\n\n  reduceArrayBinding(node, { elements, rest }) {\n    return this.append(...elements.filter(n => n != null), rest == null ? () => this.identity : rest);\n  }\n\n  reduceArrayExpression(node, { elements }) {\n    return this.append(...elements.filter(n => n != null));\n  }\n\n  reduceArrowExpression(node, { params, body }) {\n    return this.append(params, body);\n  }\n\n  reduceAssignmentExpression(node, { binding, expression }) {\n    return this.append(binding, expression);\n  }\n\n  reduceAssignmentTargetIdentifier(node) {\n    return this.identity;\n  }\n\n  reduceAssignmentTargetPropertyIdentifier(node, { binding, init }) {\n    return this.append(binding, init == null ? () => this.identity : init);\n  }\n\n  reduceAssignmentTargetPropertyProperty(node, { name, binding }) {\n    return this.append(name, binding);\n  }\n\n  reduceAssignmentTargetWithDefault(node, { binding, init }) {\n    return this.append(binding, init);\n  }\n\n  reduceAwaitExpression(node, { expression }) {\n    return expression();\n  }\n\n  reduceBinaryExpression(node, { left, right }) {\n    return this.append(left, right);\n  }\n\n  reduceBindingIdentifier(node) {\n    return this.identity;\n  }\n\n  reduceBindingPropertyIdentifier(node, { binding, init }) {\n    return this.append(binding, init == null ? () => this.identity : init);\n  }\n\n  reduceBindingPropertyProperty(node, { name, binding }) {\n    return this.append(name, binding);\n  }\n\n  reduceBindingWithDefault(node, { binding, init }) {\n    return this.append(binding, init);\n  }\n\n  reduceBlock(node, { statements }) {\n    return this.append(...statements);\n  }\n\n  reduceBlockStatement(node, { block }) {\n    return block();\n  }\n\n  reduceBreakStatement(node) {\n    return this.identity;\n  }\n\n  reduceCallExpression(node, { callee, arguments: _arguments }) {\n    return this.append(callee, ..._arguments);\n  }\n\n  reduceCatchClause(node, { binding, body }) {\n    return this.append(binding == null ? () => this.identity : binding, body);\n  }\n\n  reduceClassDeclaration(node, { name, super: _super, elements }) {\n    return this.append(name, _super == null ? () => this.identity : _super, ...elements);\n  }\n\n  reduceClassElement(node, { method }) {\n    return method();\n  }\n\n  reduceClassExpression(node, { name, super: _super, elements }) {\n    return this.append(name == null ? () => this.identity : name, _super == null ? () => this.identity : _super, ...elements);\n  }\n\n  reduceCompoundAssignmentExpression(node, { binding, expression }) {\n    return this.append(binding, expression);\n  }\n\n  reduceComputedMemberAssignmentTarget(node, { object, expression }) {\n    return this.append(object, expression);\n  }\n\n  reduceComputedMemberExpression(node, { object, expression }) {\n    return this.append(object, expression);\n  }\n\n  reduceComputedPropertyName(node, { expression }) {\n    return expression();\n  }\n\n  reduceConditionalExpression(node, { test, consequent, alternate }) {\n    return this.append(test, consequent, alternate);\n  }\n\n  reduceContinueStatement(node) {\n    return this.identity;\n  }\n\n  reduceDataProperty(node, { name, expression }) {\n    return this.append(name, expression);\n  }\n\n  reduceDebuggerStatement(node) {\n    return this.identity;\n  }\n\n  reduceDirective(node) {\n    return this.identity;\n  }\n\n  reduceDoWhileStatement(node, { body, test }) {\n    return this.append(body, test);\n  }\n\n  reduceEmptyStatement(node) {\n    return this.identity;\n  }\n\n  reduceExport(node, { declaration }) {\n    return declaration();\n  }\n\n  reduceExportAllFrom(node) {\n    return this.identity;\n  }\n\n  reduceExportDefault(node, { body }) {\n    return body();\n  }\n\n  reduceExportFrom(node, { namedExports }) {\n    return this.append(...namedExports);\n  }\n\n  reduceExportFromSpecifier(node) {\n    return this.identity;\n  }\n\n  reduceExportLocalSpecifier(node, { name }) {\n    return name();\n  }\n\n  reduceExportLocals(node, { namedExports }) {\n    return this.append(...namedExports);\n  }\n\n  reduceExpressionStatement(node, { expression }) {\n    return expression();\n  }\n\n  reduceForAwaitStatement(node, { left, right, body }) {\n    return this.append(left, right, body);\n  }\n\n  reduceForInStatement(node, { left, right, body }) {\n    return this.append(left, right, body);\n  }\n\n  reduceForOfStatement(node, { left, right, body }) {\n    return this.append(left, right, body);\n  }\n\n  reduceForStatement(node, { init, test, update, body }) {\n    return this.append(init == null ? () => this.identity : init, test == null ? () => this.identity : test, update == null ? () => this.identity : update, body);\n  }\n\n  reduceFormalParameters(node, { items, rest }) {\n    return this.append(...items, rest == null ? () => this.identity : rest);\n  }\n\n  reduceFunctionBody(node, { directives, statements }) {\n    return this.append(...directives, ...statements);\n  }\n\n  reduceFunctionDeclaration(node, { name, params, body }) {\n    return this.append(name, params, body);\n  }\n\n  reduceFunctionExpression(node, { name, params, body }) {\n    return this.append(name == null ? () => this.identity : name, params, body);\n  }\n\n  reduceGetter(node, { name, body }) {\n    return this.append(name, body);\n  }\n\n  reduceIdentifierExpression(node) {\n    return this.identity;\n  }\n\n  reduceIfStatement(node, { test, consequent, alternate }) {\n    return this.append(test, consequent, alternate == null ? () => this.identity : alternate);\n  }\n\n  reduceImport(node, { defaultBinding, namedImports }) {\n    return this.append(defaultBinding == null ? () => this.identity : defaultBinding, ...namedImports);\n  }\n\n  reduceImportNamespace(node, { defaultBinding, namespaceBinding }) {\n    return this.append(defaultBinding == null ? () => this.identity : defaultBinding, namespaceBinding);\n  }\n\n  reduceImportSpecifier(node, { binding }) {\n    return binding();\n  }\n\n  reduceLabeledStatement(node, { body }) {\n    return body();\n  }\n\n  reduceLiteralBooleanExpression(node) {\n    return this.identity;\n  }\n\n  reduceLiteralInfinityExpression(node) {\n    return this.identity;\n  }\n\n  reduceLiteralNullExpression(node) {\n    return this.identity;\n  }\n\n  reduceLiteralNumericExpression(node) {\n    return this.identity;\n  }\n\n  reduceLiteralRegExpExpression(node) {\n    return this.identity;\n  }\n\n  reduceLiteralStringExpression(node) {\n    return this.identity;\n  }\n\n  reduceMethod(node, { name, params, body }) {\n    return this.append(name, params, body);\n  }\n\n  reduceModule(node, { directives, items }) {\n    return this.append(...directives, ...items);\n  }\n\n  reduceNewExpression(node, { callee, arguments: _arguments }) {\n    return this.append(callee, ..._arguments);\n  }\n\n  reduceNewTargetExpression(node) {\n    return this.identity;\n  }\n\n  reduceObjectAssignmentTarget(node, { properties, rest }) {\n    return this.append(...properties, rest == null ? () => this.identity : rest);\n  }\n\n  reduceObjectBinding(node, { properties, rest }) {\n    return this.append(...properties, rest == null ? () => this.identity : rest);\n  }\n\n  reduceObjectExpression(node, { properties }) {\n    return this.append(...properties);\n  }\n\n  reduceReturnStatement(node, { expression }) {\n    return expression == null ? this.identity : expression();\n  }\n\n  reduceScript(node, { directives, statements }) {\n    return this.append(...directives, ...statements);\n  }\n\n  reduceSetter(node, { name, param, body }) {\n    return this.append(name, param, body);\n  }\n\n  reduceShorthandProperty(node, { name }) {\n    return name();\n  }\n\n  reduceSpreadElement(node, { expression }) {\n    return expression();\n  }\n\n  reduceSpreadProperty(node, { expression }) {\n    return expression();\n  }\n\n  reduceStaticMemberAssignmentTarget(node, { object }) {\n    return object();\n  }\n\n  reduceStaticMemberExpression(node, { object }) {\n    return object();\n  }\n\n  reduceStaticPropertyName(node) {\n    return this.identity;\n  }\n\n  reduceSuper(node) {\n    return this.identity;\n  }\n\n  reduceSwitchCase(node, { test, consequent }) {\n    return this.append(test, ...consequent);\n  }\n\n  reduceSwitchDefault(node, { consequent }) {\n    return this.append(...consequent);\n  }\n\n  reduceSwitchStatement(node, { discriminant, cases }) {\n    return this.append(discriminant, ...cases);\n  }\n\n  reduceSwitchStatementWithDefault(node, { discriminant, preDefaultCases, defaultCase, postDefaultCases }) {\n    return this.append(discriminant, ...preDefaultCases, defaultCase, ...postDefaultCases);\n  }\n\n  reduceTemplateElement(node) {\n    return this.identity;\n  }\n\n  reduceTemplateExpression(node, { tag, elements }) {\n    return this.append(tag == null ? () => this.identity : tag, ...elements);\n  }\n\n  reduceThisExpression(node) {\n    return this.identity;\n  }\n\n  reduceThrowStatement(node, { expression }) {\n    return expression();\n  }\n\n  reduceTryCatchStatement(node, { body, catchClause }) {\n    return this.append(body, catchClause);\n  }\n\n  reduceTryFinallyStatement(node, { body, catchClause, finalizer }) {\n    return this.append(body, catchClause == null ? () => this.identity : catchClause, finalizer);\n  }\n\n  reduceUnaryExpression(node, { operand }) {\n    return operand();\n  }\n\n  reduceUpdateExpression(node, { operand }) {\n    return operand();\n  }\n\n  reduceVariableDeclaration(node, { declarators }) {\n    return this.append(...declarators);\n  }\n\n  reduceVariableDeclarationStatement(node, { declaration }) {\n    return declaration();\n  }\n\n  reduceVariableDeclarator(node, { binding, init }) {\n    return this.append(binding, init == null ? () => this.identity : init);\n  }\n\n  reduceWhileStatement(node, { test, body }) {\n    return this.append(test, body);\n  }\n\n  reduceWithStatement(node, { object, body }) {\n    return this.append(object, body);\n  }\n\n  reduceYieldExpression(node, { expression }) {\n    return expression == null ? this.identity : expression();\n  }\n\n  reduceYieldGeneratorExpression(node, { expression }) {\n    return expression();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}