{"ast":null,"code":"// Generated by generate-clone-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Shift = require('shift-ast');\nmodule.exports = class CloneReducer {\n  reduceArrayAssignmentTarget(node, {\n    elements,\n    rest\n  }) {\n    return new Shift.ArrayAssignmentTarget({\n      elements,\n      rest\n    });\n  }\n  reduceArrayBinding(node, {\n    elements,\n    rest\n  }) {\n    return new Shift.ArrayBinding({\n      elements,\n      rest\n    });\n  }\n  reduceArrayExpression(node, {\n    elements\n  }) {\n    return new Shift.ArrayExpression({\n      elements\n    });\n  }\n  reduceArrowExpression(node, {\n    params,\n    body\n  }) {\n    return new Shift.ArrowExpression({\n      isAsync: node.isAsync,\n      params,\n      body\n    });\n  }\n  reduceAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    return new Shift.AssignmentExpression({\n      binding,\n      expression\n    });\n  }\n  reduceAssignmentTargetIdentifier(node) {\n    return new Shift.AssignmentTargetIdentifier({\n      name: node.name\n    });\n  }\n  reduceAssignmentTargetPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    return new Shift.AssignmentTargetPropertyIdentifier({\n      binding,\n      init\n    });\n  }\n  reduceAssignmentTargetPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    return new Shift.AssignmentTargetPropertyProperty({\n      name,\n      binding\n    });\n  }\n  reduceAssignmentTargetWithDefault(node, {\n    binding,\n    init\n  }) {\n    return new Shift.AssignmentTargetWithDefault({\n      binding,\n      init\n    });\n  }\n  reduceAwaitExpression(node, {\n    expression\n  }) {\n    return new Shift.AwaitExpression({\n      expression\n    });\n  }\n  reduceBinaryExpression(node, {\n    left,\n    right\n  }) {\n    return new Shift.BinaryExpression({\n      left,\n      operator: node.operator,\n      right\n    });\n  }\n  reduceBindingIdentifier(node) {\n    return new Shift.BindingIdentifier({\n      name: node.name\n    });\n  }\n  reduceBindingPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    return new Shift.BindingPropertyIdentifier({\n      binding,\n      init\n    });\n  }\n  reduceBindingPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    return new Shift.BindingPropertyProperty({\n      name,\n      binding\n    });\n  }\n  reduceBindingWithDefault(node, {\n    binding,\n    init\n  }) {\n    return new Shift.BindingWithDefault({\n      binding,\n      init\n    });\n  }\n  reduceBlock(node, {\n    statements\n  }) {\n    return new Shift.Block({\n      statements\n    });\n  }\n  reduceBlockStatement(node, {\n    block\n  }) {\n    return new Shift.BlockStatement({\n      block\n    });\n  }\n  reduceBreakStatement(node) {\n    return new Shift.BreakStatement({\n      label: node.label\n    });\n  }\n  reduceCallExpression(node, {\n    callee,\n    arguments: _arguments\n  }) {\n    return new Shift.CallExpression({\n      callee,\n      arguments: _arguments\n    });\n  }\n  reduceCatchClause(node, {\n    binding,\n    body\n  }) {\n    return new Shift.CatchClause({\n      binding,\n      body\n    });\n  }\n  reduceClassDeclaration(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    return new Shift.ClassDeclaration({\n      name,\n      super: _super,\n      elements\n    });\n  }\n  reduceClassElement(node, {\n    method\n  }) {\n    return new Shift.ClassElement({\n      isStatic: node.isStatic,\n      method\n    });\n  }\n  reduceClassExpression(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    return new Shift.ClassExpression({\n      name,\n      super: _super,\n      elements\n    });\n  }\n  reduceCompoundAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    return new Shift.CompoundAssignmentExpression({\n      binding,\n      operator: node.operator,\n      expression\n    });\n  }\n  reduceComputedMemberAssignmentTarget(node, {\n    object,\n    expression\n  }) {\n    return new Shift.ComputedMemberAssignmentTarget({\n      object,\n      expression\n    });\n  }\n  reduceComputedMemberExpression(node, {\n    object,\n    expression\n  }) {\n    return new Shift.ComputedMemberExpression({\n      object,\n      expression\n    });\n  }\n  reduceComputedPropertyName(node, {\n    expression\n  }) {\n    return new Shift.ComputedPropertyName({\n      expression\n    });\n  }\n  reduceConditionalExpression(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    return new Shift.ConditionalExpression({\n      test,\n      consequent,\n      alternate\n    });\n  }\n  reduceContinueStatement(node) {\n    return new Shift.ContinueStatement({\n      label: node.label\n    });\n  }\n  reduceDataProperty(node, {\n    name,\n    expression\n  }) {\n    return new Shift.DataProperty({\n      name,\n      expression\n    });\n  }\n  reduceDebuggerStatement(node) {\n    return new Shift.DebuggerStatement();\n  }\n  reduceDirective(node) {\n    return new Shift.Directive({\n      rawValue: node.rawValue\n    });\n  }\n  reduceDoWhileStatement(node, {\n    body,\n    test\n  }) {\n    return new Shift.DoWhileStatement({\n      body,\n      test\n    });\n  }\n  reduceEmptyStatement(node) {\n    return new Shift.EmptyStatement();\n  }\n  reduceExport(node, {\n    declaration\n  }) {\n    return new Shift.Export({\n      declaration\n    });\n  }\n  reduceExportAllFrom(node) {\n    return new Shift.ExportAllFrom({\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceExportDefault(node, {\n    body\n  }) {\n    return new Shift.ExportDefault({\n      body\n    });\n  }\n  reduceExportFrom(node, {\n    namedExports\n  }) {\n    return new Shift.ExportFrom({\n      namedExports,\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceExportFromSpecifier(node) {\n    return new Shift.ExportFromSpecifier({\n      name: node.name,\n      exportedName: node.exportedName\n    });\n  }\n  reduceExportLocalSpecifier(node, {\n    name\n  }) {\n    return new Shift.ExportLocalSpecifier({\n      name,\n      exportedName: node.exportedName\n    });\n  }\n  reduceExportLocals(node, {\n    namedExports\n  }) {\n    return new Shift.ExportLocals({\n      namedExports\n    });\n  }\n  reduceExpressionStatement(node, {\n    expression\n  }) {\n    return new Shift.ExpressionStatement({\n      expression\n    });\n  }\n  reduceForAwaitStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    return new Shift.ForAwaitStatement({\n      left,\n      right,\n      body\n    });\n  }\n  reduceForInStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    return new Shift.ForInStatement({\n      left,\n      right,\n      body\n    });\n  }\n  reduceForOfStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    return new Shift.ForOfStatement({\n      left,\n      right,\n      body\n    });\n  }\n  reduceForStatement(node, {\n    init,\n    test,\n    update,\n    body\n  }) {\n    return new Shift.ForStatement({\n      init,\n      test,\n      update,\n      body\n    });\n  }\n  reduceFormalParameters(node, {\n    items,\n    rest\n  }) {\n    return new Shift.FormalParameters({\n      items,\n      rest\n    });\n  }\n  reduceFunctionBody(node, {\n    directives,\n    statements\n  }) {\n    return new Shift.FunctionBody({\n      directives,\n      statements\n    });\n  }\n  reduceFunctionDeclaration(node, {\n    name,\n    params,\n    body\n  }) {\n    return new Shift.FunctionDeclaration({\n      isAsync: node.isAsync,\n      isGenerator: node.isGenerator,\n      name,\n      params,\n      body\n    });\n  }\n  reduceFunctionExpression(node, {\n    name,\n    params,\n    body\n  }) {\n    return new Shift.FunctionExpression({\n      isAsync: node.isAsync,\n      isGenerator: node.isGenerator,\n      name,\n      params,\n      body\n    });\n  }\n  reduceGetter(node, {\n    name,\n    body\n  }) {\n    return new Shift.Getter({\n      name,\n      body\n    });\n  }\n  reduceIdentifierExpression(node) {\n    return new Shift.IdentifierExpression({\n      name: node.name\n    });\n  }\n  reduceIfStatement(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    return new Shift.IfStatement({\n      test,\n      consequent,\n      alternate\n    });\n  }\n  reduceImport(node, {\n    defaultBinding,\n    namedImports\n  }) {\n    return new Shift.Import({\n      defaultBinding,\n      namedImports,\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceImportNamespace(node, {\n    defaultBinding,\n    namespaceBinding\n  }) {\n    return new Shift.ImportNamespace({\n      defaultBinding,\n      namespaceBinding,\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceImportSpecifier(node, {\n    binding\n  }) {\n    return new Shift.ImportSpecifier({\n      name: node.name,\n      binding\n    });\n  }\n  reduceLabeledStatement(node, {\n    body\n  }) {\n    return new Shift.LabeledStatement({\n      label: node.label,\n      body\n    });\n  }\n  reduceLiteralBooleanExpression(node) {\n    return new Shift.LiteralBooleanExpression({\n      value: node.value\n    });\n  }\n  reduceLiteralInfinityExpression(node) {\n    return new Shift.LiteralInfinityExpression();\n  }\n  reduceLiteralNullExpression(node) {\n    return new Shift.LiteralNullExpression();\n  }\n  reduceLiteralNumericExpression(node) {\n    return new Shift.LiteralNumericExpression({\n      value: node.value\n    });\n  }\n  reduceLiteralRegExpExpression(node) {\n    return new Shift.LiteralRegExpExpression({\n      pattern: node.pattern,\n      global: node.global,\n      ignoreCase: node.ignoreCase,\n      multiLine: node.multiLine,\n      dotAll: node.dotAll,\n      unicode: node.unicode,\n      sticky: node.sticky\n    });\n  }\n  reduceLiteralStringExpression(node) {\n    return new Shift.LiteralStringExpression({\n      value: node.value\n    });\n  }\n  reduceMethod(node, {\n    name,\n    params,\n    body\n  }) {\n    return new Shift.Method({\n      isAsync: node.isAsync,\n      isGenerator: node.isGenerator,\n      name,\n      params,\n      body\n    });\n  }\n  reduceModule(node, {\n    directives,\n    items\n  }) {\n    return new Shift.Module({\n      directives,\n      items\n    });\n  }\n  reduceNewExpression(node, {\n    callee,\n    arguments: _arguments\n  }) {\n    return new Shift.NewExpression({\n      callee,\n      arguments: _arguments\n    });\n  }\n  reduceNewTargetExpression(node) {\n    return new Shift.NewTargetExpression();\n  }\n  reduceObjectAssignmentTarget(node, {\n    properties,\n    rest\n  }) {\n    return new Shift.ObjectAssignmentTarget({\n      properties,\n      rest\n    });\n  }\n  reduceObjectBinding(node, {\n    properties,\n    rest\n  }) {\n    return new Shift.ObjectBinding({\n      properties,\n      rest\n    });\n  }\n  reduceObjectExpression(node, {\n    properties\n  }) {\n    return new Shift.ObjectExpression({\n      properties\n    });\n  }\n  reduceReturnStatement(node, {\n    expression\n  }) {\n    return new Shift.ReturnStatement({\n      expression\n    });\n  }\n  reduceScript(node, {\n    directives,\n    statements\n  }) {\n    return new Shift.Script({\n      directives,\n      statements\n    });\n  }\n  reduceSetter(node, {\n    name,\n    param,\n    body\n  }) {\n    return new Shift.Setter({\n      name,\n      param,\n      body\n    });\n  }\n  reduceShorthandProperty(node, {\n    name\n  }) {\n    return new Shift.ShorthandProperty({\n      name\n    });\n  }\n  reduceSpreadElement(node, {\n    expression\n  }) {\n    return new Shift.SpreadElement({\n      expression\n    });\n  }\n  reduceSpreadProperty(node, {\n    expression\n  }) {\n    return new Shift.SpreadProperty({\n      expression\n    });\n  }\n  reduceStaticMemberAssignmentTarget(node, {\n    object\n  }) {\n    return new Shift.StaticMemberAssignmentTarget({\n      object,\n      property: node.property\n    });\n  }\n  reduceStaticMemberExpression(node, {\n    object\n  }) {\n    return new Shift.StaticMemberExpression({\n      object,\n      property: node.property\n    });\n  }\n  reduceStaticPropertyName(node) {\n    return new Shift.StaticPropertyName({\n      value: node.value\n    });\n  }\n  reduceSuper(node) {\n    return new Shift.Super();\n  }\n  reduceSwitchCase(node, {\n    test,\n    consequent\n  }) {\n    return new Shift.SwitchCase({\n      test,\n      consequent\n    });\n  }\n  reduceSwitchDefault(node, {\n    consequent\n  }) {\n    return new Shift.SwitchDefault({\n      consequent\n    });\n  }\n  reduceSwitchStatement(node, {\n    discriminant,\n    cases\n  }) {\n    return new Shift.SwitchStatement({\n      discriminant,\n      cases\n    });\n  }\n  reduceSwitchStatementWithDefault(node, {\n    discriminant,\n    preDefaultCases,\n    defaultCase,\n    postDefaultCases\n  }) {\n    return new Shift.SwitchStatementWithDefault({\n      discriminant,\n      preDefaultCases,\n      defaultCase,\n      postDefaultCases\n    });\n  }\n  reduceTemplateElement(node) {\n    return new Shift.TemplateElement({\n      rawValue: node.rawValue\n    });\n  }\n  reduceTemplateExpression(node, {\n    tag,\n    elements\n  }) {\n    return new Shift.TemplateExpression({\n      tag,\n      elements\n    });\n  }\n  reduceThisExpression(node) {\n    return new Shift.ThisExpression();\n  }\n  reduceThrowStatement(node, {\n    expression\n  }) {\n    return new Shift.ThrowStatement({\n      expression\n    });\n  }\n  reduceTryCatchStatement(node, {\n    body,\n    catchClause\n  }) {\n    return new Shift.TryCatchStatement({\n      body,\n      catchClause\n    });\n  }\n  reduceTryFinallyStatement(node, {\n    body,\n    catchClause,\n    finalizer\n  }) {\n    return new Shift.TryFinallyStatement({\n      body,\n      catchClause,\n      finalizer\n    });\n  }\n  reduceUnaryExpression(node, {\n    operand\n  }) {\n    return new Shift.UnaryExpression({\n      operator: node.operator,\n      operand\n    });\n  }\n  reduceUpdateExpression(node, {\n    operand\n  }) {\n    return new Shift.UpdateExpression({\n      isPrefix: node.isPrefix,\n      operator: node.operator,\n      operand\n    });\n  }\n  reduceVariableDeclaration(node, {\n    declarators\n  }) {\n    return new Shift.VariableDeclaration({\n      kind: node.kind,\n      declarators\n    });\n  }\n  reduceVariableDeclarationStatement(node, {\n    declaration\n  }) {\n    return new Shift.VariableDeclarationStatement({\n      declaration\n    });\n  }\n  reduceVariableDeclarator(node, {\n    binding,\n    init\n  }) {\n    return new Shift.VariableDeclarator({\n      binding,\n      init\n    });\n  }\n  reduceWhileStatement(node, {\n    test,\n    body\n  }) {\n    return new Shift.WhileStatement({\n      test,\n      body\n    });\n  }\n  reduceWithStatement(node, {\n    object,\n    body\n  }) {\n    return new Shift.WithStatement({\n      object,\n      body\n    });\n  }\n  reduceYieldExpression(node, {\n    expression\n  }) {\n    return new Shift.YieldExpression({\n      expression\n    });\n  }\n  reduceYieldGeneratorExpression(node, {\n    expression\n  }) {\n    return new Shift.YieldGeneratorExpression({\n      expression\n    });\n  }\n};","map":{"version":3,"names":["Shift","require","module","exports","CloneReducer","reduceArrayAssignmentTarget","node","elements","rest","ArrayAssignmentTarget","reduceArrayBinding","ArrayBinding","reduceArrayExpression","ArrayExpression","reduceArrowExpression","params","body","ArrowExpression","isAsync","reduceAssignmentExpression","binding","expression","AssignmentExpression","reduceAssignmentTargetIdentifier","AssignmentTargetIdentifier","name","reduceAssignmentTargetPropertyIdentifier","init","AssignmentTargetPropertyIdentifier","reduceAssignmentTargetPropertyProperty","AssignmentTargetPropertyProperty","reduceAssignmentTargetWithDefault","AssignmentTargetWithDefault","reduceAwaitExpression","AwaitExpression","reduceBinaryExpression","left","right","BinaryExpression","operator","reduceBindingIdentifier","BindingIdentifier","reduceBindingPropertyIdentifier","BindingPropertyIdentifier","reduceBindingPropertyProperty","BindingPropertyProperty","reduceBindingWithDefault","BindingWithDefault","reduceBlock","statements","Block","reduceBlockStatement","block","BlockStatement","reduceBreakStatement","BreakStatement","label","reduceCallExpression","callee","arguments","_arguments","CallExpression","reduceCatchClause","CatchClause","reduceClassDeclaration","super","_super","ClassDeclaration","reduceClassElement","method","ClassElement","isStatic","reduceClassExpression","ClassExpression","reduceCompoundAssignmentExpression","CompoundAssignmentExpression","reduceComputedMemberAssignmentTarget","object","ComputedMemberAssignmentTarget","reduceComputedMemberExpression","ComputedMemberExpression","reduceComputedPropertyName","ComputedPropertyName","reduceConditionalExpression","test","consequent","alternate","ConditionalExpression","reduceContinueStatement","ContinueStatement","reduceDataProperty","DataProperty","reduceDebuggerStatement","DebuggerStatement","reduceDirective","Directive","rawValue","reduceDoWhileStatement","DoWhileStatement","reduceEmptyStatement","EmptyStatement","reduceExport","declaration","Export","reduceExportAllFrom","ExportAllFrom","moduleSpecifier","reduceExportDefault","ExportDefault","reduceExportFrom","namedExports","ExportFrom","reduceExportFromSpecifier","ExportFromSpecifier","exportedName","reduceExportLocalSpecifier","ExportLocalSpecifier","reduceExportLocals","ExportLocals","reduceExpressionStatement","ExpressionStatement","reduceForAwaitStatement","ForAwaitStatement","reduceForInStatement","ForInStatement","reduceForOfStatement","ForOfStatement","reduceForStatement","update","ForStatement","reduceFormalParameters","items","FormalParameters","reduceFunctionBody","directives","FunctionBody","reduceFunctionDeclaration","FunctionDeclaration","isGenerator","reduceFunctionExpression","FunctionExpression","reduceGetter","Getter","reduceIdentifierExpression","IdentifierExpression","reduceIfStatement","IfStatement","reduceImport","defaultBinding","namedImports","Import","reduceImportNamespace","namespaceBinding","ImportNamespace","reduceImportSpecifier","ImportSpecifier","reduceLabeledStatement","LabeledStatement","reduceLiteralBooleanExpression","LiteralBooleanExpression","value","reduceLiteralInfinityExpression","LiteralInfinityExpression","reduceLiteralNullExpression","LiteralNullExpression","reduceLiteralNumericExpression","LiteralNumericExpression","reduceLiteralRegExpExpression","LiteralRegExpExpression","pattern","global","ignoreCase","multiLine","dotAll","unicode","sticky","reduceLiteralStringExpression","LiteralStringExpression","reduceMethod","Method","reduceModule","Module","reduceNewExpression","NewExpression","reduceNewTargetExpression","NewTargetExpression","reduceObjectAssignmentTarget","properties","ObjectAssignmentTarget","reduceObjectBinding","ObjectBinding","reduceObjectExpression","ObjectExpression","reduceReturnStatement","ReturnStatement","reduceScript","Script","reduceSetter","param","Setter","reduceShorthandProperty","ShorthandProperty","reduceSpreadElement","SpreadElement","reduceSpreadProperty","SpreadProperty","reduceStaticMemberAssignmentTarget","StaticMemberAssignmentTarget","property","reduceStaticMemberExpression","StaticMemberExpression","reduceStaticPropertyName","StaticPropertyName","reduceSuper","Super","reduceSwitchCase","SwitchCase","reduceSwitchDefault","SwitchDefault","reduceSwitchStatement","discriminant","cases","SwitchStatement","reduceSwitchStatementWithDefault","preDefaultCases","defaultCase","postDefaultCases","SwitchStatementWithDefault","reduceTemplateElement","TemplateElement","reduceTemplateExpression","tag","TemplateExpression","reduceThisExpression","ThisExpression","reduceThrowStatement","ThrowStatement","reduceTryCatchStatement","catchClause","TryCatchStatement","reduceTryFinallyStatement","finalizer","TryFinallyStatement","reduceUnaryExpression","operand","UnaryExpression","reduceUpdateExpression","UpdateExpression","isPrefix","reduceVariableDeclaration","declarators","VariableDeclaration","kind","reduceVariableDeclarationStatement","VariableDeclarationStatement","reduceVariableDeclarator","VariableDeclarator","reduceWhileStatement","WhileStatement","reduceWithStatement","WithStatement","reduceYieldExpression","YieldExpression","reduceYieldGeneratorExpression","YieldGeneratorExpression"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-reducer/gen/clone-reducer.js"],"sourcesContent":["// Generated by generate-clone-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Shift = require('shift-ast');\n\nmodule.exports = class CloneReducer {\n  reduceArrayAssignmentTarget(node, { elements, rest }) {\n    return new Shift.ArrayAssignmentTarget({ elements, rest });\n  }\n\n  reduceArrayBinding(node, { elements, rest }) {\n    return new Shift.ArrayBinding({ elements, rest });\n  }\n\n  reduceArrayExpression(node, { elements }) {\n    return new Shift.ArrayExpression({ elements });\n  }\n\n  reduceArrowExpression(node, { params, body }) {\n    return new Shift.ArrowExpression({ isAsync: node.isAsync, params, body });\n  }\n\n  reduceAssignmentExpression(node, { binding, expression }) {\n    return new Shift.AssignmentExpression({ binding, expression });\n  }\n\n  reduceAssignmentTargetIdentifier(node) {\n    return new Shift.AssignmentTargetIdentifier({ name: node.name });\n  }\n\n  reduceAssignmentTargetPropertyIdentifier(node, { binding, init }) {\n    return new Shift.AssignmentTargetPropertyIdentifier({ binding, init });\n  }\n\n  reduceAssignmentTargetPropertyProperty(node, { name, binding }) {\n    return new Shift.AssignmentTargetPropertyProperty({ name, binding });\n  }\n\n  reduceAssignmentTargetWithDefault(node, { binding, init }) {\n    return new Shift.AssignmentTargetWithDefault({ binding, init });\n  }\n\n  reduceAwaitExpression(node, { expression }) {\n    return new Shift.AwaitExpression({ expression });\n  }\n\n  reduceBinaryExpression(node, { left, right }) {\n    return new Shift.BinaryExpression({ left, operator: node.operator, right });\n  }\n\n  reduceBindingIdentifier(node) {\n    return new Shift.BindingIdentifier({ name: node.name });\n  }\n\n  reduceBindingPropertyIdentifier(node, { binding, init }) {\n    return new Shift.BindingPropertyIdentifier({ binding, init });\n  }\n\n  reduceBindingPropertyProperty(node, { name, binding }) {\n    return new Shift.BindingPropertyProperty({ name, binding });\n  }\n\n  reduceBindingWithDefault(node, { binding, init }) {\n    return new Shift.BindingWithDefault({ binding, init });\n  }\n\n  reduceBlock(node, { statements }) {\n    return new Shift.Block({ statements });\n  }\n\n  reduceBlockStatement(node, { block }) {\n    return new Shift.BlockStatement({ block });\n  }\n\n  reduceBreakStatement(node) {\n    return new Shift.BreakStatement({ label: node.label });\n  }\n\n  reduceCallExpression(node, { callee, arguments: _arguments }) {\n    return new Shift.CallExpression({ callee, arguments: _arguments });\n  }\n\n  reduceCatchClause(node, { binding, body }) {\n    return new Shift.CatchClause({ binding, body });\n  }\n\n  reduceClassDeclaration(node, { name, super: _super, elements }) {\n    return new Shift.ClassDeclaration({ name, super: _super, elements });\n  }\n\n  reduceClassElement(node, { method }) {\n    return new Shift.ClassElement({ isStatic: node.isStatic, method });\n  }\n\n  reduceClassExpression(node, { name, super: _super, elements }) {\n    return new Shift.ClassExpression({ name, super: _super, elements });\n  }\n\n  reduceCompoundAssignmentExpression(node, { binding, expression }) {\n    return new Shift.CompoundAssignmentExpression({ binding, operator: node.operator, expression });\n  }\n\n  reduceComputedMemberAssignmentTarget(node, { object, expression }) {\n    return new Shift.ComputedMemberAssignmentTarget({ object, expression });\n  }\n\n  reduceComputedMemberExpression(node, { object, expression }) {\n    return new Shift.ComputedMemberExpression({ object, expression });\n  }\n\n  reduceComputedPropertyName(node, { expression }) {\n    return new Shift.ComputedPropertyName({ expression });\n  }\n\n  reduceConditionalExpression(node, { test, consequent, alternate }) {\n    return new Shift.ConditionalExpression({ test, consequent, alternate });\n  }\n\n  reduceContinueStatement(node) {\n    return new Shift.ContinueStatement({ label: node.label });\n  }\n\n  reduceDataProperty(node, { name, expression }) {\n    return new Shift.DataProperty({ name, expression });\n  }\n\n  reduceDebuggerStatement(node) {\n    return new Shift.DebuggerStatement;\n  }\n\n  reduceDirective(node) {\n    return new Shift.Directive({ rawValue: node.rawValue });\n  }\n\n  reduceDoWhileStatement(node, { body, test }) {\n    return new Shift.DoWhileStatement({ body, test });\n  }\n\n  reduceEmptyStatement(node) {\n    return new Shift.EmptyStatement;\n  }\n\n  reduceExport(node, { declaration }) {\n    return new Shift.Export({ declaration });\n  }\n\n  reduceExportAllFrom(node) {\n    return new Shift.ExportAllFrom({ moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceExportDefault(node, { body }) {\n    return new Shift.ExportDefault({ body });\n  }\n\n  reduceExportFrom(node, { namedExports }) {\n    return new Shift.ExportFrom({ namedExports, moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceExportFromSpecifier(node) {\n    return new Shift.ExportFromSpecifier({ name: node.name, exportedName: node.exportedName });\n  }\n\n  reduceExportLocalSpecifier(node, { name }) {\n    return new Shift.ExportLocalSpecifier({ name, exportedName: node.exportedName });\n  }\n\n  reduceExportLocals(node, { namedExports }) {\n    return new Shift.ExportLocals({ namedExports });\n  }\n\n  reduceExpressionStatement(node, { expression }) {\n    return new Shift.ExpressionStatement({ expression });\n  }\n\n  reduceForAwaitStatement(node, { left, right, body }) {\n    return new Shift.ForAwaitStatement({ left, right, body });\n  }\n\n  reduceForInStatement(node, { left, right, body }) {\n    return new Shift.ForInStatement({ left, right, body });\n  }\n\n  reduceForOfStatement(node, { left, right, body }) {\n    return new Shift.ForOfStatement({ left, right, body });\n  }\n\n  reduceForStatement(node, { init, test, update, body }) {\n    return new Shift.ForStatement({ init, test, update, body });\n  }\n\n  reduceFormalParameters(node, { items, rest }) {\n    return new Shift.FormalParameters({ items, rest });\n  }\n\n  reduceFunctionBody(node, { directives, statements }) {\n    return new Shift.FunctionBody({ directives, statements });\n  }\n\n  reduceFunctionDeclaration(node, { name, params, body }) {\n    return new Shift.FunctionDeclaration({ isAsync: node.isAsync, isGenerator: node.isGenerator, name, params, body });\n  }\n\n  reduceFunctionExpression(node, { name, params, body }) {\n    return new Shift.FunctionExpression({ isAsync: node.isAsync, isGenerator: node.isGenerator, name, params, body });\n  }\n\n  reduceGetter(node, { name, body }) {\n    return new Shift.Getter({ name, body });\n  }\n\n  reduceIdentifierExpression(node) {\n    return new Shift.IdentifierExpression({ name: node.name });\n  }\n\n  reduceIfStatement(node, { test, consequent, alternate }) {\n    return new Shift.IfStatement({ test, consequent, alternate });\n  }\n\n  reduceImport(node, { defaultBinding, namedImports }) {\n    return new Shift.Import({ defaultBinding, namedImports, moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceImportNamespace(node, { defaultBinding, namespaceBinding }) {\n    return new Shift.ImportNamespace({ defaultBinding, namespaceBinding, moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceImportSpecifier(node, { binding }) {\n    return new Shift.ImportSpecifier({ name: node.name, binding });\n  }\n\n  reduceLabeledStatement(node, { body }) {\n    return new Shift.LabeledStatement({ label: node.label, body });\n  }\n\n  reduceLiteralBooleanExpression(node) {\n    return new Shift.LiteralBooleanExpression({ value: node.value });\n  }\n\n  reduceLiteralInfinityExpression(node) {\n    return new Shift.LiteralInfinityExpression;\n  }\n\n  reduceLiteralNullExpression(node) {\n    return new Shift.LiteralNullExpression;\n  }\n\n  reduceLiteralNumericExpression(node) {\n    return new Shift.LiteralNumericExpression({ value: node.value });\n  }\n\n  reduceLiteralRegExpExpression(node) {\n    return new Shift.LiteralRegExpExpression({ pattern: node.pattern, global: node.global, ignoreCase: node.ignoreCase, multiLine: node.multiLine, dotAll: node.dotAll, unicode: node.unicode, sticky: node.sticky });\n  }\n\n  reduceLiteralStringExpression(node) {\n    return new Shift.LiteralStringExpression({ value: node.value });\n  }\n\n  reduceMethod(node, { name, params, body }) {\n    return new Shift.Method({ isAsync: node.isAsync, isGenerator: node.isGenerator, name, params, body });\n  }\n\n  reduceModule(node, { directives, items }) {\n    return new Shift.Module({ directives, items });\n  }\n\n  reduceNewExpression(node, { callee, arguments: _arguments }) {\n    return new Shift.NewExpression({ callee, arguments: _arguments });\n  }\n\n  reduceNewTargetExpression(node) {\n    return new Shift.NewTargetExpression;\n  }\n\n  reduceObjectAssignmentTarget(node, { properties, rest }) {\n    return new Shift.ObjectAssignmentTarget({ properties, rest });\n  }\n\n  reduceObjectBinding(node, { properties, rest }) {\n    return new Shift.ObjectBinding({ properties, rest });\n  }\n\n  reduceObjectExpression(node, { properties }) {\n    return new Shift.ObjectExpression({ properties });\n  }\n\n  reduceReturnStatement(node, { expression }) {\n    return new Shift.ReturnStatement({ expression });\n  }\n\n  reduceScript(node, { directives, statements }) {\n    return new Shift.Script({ directives, statements });\n  }\n\n  reduceSetter(node, { name, param, body }) {\n    return new Shift.Setter({ name, param, body });\n  }\n\n  reduceShorthandProperty(node, { name }) {\n    return new Shift.ShorthandProperty({ name });\n  }\n\n  reduceSpreadElement(node, { expression }) {\n    return new Shift.SpreadElement({ expression });\n  }\n\n  reduceSpreadProperty(node, { expression }) {\n    return new Shift.SpreadProperty({ expression });\n  }\n\n  reduceStaticMemberAssignmentTarget(node, { object }) {\n    return new Shift.StaticMemberAssignmentTarget({ object, property: node.property });\n  }\n\n  reduceStaticMemberExpression(node, { object }) {\n    return new Shift.StaticMemberExpression({ object, property: node.property });\n  }\n\n  reduceStaticPropertyName(node) {\n    return new Shift.StaticPropertyName({ value: node.value });\n  }\n\n  reduceSuper(node) {\n    return new Shift.Super;\n  }\n\n  reduceSwitchCase(node, { test, consequent }) {\n    return new Shift.SwitchCase({ test, consequent });\n  }\n\n  reduceSwitchDefault(node, { consequent }) {\n    return new Shift.SwitchDefault({ consequent });\n  }\n\n  reduceSwitchStatement(node, { discriminant, cases }) {\n    return new Shift.SwitchStatement({ discriminant, cases });\n  }\n\n  reduceSwitchStatementWithDefault(node, { discriminant, preDefaultCases, defaultCase, postDefaultCases }) {\n    return new Shift.SwitchStatementWithDefault({ discriminant, preDefaultCases, defaultCase, postDefaultCases });\n  }\n\n  reduceTemplateElement(node) {\n    return new Shift.TemplateElement({ rawValue: node.rawValue });\n  }\n\n  reduceTemplateExpression(node, { tag, elements }) {\n    return new Shift.TemplateExpression({ tag, elements });\n  }\n\n  reduceThisExpression(node) {\n    return new Shift.ThisExpression;\n  }\n\n  reduceThrowStatement(node, { expression }) {\n    return new Shift.ThrowStatement({ expression });\n  }\n\n  reduceTryCatchStatement(node, { body, catchClause }) {\n    return new Shift.TryCatchStatement({ body, catchClause });\n  }\n\n  reduceTryFinallyStatement(node, { body, catchClause, finalizer }) {\n    return new Shift.TryFinallyStatement({ body, catchClause, finalizer });\n  }\n\n  reduceUnaryExpression(node, { operand }) {\n    return new Shift.UnaryExpression({ operator: node.operator, operand });\n  }\n\n  reduceUpdateExpression(node, { operand }) {\n    return new Shift.UpdateExpression({ isPrefix: node.isPrefix, operator: node.operator, operand });\n  }\n\n  reduceVariableDeclaration(node, { declarators }) {\n    return new Shift.VariableDeclaration({ kind: node.kind, declarators });\n  }\n\n  reduceVariableDeclarationStatement(node, { declaration }) {\n    return new Shift.VariableDeclarationStatement({ declaration });\n  }\n\n  reduceVariableDeclarator(node, { binding, init }) {\n    return new Shift.VariableDeclarator({ binding, init });\n  }\n\n  reduceWhileStatement(node, { test, body }) {\n    return new Shift.WhileStatement({ test, body });\n  }\n\n  reduceWithStatement(node, { object, body }) {\n    return new Shift.WithStatement({ object, body });\n  }\n\n  reduceYieldExpression(node, { expression }) {\n    return new Shift.YieldExpression({ expression });\n  }\n\n  reduceYieldGeneratorExpression(node, { expression }) {\n    return new Shift.YieldGeneratorExpression({ expression });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}