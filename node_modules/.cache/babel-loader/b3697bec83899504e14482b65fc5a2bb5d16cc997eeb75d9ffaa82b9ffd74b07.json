{"ast":null,"code":"/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {\n  reduce,\n  MonoidalReducer\n} = require('shift-reducer');\nconst ShiftSpec = require('shift-spec');\n\n// TODO this file should live elsewhere\n\nclass ListMonoid {\n  constructor(list) {\n    this.list = list;\n  }\n  static empty() {\n    return new ListMonoid([]);\n  }\n  concat(b) {\n    return new ListMonoid(this.list.concat(b.list));\n  }\n  extract() {\n    return this.list;\n  }\n}\n\n// Gives a flat list of all nodes rooted at the given node, in preorder: that is, a node appears before its children.\nclass Flattener extends MonoidalReducer {\n  // We explicitly invoke Monoidal.prototype methods so that we can automatically generate methods from the spec.\n  constructor() {\n    super(ListMonoid);\n  }\n  static flatten(node) {\n    return reduce(new this(), node).extract();\n  }\n}\nfor (let typeName of Object.keys(ShiftSpec)) {\n  Object.defineProperty(Flattener.prototype, `reduce${typeName}`, {\n    value(node, state) {\n      return new ListMonoid([node]).concat(MonoidalReducer.prototype[`reduce${typeName}`].call(this, node, state));\n    }\n  });\n}\nmodule.exports = Flattener;","map":{"version":3,"names":["reduce","MonoidalReducer","require","ShiftSpec","ListMonoid","constructor","list","empty","concat","b","extract","Flattener","flatten","node","typeName","Object","keys","defineProperty","prototype","value","state","call","module","exports"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-scope/src/flattener.js"],"sourcesContent":["/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst { reduce, MonoidalReducer } = require('shift-reducer');\nconst ShiftSpec = require('shift-spec');\n\n// TODO this file should live elsewhere\n\nclass ListMonoid {\n  constructor(list) {\n    this.list = list;\n  }\n\n  static empty() {\n    return new ListMonoid([]);\n  }\n\n  concat(b) {\n    return new ListMonoid(this.list.concat(b.list));\n  }\n\n  extract() {\n    return this.list;\n  }\n}\n\n// Gives a flat list of all nodes rooted at the given node, in preorder: that is, a node appears before its children.\nclass Flattener extends MonoidalReducer { // We explicitly invoke Monoidal.prototype methods so that we can automatically generate methods from the spec.\n  constructor() {\n    super(ListMonoid);\n  }\n\n  static flatten(node) {\n    return reduce(new this, node).extract();\n  }\n}\n\nfor (let typeName of Object.keys(ShiftSpec)) {\n  Object.defineProperty(Flattener.prototype, `reduce${typeName}`, {\n    value(node, state) {\n      return (new ListMonoid([node])).concat(MonoidalReducer.prototype[`reduce${typeName}`].call(this, node, state));\n    },\n  });\n}\n\nmodule.exports = Flattener;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA,MAAM;EAAEC;AAAgB,CAAC,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5D,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEvC;;AAEA,MAAME,UAAU,CAAC;EACfC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEA,OAAOC,KAAKA,CAAA,EAAG;IACb,OAAO,IAAIH,UAAU,CAAC,EAAE,CAAC;EAC3B;EAEAI,MAAMA,CAACC,CAAC,EAAE;IACR,OAAO,IAAIL,UAAU,CAAC,IAAI,CAACE,IAAI,CAACE,MAAM,CAACC,CAAC,CAACH,IAAI,CAAC,CAAC;EACjD;EAEAI,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACJ,IAAI;EAClB;AACF;;AAEA;AACA,MAAMK,SAAS,SAASV,eAAe,CAAC;EAAE;EACxCI,WAAWA,CAAA,EAAG;IACZ,KAAK,CAACD,UAAU,CAAC;EACnB;EAEA,OAAOQ,OAAOA,CAACC,IAAI,EAAE;IACnB,OAAOb,MAAM,CAAC,IAAI,IAAI,CAAD,CAAC,EAAEa,IAAI,CAAC,CAACH,OAAO,CAAC,CAAC;EACzC;AACF;AAEA,KAAK,IAAII,QAAQ,IAAIC,MAAM,CAACC,IAAI,CAACb,SAAS,CAAC,EAAE;EAC3CY,MAAM,CAACE,cAAc,CAACN,SAAS,CAACO,SAAS,EAAG,SAAQJ,QAAS,EAAC,EAAE;IAC9DK,KAAKA,CAACN,IAAI,EAAEO,KAAK,EAAE;MACjB,OAAQ,IAAIhB,UAAU,CAAC,CAACS,IAAI,CAAC,CAAC,CAAEL,MAAM,CAACP,eAAe,CAACiB,SAAS,CAAE,SAAQJ,QAAS,EAAC,CAAC,CAACO,IAAI,CAAC,IAAI,EAAER,IAAI,EAAEO,KAAK,CAAC,CAAC;IAChH;EACF,CAAC,CAAC;AACJ;AAEAE,MAAM,CAACC,OAAO,GAAGZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}