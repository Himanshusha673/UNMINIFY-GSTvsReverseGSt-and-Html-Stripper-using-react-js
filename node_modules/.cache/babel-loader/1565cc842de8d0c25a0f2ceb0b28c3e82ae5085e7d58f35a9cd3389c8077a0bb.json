{"ast":null,"code":"// Generated by generate-lazy-clone-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Shift = require('shift-ast');\nmodule.exports = class LazyCloneReducer {\n  reduceArrayAssignmentTarget(node, {\n    elements,\n    rest\n  }) {\n    if (node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i]) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ArrayAssignmentTarget({\n      elements,\n      rest\n    });\n  }\n  reduceArrayBinding(node, {\n    elements,\n    rest\n  }) {\n    if (node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i]) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ArrayBinding({\n      elements,\n      rest\n    });\n  }\n  reduceArrayExpression(node, {\n    elements\n  }) {\n    if (node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i])) {\n      return node;\n    }\n    return new Shift.ArrayExpression({\n      elements\n    });\n  }\n  reduceArrowExpression(node, {\n    params,\n    body\n  }) {\n    if (node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.ArrowExpression({\n      isAsync: node.isAsync,\n      params,\n      body\n    });\n  }\n  reduceAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    if (node.binding === binding && node.expression === expression) {\n      return node;\n    }\n    return new Shift.AssignmentExpression({\n      binding,\n      expression\n    });\n  }\n  reduceAssignmentTargetIdentifier(node) {\n    return node;\n  }\n  reduceAssignmentTargetPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.AssignmentTargetPropertyIdentifier({\n      binding,\n      init\n    });\n  }\n  reduceAssignmentTargetPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    if (node.name === name && node.binding === binding) {\n      return node;\n    }\n    return new Shift.AssignmentTargetPropertyProperty({\n      name,\n      binding\n    });\n  }\n  reduceAssignmentTargetWithDefault(node, {\n    binding,\n    init\n  }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.AssignmentTargetWithDefault({\n      binding,\n      init\n    });\n  }\n  reduceAwaitExpression(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.AwaitExpression({\n      expression\n    });\n  }\n  reduceBinaryExpression(node, {\n    left,\n    right\n  }) {\n    if (node.left === left && node.right === right) {\n      return node;\n    }\n    return new Shift.BinaryExpression({\n      left,\n      operator: node.operator,\n      right\n    });\n  }\n  reduceBindingIdentifier(node) {\n    return node;\n  }\n  reduceBindingPropertyIdentifier(node, {\n    binding,\n    init\n  }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.BindingPropertyIdentifier({\n      binding,\n      init\n    });\n  }\n  reduceBindingPropertyProperty(node, {\n    name,\n    binding\n  }) {\n    if (node.name === name && node.binding === binding) {\n      return node;\n    }\n    return new Shift.BindingPropertyProperty({\n      name,\n      binding\n    });\n  }\n  reduceBindingWithDefault(node, {\n    binding,\n    init\n  }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.BindingWithDefault({\n      binding,\n      init\n    });\n  }\n  reduceBlock(node, {\n    statements\n  }) {\n    if (node.statements.length === statements.length && node.statements.every((v, i) => v === statements[i])) {\n      return node;\n    }\n    return new Shift.Block({\n      statements\n    });\n  }\n  reduceBlockStatement(node, {\n    block\n  }) {\n    if (node.block === block) {\n      return node;\n    }\n    return new Shift.BlockStatement({\n      block\n    });\n  }\n  reduceBreakStatement(node) {\n    return node;\n  }\n  reduceCallExpression(node, {\n    callee,\n    arguments: _arguments\n  }) {\n    if (node.callee === callee && node.arguments.length === _arguments.length && node.arguments.every((v, i) => v === _arguments[i])) {\n      return node;\n    }\n    return new Shift.CallExpression({\n      callee,\n      arguments: _arguments\n    });\n  }\n  reduceCatchClause(node, {\n    binding,\n    body\n  }) {\n    if (node.binding === binding && node.body === body) {\n      return node;\n    }\n    return new Shift.CatchClause({\n      binding,\n      body\n    });\n  }\n  reduceClassDeclaration(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    if (node.name === name && node.super === _super && node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i])) {\n      return node;\n    }\n    return new Shift.ClassDeclaration({\n      name,\n      super: _super,\n      elements\n    });\n  }\n  reduceClassElement(node, {\n    method\n  }) {\n    if (node.method === method) {\n      return node;\n    }\n    return new Shift.ClassElement({\n      isStatic: node.isStatic,\n      method\n    });\n  }\n  reduceClassExpression(node, {\n    name,\n    super: _super,\n    elements\n  }) {\n    if (node.name === name && node.super === _super && node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i])) {\n      return node;\n    }\n    return new Shift.ClassExpression({\n      name,\n      super: _super,\n      elements\n    });\n  }\n  reduceCompoundAssignmentExpression(node, {\n    binding,\n    expression\n  }) {\n    if (node.binding === binding && node.expression === expression) {\n      return node;\n    }\n    return new Shift.CompoundAssignmentExpression({\n      binding,\n      operator: node.operator,\n      expression\n    });\n  }\n  reduceComputedMemberAssignmentTarget(node, {\n    object,\n    expression\n  }) {\n    if (node.object === object && node.expression === expression) {\n      return node;\n    }\n    return new Shift.ComputedMemberAssignmentTarget({\n      object,\n      expression\n    });\n  }\n  reduceComputedMemberExpression(node, {\n    object,\n    expression\n  }) {\n    if (node.object === object && node.expression === expression) {\n      return node;\n    }\n    return new Shift.ComputedMemberExpression({\n      object,\n      expression\n    });\n  }\n  reduceComputedPropertyName(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ComputedPropertyName({\n      expression\n    });\n  }\n  reduceConditionalExpression(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    if (node.test === test && node.consequent === consequent && node.alternate === alternate) {\n      return node;\n    }\n    return new Shift.ConditionalExpression({\n      test,\n      consequent,\n      alternate\n    });\n  }\n  reduceContinueStatement(node) {\n    return node;\n  }\n  reduceDataProperty(node, {\n    name,\n    expression\n  }) {\n    if (node.name === name && node.expression === expression) {\n      return node;\n    }\n    return new Shift.DataProperty({\n      name,\n      expression\n    });\n  }\n  reduceDebuggerStatement(node) {\n    return node;\n  }\n  reduceDirective(node) {\n    return node;\n  }\n  reduceDoWhileStatement(node, {\n    body,\n    test\n  }) {\n    if (node.body === body && node.test === test) {\n      return node;\n    }\n    return new Shift.DoWhileStatement({\n      body,\n      test\n    });\n  }\n  reduceEmptyStatement(node) {\n    return node;\n  }\n  reduceExport(node, {\n    declaration\n  }) {\n    if (node.declaration === declaration) {\n      return node;\n    }\n    return new Shift.Export({\n      declaration\n    });\n  }\n  reduceExportAllFrom(node) {\n    return node;\n  }\n  reduceExportDefault(node, {\n    body\n  }) {\n    if (node.body === body) {\n      return node;\n    }\n    return new Shift.ExportDefault({\n      body\n    });\n  }\n  reduceExportFrom(node, {\n    namedExports\n  }) {\n    if (node.namedExports.length === namedExports.length && node.namedExports.every((v, i) => v === namedExports[i])) {\n      return node;\n    }\n    return new Shift.ExportFrom({\n      namedExports,\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceExportFromSpecifier(node) {\n    return node;\n  }\n  reduceExportLocalSpecifier(node, {\n    name\n  }) {\n    if (node.name === name) {\n      return node;\n    }\n    return new Shift.ExportLocalSpecifier({\n      name,\n      exportedName: node.exportedName\n    });\n  }\n  reduceExportLocals(node, {\n    namedExports\n  }) {\n    if (node.namedExports.length === namedExports.length && node.namedExports.every((v, i) => v === namedExports[i])) {\n      return node;\n    }\n    return new Shift.ExportLocals({\n      namedExports\n    });\n  }\n  reduceExpressionStatement(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ExpressionStatement({\n      expression\n    });\n  }\n  reduceForAwaitStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    if (node.left === left && node.right === right && node.body === body) {\n      return node;\n    }\n    return new Shift.ForAwaitStatement({\n      left,\n      right,\n      body\n    });\n  }\n  reduceForInStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    if (node.left === left && node.right === right && node.body === body) {\n      return node;\n    }\n    return new Shift.ForInStatement({\n      left,\n      right,\n      body\n    });\n  }\n  reduceForOfStatement(node, {\n    left,\n    right,\n    body\n  }) {\n    if (node.left === left && node.right === right && node.body === body) {\n      return node;\n    }\n    return new Shift.ForOfStatement({\n      left,\n      right,\n      body\n    });\n  }\n  reduceForStatement(node, {\n    init,\n    test,\n    update,\n    body\n  }) {\n    if (node.init === init && node.test === test && node.update === update && node.body === body) {\n      return node;\n    }\n    return new Shift.ForStatement({\n      init,\n      test,\n      update,\n      body\n    });\n  }\n  reduceFormalParameters(node, {\n    items,\n    rest\n  }) {\n    if (node.items.length === items.length && node.items.every((v, i) => v === items[i]) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.FormalParameters({\n      items,\n      rest\n    });\n  }\n  reduceFunctionBody(node, {\n    directives,\n    statements\n  }) {\n    if (node.directives.length === directives.length && node.directives.every((v, i) => v === directives[i]) && node.statements.length === statements.length && node.statements.every((v, i) => v === statements[i])) {\n      return node;\n    }\n    return new Shift.FunctionBody({\n      directives,\n      statements\n    });\n  }\n  reduceFunctionDeclaration(node, {\n    name,\n    params,\n    body\n  }) {\n    if (node.name === name && node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.FunctionDeclaration({\n      isAsync: node.isAsync,\n      isGenerator: node.isGenerator,\n      name,\n      params,\n      body\n    });\n  }\n  reduceFunctionExpression(node, {\n    name,\n    params,\n    body\n  }) {\n    if (node.name === name && node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.FunctionExpression({\n      isAsync: node.isAsync,\n      isGenerator: node.isGenerator,\n      name,\n      params,\n      body\n    });\n  }\n  reduceGetter(node, {\n    name,\n    body\n  }) {\n    if (node.name === name && node.body === body) {\n      return node;\n    }\n    return new Shift.Getter({\n      name,\n      body\n    });\n  }\n  reduceIdentifierExpression(node) {\n    return node;\n  }\n  reduceIfStatement(node, {\n    test,\n    consequent,\n    alternate\n  }) {\n    if (node.test === test && node.consequent === consequent && node.alternate === alternate) {\n      return node;\n    }\n    return new Shift.IfStatement({\n      test,\n      consequent,\n      alternate\n    });\n  }\n  reduceImport(node, {\n    defaultBinding,\n    namedImports\n  }) {\n    if (node.defaultBinding === defaultBinding && node.namedImports.length === namedImports.length && node.namedImports.every((v, i) => v === namedImports[i])) {\n      return node;\n    }\n    return new Shift.Import({\n      defaultBinding,\n      namedImports,\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceImportNamespace(node, {\n    defaultBinding,\n    namespaceBinding\n  }) {\n    if (node.defaultBinding === defaultBinding && node.namespaceBinding === namespaceBinding) {\n      return node;\n    }\n    return new Shift.ImportNamespace({\n      defaultBinding,\n      namespaceBinding,\n      moduleSpecifier: node.moduleSpecifier\n    });\n  }\n  reduceImportSpecifier(node, {\n    binding\n  }) {\n    if (node.binding === binding) {\n      return node;\n    }\n    return new Shift.ImportSpecifier({\n      name: node.name,\n      binding\n    });\n  }\n  reduceLabeledStatement(node, {\n    body\n  }) {\n    if (node.body === body) {\n      return node;\n    }\n    return new Shift.LabeledStatement({\n      label: node.label,\n      body\n    });\n  }\n  reduceLiteralBooleanExpression(node) {\n    return node;\n  }\n  reduceLiteralInfinityExpression(node) {\n    return node;\n  }\n  reduceLiteralNullExpression(node) {\n    return node;\n  }\n  reduceLiteralNumericExpression(node) {\n    return node;\n  }\n  reduceLiteralRegExpExpression(node) {\n    return node;\n  }\n  reduceLiteralStringExpression(node) {\n    return node;\n  }\n  reduceMethod(node, {\n    name,\n    params,\n    body\n  }) {\n    if (node.name === name && node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.Method({\n      isAsync: node.isAsync,\n      isGenerator: node.isGenerator,\n      name,\n      params,\n      body\n    });\n  }\n  reduceModule(node, {\n    directives,\n    items\n  }) {\n    if (node.directives.length === directives.length && node.directives.every((v, i) => v === directives[i]) && node.items.length === items.length && node.items.every((v, i) => v === items[i])) {\n      return node;\n    }\n    return new Shift.Module({\n      directives,\n      items\n    });\n  }\n  reduceNewExpression(node, {\n    callee,\n    arguments: _arguments\n  }) {\n    if (node.callee === callee && node.arguments.length === _arguments.length && node.arguments.every((v, i) => v === _arguments[i])) {\n      return node;\n    }\n    return new Shift.NewExpression({\n      callee,\n      arguments: _arguments\n    });\n  }\n  reduceNewTargetExpression(node) {\n    return node;\n  }\n  reduceObjectAssignmentTarget(node, {\n    properties,\n    rest\n  }) {\n    if (node.properties.length === properties.length && node.properties.every((v, i) => v === properties[i]) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ObjectAssignmentTarget({\n      properties,\n      rest\n    });\n  }\n  reduceObjectBinding(node, {\n    properties,\n    rest\n  }) {\n    if (node.properties.length === properties.length && node.properties.every((v, i) => v === properties[i]) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ObjectBinding({\n      properties,\n      rest\n    });\n  }\n  reduceObjectExpression(node, {\n    properties\n  }) {\n    if (node.properties.length === properties.length && node.properties.every((v, i) => v === properties[i])) {\n      return node;\n    }\n    return new Shift.ObjectExpression({\n      properties\n    });\n  }\n  reduceReturnStatement(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ReturnStatement({\n      expression\n    });\n  }\n  reduceScript(node, {\n    directives,\n    statements\n  }) {\n    if (node.directives.length === directives.length && node.directives.every((v, i) => v === directives[i]) && node.statements.length === statements.length && node.statements.every((v, i) => v === statements[i])) {\n      return node;\n    }\n    return new Shift.Script({\n      directives,\n      statements\n    });\n  }\n  reduceSetter(node, {\n    name,\n    param,\n    body\n  }) {\n    if (node.name === name && node.param === param && node.body === body) {\n      return node;\n    }\n    return new Shift.Setter({\n      name,\n      param,\n      body\n    });\n  }\n  reduceShorthandProperty(node, {\n    name\n  }) {\n    if (node.name === name) {\n      return node;\n    }\n    return new Shift.ShorthandProperty({\n      name\n    });\n  }\n  reduceSpreadElement(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.SpreadElement({\n      expression\n    });\n  }\n  reduceSpreadProperty(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.SpreadProperty({\n      expression\n    });\n  }\n  reduceStaticMemberAssignmentTarget(node, {\n    object\n  }) {\n    if (node.object === object) {\n      return node;\n    }\n    return new Shift.StaticMemberAssignmentTarget({\n      object,\n      property: node.property\n    });\n  }\n  reduceStaticMemberExpression(node, {\n    object\n  }) {\n    if (node.object === object) {\n      return node;\n    }\n    return new Shift.StaticMemberExpression({\n      object,\n      property: node.property\n    });\n  }\n  reduceStaticPropertyName(node) {\n    return node;\n  }\n  reduceSuper(node) {\n    return node;\n  }\n  reduceSwitchCase(node, {\n    test,\n    consequent\n  }) {\n    if (node.test === test && node.consequent.length === consequent.length && node.consequent.every((v, i) => v === consequent[i])) {\n      return node;\n    }\n    return new Shift.SwitchCase({\n      test,\n      consequent\n    });\n  }\n  reduceSwitchDefault(node, {\n    consequent\n  }) {\n    if (node.consequent.length === consequent.length && node.consequent.every((v, i) => v === consequent[i])) {\n      return node;\n    }\n    return new Shift.SwitchDefault({\n      consequent\n    });\n  }\n  reduceSwitchStatement(node, {\n    discriminant,\n    cases\n  }) {\n    if (node.discriminant === discriminant && node.cases.length === cases.length && node.cases.every((v, i) => v === cases[i])) {\n      return node;\n    }\n    return new Shift.SwitchStatement({\n      discriminant,\n      cases\n    });\n  }\n  reduceSwitchStatementWithDefault(node, {\n    discriminant,\n    preDefaultCases,\n    defaultCase,\n    postDefaultCases\n  }) {\n    if (node.discriminant === discriminant && node.preDefaultCases.length === preDefaultCases.length && node.preDefaultCases.every((v, i) => v === preDefaultCases[i]) && node.defaultCase === defaultCase && node.postDefaultCases.length === postDefaultCases.length && node.postDefaultCases.every((v, i) => v === postDefaultCases[i])) {\n      return node;\n    }\n    return new Shift.SwitchStatementWithDefault({\n      discriminant,\n      preDefaultCases,\n      defaultCase,\n      postDefaultCases\n    });\n  }\n  reduceTemplateElement(node) {\n    return node;\n  }\n  reduceTemplateExpression(node, {\n    tag,\n    elements\n  }) {\n    if (node.tag === tag && node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i])) {\n      return node;\n    }\n    return new Shift.TemplateExpression({\n      tag,\n      elements\n    });\n  }\n  reduceThisExpression(node) {\n    return node;\n  }\n  reduceThrowStatement(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ThrowStatement({\n      expression\n    });\n  }\n  reduceTryCatchStatement(node, {\n    body,\n    catchClause\n  }) {\n    if (node.body === body && node.catchClause === catchClause) {\n      return node;\n    }\n    return new Shift.TryCatchStatement({\n      body,\n      catchClause\n    });\n  }\n  reduceTryFinallyStatement(node, {\n    body,\n    catchClause,\n    finalizer\n  }) {\n    if (node.body === body && node.catchClause === catchClause && node.finalizer === finalizer) {\n      return node;\n    }\n    return new Shift.TryFinallyStatement({\n      body,\n      catchClause,\n      finalizer\n    });\n  }\n  reduceUnaryExpression(node, {\n    operand\n  }) {\n    if (node.operand === operand) {\n      return node;\n    }\n    return new Shift.UnaryExpression({\n      operator: node.operator,\n      operand\n    });\n  }\n  reduceUpdateExpression(node, {\n    operand\n  }) {\n    if (node.operand === operand) {\n      return node;\n    }\n    return new Shift.UpdateExpression({\n      isPrefix: node.isPrefix,\n      operator: node.operator,\n      operand\n    });\n  }\n  reduceVariableDeclaration(node, {\n    declarators\n  }) {\n    if (node.declarators.length === declarators.length && node.declarators.every((v, i) => v === declarators[i])) {\n      return node;\n    }\n    return new Shift.VariableDeclaration({\n      kind: node.kind,\n      declarators\n    });\n  }\n  reduceVariableDeclarationStatement(node, {\n    declaration\n  }) {\n    if (node.declaration === declaration) {\n      return node;\n    }\n    return new Shift.VariableDeclarationStatement({\n      declaration\n    });\n  }\n  reduceVariableDeclarator(node, {\n    binding,\n    init\n  }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.VariableDeclarator({\n      binding,\n      init\n    });\n  }\n  reduceWhileStatement(node, {\n    test,\n    body\n  }) {\n    if (node.test === test && node.body === body) {\n      return node;\n    }\n    return new Shift.WhileStatement({\n      test,\n      body\n    });\n  }\n  reduceWithStatement(node, {\n    object,\n    body\n  }) {\n    if (node.object === object && node.body === body) {\n      return node;\n    }\n    return new Shift.WithStatement({\n      object,\n      body\n    });\n  }\n  reduceYieldExpression(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.YieldExpression({\n      expression\n    });\n  }\n  reduceYieldGeneratorExpression(node, {\n    expression\n  }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.YieldGeneratorExpression({\n      expression\n    });\n  }\n};","map":{"version":3,"names":["Shift","require","module","exports","LazyCloneReducer","reduceArrayAssignmentTarget","node","elements","rest","length","every","v","i","ArrayAssignmentTarget","reduceArrayBinding","ArrayBinding","reduceArrayExpression","ArrayExpression","reduceArrowExpression","params","body","ArrowExpression","isAsync","reduceAssignmentExpression","binding","expression","AssignmentExpression","reduceAssignmentTargetIdentifier","reduceAssignmentTargetPropertyIdentifier","init","AssignmentTargetPropertyIdentifier","reduceAssignmentTargetPropertyProperty","name","AssignmentTargetPropertyProperty","reduceAssignmentTargetWithDefault","AssignmentTargetWithDefault","reduceAwaitExpression","AwaitExpression","reduceBinaryExpression","left","right","BinaryExpression","operator","reduceBindingIdentifier","reduceBindingPropertyIdentifier","BindingPropertyIdentifier","reduceBindingPropertyProperty","BindingPropertyProperty","reduceBindingWithDefault","BindingWithDefault","reduceBlock","statements","Block","reduceBlockStatement","block","BlockStatement","reduceBreakStatement","reduceCallExpression","callee","arguments","_arguments","CallExpression","reduceCatchClause","CatchClause","reduceClassDeclaration","super","_super","ClassDeclaration","reduceClassElement","method","ClassElement","isStatic","reduceClassExpression","ClassExpression","reduceCompoundAssignmentExpression","CompoundAssignmentExpression","reduceComputedMemberAssignmentTarget","object","ComputedMemberAssignmentTarget","reduceComputedMemberExpression","ComputedMemberExpression","reduceComputedPropertyName","ComputedPropertyName","reduceConditionalExpression","test","consequent","alternate","ConditionalExpression","reduceContinueStatement","reduceDataProperty","DataProperty","reduceDebuggerStatement","reduceDirective","reduceDoWhileStatement","DoWhileStatement","reduceEmptyStatement","reduceExport","declaration","Export","reduceExportAllFrom","reduceExportDefault","ExportDefault","reduceExportFrom","namedExports","ExportFrom","moduleSpecifier","reduceExportFromSpecifier","reduceExportLocalSpecifier","ExportLocalSpecifier","exportedName","reduceExportLocals","ExportLocals","reduceExpressionStatement","ExpressionStatement","reduceForAwaitStatement","ForAwaitStatement","reduceForInStatement","ForInStatement","reduceForOfStatement","ForOfStatement","reduceForStatement","update","ForStatement","reduceFormalParameters","items","FormalParameters","reduceFunctionBody","directives","FunctionBody","reduceFunctionDeclaration","FunctionDeclaration","isGenerator","reduceFunctionExpression","FunctionExpression","reduceGetter","Getter","reduceIdentifierExpression","reduceIfStatement","IfStatement","reduceImport","defaultBinding","namedImports","Import","reduceImportNamespace","namespaceBinding","ImportNamespace","reduceImportSpecifier","ImportSpecifier","reduceLabeledStatement","LabeledStatement","label","reduceLiteralBooleanExpression","reduceLiteralInfinityExpression","reduceLiteralNullExpression","reduceLiteralNumericExpression","reduceLiteralRegExpExpression","reduceLiteralStringExpression","reduceMethod","Method","reduceModule","Module","reduceNewExpression","NewExpression","reduceNewTargetExpression","reduceObjectAssignmentTarget","properties","ObjectAssignmentTarget","reduceObjectBinding","ObjectBinding","reduceObjectExpression","ObjectExpression","reduceReturnStatement","ReturnStatement","reduceScript","Script","reduceSetter","param","Setter","reduceShorthandProperty","ShorthandProperty","reduceSpreadElement","SpreadElement","reduceSpreadProperty","SpreadProperty","reduceStaticMemberAssignmentTarget","StaticMemberAssignmentTarget","property","reduceStaticMemberExpression","StaticMemberExpression","reduceStaticPropertyName","reduceSuper","reduceSwitchCase","SwitchCase","reduceSwitchDefault","SwitchDefault","reduceSwitchStatement","discriminant","cases","SwitchStatement","reduceSwitchStatementWithDefault","preDefaultCases","defaultCase","postDefaultCases","SwitchStatementWithDefault","reduceTemplateElement","reduceTemplateExpression","tag","TemplateExpression","reduceThisExpression","reduceThrowStatement","ThrowStatement","reduceTryCatchStatement","catchClause","TryCatchStatement","reduceTryFinallyStatement","finalizer","TryFinallyStatement","reduceUnaryExpression","operand","UnaryExpression","reduceUpdateExpression","UpdateExpression","isPrefix","reduceVariableDeclaration","declarators","VariableDeclaration","kind","reduceVariableDeclarationStatement","VariableDeclarationStatement","reduceVariableDeclarator","VariableDeclarator","reduceWhileStatement","WhileStatement","reduceWithStatement","WithStatement","reduceYieldExpression","YieldExpression","reduceYieldGeneratorExpression","YieldGeneratorExpression"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-reducer/gen/lazy-clone-reducer.js"],"sourcesContent":["// Generated by generate-lazy-clone-reducer.js\n/**\n * Copyright 2018 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst Shift = require('shift-ast');\n\nmodule.exports = class LazyCloneReducer {\n  reduceArrayAssignmentTarget(node, { elements, rest }) {\n    if ((node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i])) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ArrayAssignmentTarget({ elements, rest });\n  }\n\n  reduceArrayBinding(node, { elements, rest }) {\n    if ((node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i])) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ArrayBinding({ elements, rest });\n  }\n\n  reduceArrayExpression(node, { elements }) {\n    if ((node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i]))) {\n      return node;\n    }\n    return new Shift.ArrayExpression({ elements });\n  }\n\n  reduceArrowExpression(node, { params, body }) {\n    if (node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.ArrowExpression({ isAsync: node.isAsync, params, body });\n  }\n\n  reduceAssignmentExpression(node, { binding, expression }) {\n    if (node.binding === binding && node.expression === expression) {\n      return node;\n    }\n    return new Shift.AssignmentExpression({ binding, expression });\n  }\n\n  reduceAssignmentTargetIdentifier(node) {\n    return node;\n  }\n\n  reduceAssignmentTargetPropertyIdentifier(node, { binding, init }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.AssignmentTargetPropertyIdentifier({ binding, init });\n  }\n\n  reduceAssignmentTargetPropertyProperty(node, { name, binding }) {\n    if (node.name === name && node.binding === binding) {\n      return node;\n    }\n    return new Shift.AssignmentTargetPropertyProperty({ name, binding });\n  }\n\n  reduceAssignmentTargetWithDefault(node, { binding, init }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.AssignmentTargetWithDefault({ binding, init });\n  }\n\n  reduceAwaitExpression(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.AwaitExpression({ expression });\n  }\n\n  reduceBinaryExpression(node, { left, right }) {\n    if (node.left === left && node.right === right) {\n      return node;\n    }\n    return new Shift.BinaryExpression({ left, operator: node.operator, right });\n  }\n\n  reduceBindingIdentifier(node) {\n    return node;\n  }\n\n  reduceBindingPropertyIdentifier(node, { binding, init }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.BindingPropertyIdentifier({ binding, init });\n  }\n\n  reduceBindingPropertyProperty(node, { name, binding }) {\n    if (node.name === name && node.binding === binding) {\n      return node;\n    }\n    return new Shift.BindingPropertyProperty({ name, binding });\n  }\n\n  reduceBindingWithDefault(node, { binding, init }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.BindingWithDefault({ binding, init });\n  }\n\n  reduceBlock(node, { statements }) {\n    if ((node.statements.length === statements.length && node.statements.every((v, i) => v === statements[i]))) {\n      return node;\n    }\n    return new Shift.Block({ statements });\n  }\n\n  reduceBlockStatement(node, { block }) {\n    if (node.block === block) {\n      return node;\n    }\n    return new Shift.BlockStatement({ block });\n  }\n\n  reduceBreakStatement(node) {\n    return node;\n  }\n\n  reduceCallExpression(node, { callee, arguments: _arguments }) {\n    if (node.callee === callee && (node.arguments.length === _arguments.length && node.arguments.every((v, i) => v === _arguments[i]))) {\n      return node;\n    }\n    return new Shift.CallExpression({ callee, arguments: _arguments });\n  }\n\n  reduceCatchClause(node, { binding, body }) {\n    if (node.binding === binding && node.body === body) {\n      return node;\n    }\n    return new Shift.CatchClause({ binding, body });\n  }\n\n  reduceClassDeclaration(node, { name, super: _super, elements }) {\n    if (node.name === name && node.super === _super && (node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i]))) {\n      return node;\n    }\n    return new Shift.ClassDeclaration({ name, super: _super, elements });\n  }\n\n  reduceClassElement(node, { method }) {\n    if (node.method === method) {\n      return node;\n    }\n    return new Shift.ClassElement({ isStatic: node.isStatic, method });\n  }\n\n  reduceClassExpression(node, { name, super: _super, elements }) {\n    if (node.name === name && node.super === _super && (node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i]))) {\n      return node;\n    }\n    return new Shift.ClassExpression({ name, super: _super, elements });\n  }\n\n  reduceCompoundAssignmentExpression(node, { binding, expression }) {\n    if (node.binding === binding && node.expression === expression) {\n      return node;\n    }\n    return new Shift.CompoundAssignmentExpression({ binding, operator: node.operator, expression });\n  }\n\n  reduceComputedMemberAssignmentTarget(node, { object, expression }) {\n    if (node.object === object && node.expression === expression) {\n      return node;\n    }\n    return new Shift.ComputedMemberAssignmentTarget({ object, expression });\n  }\n\n  reduceComputedMemberExpression(node, { object, expression }) {\n    if (node.object === object && node.expression === expression) {\n      return node;\n    }\n    return new Shift.ComputedMemberExpression({ object, expression });\n  }\n\n  reduceComputedPropertyName(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ComputedPropertyName({ expression });\n  }\n\n  reduceConditionalExpression(node, { test, consequent, alternate }) {\n    if (node.test === test && node.consequent === consequent && node.alternate === alternate) {\n      return node;\n    }\n    return new Shift.ConditionalExpression({ test, consequent, alternate });\n  }\n\n  reduceContinueStatement(node) {\n    return node;\n  }\n\n  reduceDataProperty(node, { name, expression }) {\n    if (node.name === name && node.expression === expression) {\n      return node;\n    }\n    return new Shift.DataProperty({ name, expression });\n  }\n\n  reduceDebuggerStatement(node) {\n    return node;\n  }\n\n  reduceDirective(node) {\n    return node;\n  }\n\n  reduceDoWhileStatement(node, { body, test }) {\n    if (node.body === body && node.test === test) {\n      return node;\n    }\n    return new Shift.DoWhileStatement({ body, test });\n  }\n\n  reduceEmptyStatement(node) {\n    return node;\n  }\n\n  reduceExport(node, { declaration }) {\n    if (node.declaration === declaration) {\n      return node;\n    }\n    return new Shift.Export({ declaration });\n  }\n\n  reduceExportAllFrom(node) {\n    return node;\n  }\n\n  reduceExportDefault(node, { body }) {\n    if (node.body === body) {\n      return node;\n    }\n    return new Shift.ExportDefault({ body });\n  }\n\n  reduceExportFrom(node, { namedExports }) {\n    if ((node.namedExports.length === namedExports.length && node.namedExports.every((v, i) => v === namedExports[i]))) {\n      return node;\n    }\n    return new Shift.ExportFrom({ namedExports, moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceExportFromSpecifier(node) {\n    return node;\n  }\n\n  reduceExportLocalSpecifier(node, { name }) {\n    if (node.name === name) {\n      return node;\n    }\n    return new Shift.ExportLocalSpecifier({ name, exportedName: node.exportedName });\n  }\n\n  reduceExportLocals(node, { namedExports }) {\n    if ((node.namedExports.length === namedExports.length && node.namedExports.every((v, i) => v === namedExports[i]))) {\n      return node;\n    }\n    return new Shift.ExportLocals({ namedExports });\n  }\n\n  reduceExpressionStatement(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ExpressionStatement({ expression });\n  }\n\n  reduceForAwaitStatement(node, { left, right, body }) {\n    if (node.left === left && node.right === right && node.body === body) {\n      return node;\n    }\n    return new Shift.ForAwaitStatement({ left, right, body });\n  }\n\n  reduceForInStatement(node, { left, right, body }) {\n    if (node.left === left && node.right === right && node.body === body) {\n      return node;\n    }\n    return new Shift.ForInStatement({ left, right, body });\n  }\n\n  reduceForOfStatement(node, { left, right, body }) {\n    if (node.left === left && node.right === right && node.body === body) {\n      return node;\n    }\n    return new Shift.ForOfStatement({ left, right, body });\n  }\n\n  reduceForStatement(node, { init, test, update, body }) {\n    if (node.init === init && node.test === test && node.update === update && node.body === body) {\n      return node;\n    }\n    return new Shift.ForStatement({ init, test, update, body });\n  }\n\n  reduceFormalParameters(node, { items, rest }) {\n    if ((node.items.length === items.length && node.items.every((v, i) => v === items[i])) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.FormalParameters({ items, rest });\n  }\n\n  reduceFunctionBody(node, { directives, statements }) {\n    if ((node.directives.length === directives.length && node.directives.every((v, i) => v === directives[i])) && (node.statements.length === statements.length && node.statements.every((v, i) => v === statements[i]))) {\n      return node;\n    }\n    return new Shift.FunctionBody({ directives, statements });\n  }\n\n  reduceFunctionDeclaration(node, { name, params, body }) {\n    if (node.name === name && node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.FunctionDeclaration({ isAsync: node.isAsync, isGenerator: node.isGenerator, name, params, body });\n  }\n\n  reduceFunctionExpression(node, { name, params, body }) {\n    if (node.name === name && node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.FunctionExpression({ isAsync: node.isAsync, isGenerator: node.isGenerator, name, params, body });\n  }\n\n  reduceGetter(node, { name, body }) {\n    if (node.name === name && node.body === body) {\n      return node;\n    }\n    return new Shift.Getter({ name, body });\n  }\n\n  reduceIdentifierExpression(node) {\n    return node;\n  }\n\n  reduceIfStatement(node, { test, consequent, alternate }) {\n    if (node.test === test && node.consequent === consequent && node.alternate === alternate) {\n      return node;\n    }\n    return new Shift.IfStatement({ test, consequent, alternate });\n  }\n\n  reduceImport(node, { defaultBinding, namedImports }) {\n    if (node.defaultBinding === defaultBinding && (node.namedImports.length === namedImports.length && node.namedImports.every((v, i) => v === namedImports[i]))) {\n      return node;\n    }\n    return new Shift.Import({ defaultBinding, namedImports, moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceImportNamespace(node, { defaultBinding, namespaceBinding }) {\n    if (node.defaultBinding === defaultBinding && node.namespaceBinding === namespaceBinding) {\n      return node;\n    }\n    return new Shift.ImportNamespace({ defaultBinding, namespaceBinding, moduleSpecifier: node.moduleSpecifier });\n  }\n\n  reduceImportSpecifier(node, { binding }) {\n    if (node.binding === binding) {\n      return node;\n    }\n    return new Shift.ImportSpecifier({ name: node.name, binding });\n  }\n\n  reduceLabeledStatement(node, { body }) {\n    if (node.body === body) {\n      return node;\n    }\n    return new Shift.LabeledStatement({ label: node.label, body });\n  }\n\n  reduceLiteralBooleanExpression(node) {\n    return node;\n  }\n\n  reduceLiteralInfinityExpression(node) {\n    return node;\n  }\n\n  reduceLiteralNullExpression(node) {\n    return node;\n  }\n\n  reduceLiteralNumericExpression(node) {\n    return node;\n  }\n\n  reduceLiteralRegExpExpression(node) {\n    return node;\n  }\n\n  reduceLiteralStringExpression(node) {\n    return node;\n  }\n\n  reduceMethod(node, { name, params, body }) {\n    if (node.name === name && node.params === params && node.body === body) {\n      return node;\n    }\n    return new Shift.Method({ isAsync: node.isAsync, isGenerator: node.isGenerator, name, params, body });\n  }\n\n  reduceModule(node, { directives, items }) {\n    if ((node.directives.length === directives.length && node.directives.every((v, i) => v === directives[i])) && (node.items.length === items.length && node.items.every((v, i) => v === items[i]))) {\n      return node;\n    }\n    return new Shift.Module({ directives, items });\n  }\n\n  reduceNewExpression(node, { callee, arguments: _arguments }) {\n    if (node.callee === callee && (node.arguments.length === _arguments.length && node.arguments.every((v, i) => v === _arguments[i]))) {\n      return node;\n    }\n    return new Shift.NewExpression({ callee, arguments: _arguments });\n  }\n\n  reduceNewTargetExpression(node) {\n    return node;\n  }\n\n  reduceObjectAssignmentTarget(node, { properties, rest }) {\n    if ((node.properties.length === properties.length && node.properties.every((v, i) => v === properties[i])) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ObjectAssignmentTarget({ properties, rest });\n  }\n\n  reduceObjectBinding(node, { properties, rest }) {\n    if ((node.properties.length === properties.length && node.properties.every((v, i) => v === properties[i])) && node.rest === rest) {\n      return node;\n    }\n    return new Shift.ObjectBinding({ properties, rest });\n  }\n\n  reduceObjectExpression(node, { properties }) {\n    if ((node.properties.length === properties.length && node.properties.every((v, i) => v === properties[i]))) {\n      return node;\n    }\n    return new Shift.ObjectExpression({ properties });\n  }\n\n  reduceReturnStatement(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ReturnStatement({ expression });\n  }\n\n  reduceScript(node, { directives, statements }) {\n    if ((node.directives.length === directives.length && node.directives.every((v, i) => v === directives[i])) && (node.statements.length === statements.length && node.statements.every((v, i) => v === statements[i]))) {\n      return node;\n    }\n    return new Shift.Script({ directives, statements });\n  }\n\n  reduceSetter(node, { name, param, body }) {\n    if (node.name === name && node.param === param && node.body === body) {\n      return node;\n    }\n    return new Shift.Setter({ name, param, body });\n  }\n\n  reduceShorthandProperty(node, { name }) {\n    if (node.name === name) {\n      return node;\n    }\n    return new Shift.ShorthandProperty({ name });\n  }\n\n  reduceSpreadElement(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.SpreadElement({ expression });\n  }\n\n  reduceSpreadProperty(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.SpreadProperty({ expression });\n  }\n\n  reduceStaticMemberAssignmentTarget(node, { object }) {\n    if (node.object === object) {\n      return node;\n    }\n    return new Shift.StaticMemberAssignmentTarget({ object, property: node.property });\n  }\n\n  reduceStaticMemberExpression(node, { object }) {\n    if (node.object === object) {\n      return node;\n    }\n    return new Shift.StaticMemberExpression({ object, property: node.property });\n  }\n\n  reduceStaticPropertyName(node) {\n    return node;\n  }\n\n  reduceSuper(node) {\n    return node;\n  }\n\n  reduceSwitchCase(node, { test, consequent }) {\n    if (node.test === test && (node.consequent.length === consequent.length && node.consequent.every((v, i) => v === consequent[i]))) {\n      return node;\n    }\n    return new Shift.SwitchCase({ test, consequent });\n  }\n\n  reduceSwitchDefault(node, { consequent }) {\n    if ((node.consequent.length === consequent.length && node.consequent.every((v, i) => v === consequent[i]))) {\n      return node;\n    }\n    return new Shift.SwitchDefault({ consequent });\n  }\n\n  reduceSwitchStatement(node, { discriminant, cases }) {\n    if (node.discriminant === discriminant && (node.cases.length === cases.length && node.cases.every((v, i) => v === cases[i]))) {\n      return node;\n    }\n    return new Shift.SwitchStatement({ discriminant, cases });\n  }\n\n  reduceSwitchStatementWithDefault(node, { discriminant, preDefaultCases, defaultCase, postDefaultCases }) {\n    if (node.discriminant === discriminant && (node.preDefaultCases.length === preDefaultCases.length && node.preDefaultCases.every((v, i) => v === preDefaultCases[i])) && node.defaultCase === defaultCase && (node.postDefaultCases.length === postDefaultCases.length && node.postDefaultCases.every((v, i) => v === postDefaultCases[i]))) {\n      return node;\n    }\n    return new Shift.SwitchStatementWithDefault({ discriminant, preDefaultCases, defaultCase, postDefaultCases });\n  }\n\n  reduceTemplateElement(node) {\n    return node;\n  }\n\n  reduceTemplateExpression(node, { tag, elements }) {\n    if (node.tag === tag && (node.elements.length === elements.length && node.elements.every((v, i) => v === elements[i]))) {\n      return node;\n    }\n    return new Shift.TemplateExpression({ tag, elements });\n  }\n\n  reduceThisExpression(node) {\n    return node;\n  }\n\n  reduceThrowStatement(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.ThrowStatement({ expression });\n  }\n\n  reduceTryCatchStatement(node, { body, catchClause }) {\n    if (node.body === body && node.catchClause === catchClause) {\n      return node;\n    }\n    return new Shift.TryCatchStatement({ body, catchClause });\n  }\n\n  reduceTryFinallyStatement(node, { body, catchClause, finalizer }) {\n    if (node.body === body && node.catchClause === catchClause && node.finalizer === finalizer) {\n      return node;\n    }\n    return new Shift.TryFinallyStatement({ body, catchClause, finalizer });\n  }\n\n  reduceUnaryExpression(node, { operand }) {\n    if (node.operand === operand) {\n      return node;\n    }\n    return new Shift.UnaryExpression({ operator: node.operator, operand });\n  }\n\n  reduceUpdateExpression(node, { operand }) {\n    if (node.operand === operand) {\n      return node;\n    }\n    return new Shift.UpdateExpression({ isPrefix: node.isPrefix, operator: node.operator, operand });\n  }\n\n  reduceVariableDeclaration(node, { declarators }) {\n    if ((node.declarators.length === declarators.length && node.declarators.every((v, i) => v === declarators[i]))) {\n      return node;\n    }\n    return new Shift.VariableDeclaration({ kind: node.kind, declarators });\n  }\n\n  reduceVariableDeclarationStatement(node, { declaration }) {\n    if (node.declaration === declaration) {\n      return node;\n    }\n    return new Shift.VariableDeclarationStatement({ declaration });\n  }\n\n  reduceVariableDeclarator(node, { binding, init }) {\n    if (node.binding === binding && node.init === init) {\n      return node;\n    }\n    return new Shift.VariableDeclarator({ binding, init });\n  }\n\n  reduceWhileStatement(node, { test, body }) {\n    if (node.test === test && node.body === body) {\n      return node;\n    }\n    return new Shift.WhileStatement({ test, body });\n  }\n\n  reduceWithStatement(node, { object, body }) {\n    if (node.object === object && node.body === body) {\n      return node;\n    }\n    return new Shift.WithStatement({ object, body });\n  }\n\n  reduceYieldExpression(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.YieldExpression({ expression });\n  }\n\n  reduceYieldGeneratorExpression(node, { expression }) {\n    if (node.expression === expression) {\n      return node;\n    }\n    return new Shift.YieldGeneratorExpression({ expression });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}