{"ast":null,"code":"'use strict';\n\nconst codegen = require('shift-codegen');\nclass FormattedCodeGenWithStrs extends codegen.FormattedCodeGen {\n  reduceLiteralStringExpression(node) {\n    const s = super.reduceLiteralStringExpression(node);\n    let out = '';\n    for (let i = 0; i < s.token.length; ++i) {\n      const code = s.token.codePointAt(i);\n      if (code >= 0x20 && code <= 0x7E) {\n        out += s.token.charAt(i);\n      } else if (code > 0xFFFF) {\n        ++i;\n        out += '\\\\u{' + code.toString(16).toUpperCase() + '}';\n      } else if (code > 0xFF) {\n        let hex = code.toString(16).toUpperCase();\n        out += '\\\\u' + '0000'.slice(hex.length) + hex;\n      } else if (code === 0) {\n        out += '\\\\0';\n      } else {\n        let hex = code.toString(16).toUpperCase();\n        out += '\\\\x' + '00'.slice(hex.length) + hex;\n      }\n    }\n    s.token = out;\n    return s;\n  }\n}\nmodule.exports = function (tree) {\n  return codegen.default(tree, new FormattedCodeGenWithStrs());\n};","map":{"version":3,"names":["codegen","require","FormattedCodeGenWithStrs","FormattedCodeGen","reduceLiteralStringExpression","node","s","out","i","token","length","code","codePointAt","charAt","toString","toUpperCase","hex","slice","module","exports","tree","default"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/unminify/src/helpers/codegen.js"],"sourcesContent":["'use strict';\n\nconst codegen = require('shift-codegen');\n\nclass FormattedCodeGenWithStrs extends codegen.FormattedCodeGen {\n  reduceLiteralStringExpression(node) {\n    const s = super.reduceLiteralStringExpression(node);\n    let out = '';\n    for (let i = 0; i < s.token.length; ++i) {\n      const code = s.token.codePointAt(i);\n      if (code >= 0x20 && code <= 0x7E) {\n        out += s.token.charAt(i);\n      } else if (code > 0xFFFF) {\n        ++i;\n        out += '\\\\u{' + code.toString(16).toUpperCase() + '}';\n      } else if (code > 0xFF) {\n        let hex = code.toString(16).toUpperCase();\n        out += '\\\\u' + '0000'.slice(hex.length) + hex;\n      } else if (code === 0) {\n        out += '\\\\0';\n      } else {\n        let hex = code.toString(16).toUpperCase();\n        out += '\\\\x' + '00'.slice(hex.length) + hex;\n      }\n    }\n    s.token = out;\n    return s;\n  }\n}\n\nmodule.exports = function (tree) {\n  return codegen.default(tree, new FormattedCodeGenWithStrs);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAe,CAAC;AAExC,MAAMC,wBAAwB,SAASF,OAAO,CAACG,gBAAgB,CAAC;EAC9DC,6BAA6BA,CAACC,IAAI,EAAE;IAClC,MAAMC,CAAC,GAAG,KAAK,CAACF,6BAA6B,CAACC,IAAI,CAAC;IACnD,IAAIE,GAAG,GAAG,EAAE;IACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,CAACG,KAAK,CAACC,MAAM,EAAE,EAAEF,CAAC,EAAE;MACvC,MAAMG,IAAI,GAAGL,CAAC,CAACG,KAAK,CAACG,WAAW,CAACJ,CAAC,CAAC;MACnC,IAAIG,IAAI,IAAI,IAAI,IAAIA,IAAI,IAAI,IAAI,EAAE;QAChCJ,GAAG,IAAID,CAAC,CAACG,KAAK,CAACI,MAAM,CAACL,CAAC,CAAC;MAC1B,CAAC,MAAM,IAAIG,IAAI,GAAG,MAAM,EAAE;QACxB,EAAEH,CAAC;QACHD,GAAG,IAAI,MAAM,GAAGI,IAAI,CAACG,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,GAAG;MACvD,CAAC,MAAM,IAAIJ,IAAI,GAAG,IAAI,EAAE;QACtB,IAAIK,GAAG,GAAGL,IAAI,CAACG,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;QACzCR,GAAG,IAAI,KAAK,GAAG,MAAM,CAACU,KAAK,CAACD,GAAG,CAACN,MAAM,CAAC,GAAGM,GAAG;MAC/C,CAAC,MAAM,IAAIL,IAAI,KAAK,CAAC,EAAE;QACrBJ,GAAG,IAAI,KAAK;MACd,CAAC,MAAM;QACL,IAAIS,GAAG,GAAGL,IAAI,CAACG,QAAQ,CAAC,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;QACzCR,GAAG,IAAI,KAAK,GAAG,IAAI,CAACU,KAAK,CAACD,GAAG,CAACN,MAAM,CAAC,GAAGM,GAAG;MAC7C;IACF;IACAV,CAAC,CAACG,KAAK,GAAGF,GAAG;IACb,OAAOD,CAAC;EACV;AACF;AAEAY,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAE;EAC/B,OAAOpB,OAAO,CAACqB,OAAO,CAACD,IAAI,EAAE,IAAIlB,wBAAwB,CAAD,CAAC,CAAC;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}