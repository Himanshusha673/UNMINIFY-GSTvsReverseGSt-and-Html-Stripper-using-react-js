{"ast":null,"code":"// Generated by src/generate-spec.js. \n\n/**\n * Copyright 2016 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function () {\n  var SPEC = {};\n  var BOOLEAN = {\n    typeName: \"Boolean\"\n  };\n  var DOUBLE = {\n    typeName: \"Number\"\n  };\n  var STRING = {\n    typeName: \"String\"\n  };\n  function Maybe(arg) {\n    return {\n      typeName: \"Maybe\",\n      argument: arg\n    };\n  }\n  function List(arg) {\n    return {\n      typeName: \"List\",\n      argument: arg\n    };\n  }\n  function Const(arg) {\n    return {\n      typeName: \"Const\",\n      argument: arg\n    };\n  }\n  function Union() {\n    return {\n      typeName: \"Union\",\n      arguments: [].slice.call(arguments, 0)\n    };\n  }\n  var TYPE_INDICATOR = {\n    typeName: \"Enum\",\n    values: [\"ArrayAssignmentTarget\", \"ArrayBinding\", \"ArrayExpression\", \"ArrowExpression\", \"AssignmentExpression\", \"AssignmentTargetIdentifier\", \"AssignmentTargetPropertyIdentifier\", \"AssignmentTargetPropertyProperty\", \"AssignmentTargetWithDefault\", \"AwaitExpression\", \"BinaryExpression\", \"BindingIdentifier\", \"BindingPropertyIdentifier\", \"BindingPropertyProperty\", \"BindingWithDefault\", \"Block\", \"BlockStatement\", \"BreakStatement\", \"CallExpression\", \"CatchClause\", \"ClassDeclaration\", \"ClassElement\", \"ClassExpression\", \"CompoundAssignmentExpression\", \"ComputedMemberAssignmentTarget\", \"ComputedMemberExpression\", \"ComputedPropertyName\", \"ConditionalExpression\", \"ContinueStatement\", \"DataProperty\", \"DebuggerStatement\", \"Directive\", \"DoWhileStatement\", \"EmptyStatement\", \"Export\", \"ExportAllFrom\", \"ExportDefault\", \"ExportFrom\", \"ExportFromSpecifier\", \"ExportLocalSpecifier\", \"ExportLocals\", \"ExpressionStatement\", \"ForAwaitStatement\", \"ForInStatement\", \"ForOfStatement\", \"ForStatement\", \"FormalParameters\", \"FunctionBody\", \"FunctionDeclaration\", \"FunctionExpression\", \"Getter\", \"IdentifierExpression\", \"IfStatement\", \"Import\", \"ImportNamespace\", \"ImportSpecifier\", \"LabeledStatement\", \"LiteralBooleanExpression\", \"LiteralInfinityExpression\", \"LiteralNullExpression\", \"LiteralNumericExpression\", \"LiteralRegExpExpression\", \"LiteralStringExpression\", \"Method\", \"Module\", \"NewExpression\", \"NewTargetExpression\", \"ObjectAssignmentTarget\", \"ObjectBinding\", \"ObjectExpression\", \"ReturnStatement\", \"Script\", \"Setter\", \"ShorthandProperty\", \"SpreadElement\", \"SpreadProperty\", \"StaticMemberAssignmentTarget\", \"StaticMemberExpression\", \"StaticPropertyName\", \"Super\", \"SwitchCase\", \"SwitchDefault\", \"SwitchStatement\", \"SwitchStatementWithDefault\", \"TemplateElement\", \"TemplateExpression\", \"ThisExpression\", \"ThrowStatement\", \"TryCatchStatement\", \"TryFinallyStatement\", \"UnaryExpression\", \"UpdateExpression\", \"VariableDeclaration\", \"VariableDeclarationStatement\", \"VariableDeclarator\", \"WhileStatement\", \"WithStatement\", \"YieldExpression\", \"YieldGeneratorExpression\"]\n  };\n  var BinaryOperator = {\n    typeName: \"Enum\",\n    values: [\"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">\", \">=\", \"in\", \"instanceof\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \",\", \"||\", \"&&\", \"|\", \"^\", \"&\"]\n  };\n  var CompoundAssignmentOperator = {\n    typeName: \"Enum\",\n    values: [\"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"**=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"^=\", \"&=\"]\n  };\n  var UnaryOperator = {\n    typeName: \"Enum\",\n    values: [\"+\", \"-\", \"!\", \"~\", \"typeof\", \"void\", \"delete\"]\n  };\n  var UpdateOperator = {\n    typeName: \"Enum\",\n    values: [\"++\", \"--\"]\n  };\n  var VariableDeclarationKind = {\n    typeName: \"Enum\",\n    values: [\"var\", \"let\", \"const\"]\n  };\n  var ArrayAssignmentTarget = SPEC.ArrayAssignmentTarget = {};\n  var ArrayBinding = SPEC.ArrayBinding = {};\n  var ArrayExpression = SPEC.ArrayExpression = {};\n  var ArrowExpression = SPEC.ArrowExpression = {};\n  var AssignmentExpression = SPEC.AssignmentExpression = {};\n  var AssignmentTargetIdentifier = SPEC.AssignmentTargetIdentifier = {};\n  var AssignmentTargetPropertyIdentifier = SPEC.AssignmentTargetPropertyIdentifier = {};\n  var AssignmentTargetPropertyProperty = SPEC.AssignmentTargetPropertyProperty = {};\n  var AssignmentTargetWithDefault = SPEC.AssignmentTargetWithDefault = {};\n  var AwaitExpression = SPEC.AwaitExpression = {};\n  var BinaryExpression = SPEC.BinaryExpression = {};\n  var BindingIdentifier = SPEC.BindingIdentifier = {};\n  var BindingPropertyIdentifier = SPEC.BindingPropertyIdentifier = {};\n  var BindingPropertyProperty = SPEC.BindingPropertyProperty = {};\n  var BindingWithDefault = SPEC.BindingWithDefault = {};\n  var Block = SPEC.Block = {};\n  var BlockStatement = SPEC.BlockStatement = {};\n  var BreakStatement = SPEC.BreakStatement = {};\n  var CallExpression = SPEC.CallExpression = {};\n  var CatchClause = SPEC.CatchClause = {};\n  var ClassDeclaration = SPEC.ClassDeclaration = {};\n  var ClassElement = SPEC.ClassElement = {};\n  var ClassExpression = SPEC.ClassExpression = {};\n  var CompoundAssignmentExpression = SPEC.CompoundAssignmentExpression = {};\n  var ComputedMemberAssignmentTarget = SPEC.ComputedMemberAssignmentTarget = {};\n  var ComputedMemberExpression = SPEC.ComputedMemberExpression = {};\n  var ComputedPropertyName = SPEC.ComputedPropertyName = {};\n  var ConditionalExpression = SPEC.ConditionalExpression = {};\n  var ContinueStatement = SPEC.ContinueStatement = {};\n  var DataProperty = SPEC.DataProperty = {};\n  var DebuggerStatement = SPEC.DebuggerStatement = {};\n  var Directive = SPEC.Directive = {};\n  var DoWhileStatement = SPEC.DoWhileStatement = {};\n  var EmptyStatement = SPEC.EmptyStatement = {};\n  var Export = SPEC.Export = {};\n  var ExportAllFrom = SPEC.ExportAllFrom = {};\n  var ExportDefault = SPEC.ExportDefault = {};\n  var ExportFrom = SPEC.ExportFrom = {};\n  var ExportFromSpecifier = SPEC.ExportFromSpecifier = {};\n  var ExportLocalSpecifier = SPEC.ExportLocalSpecifier = {};\n  var ExportLocals = SPEC.ExportLocals = {};\n  var ExpressionStatement = SPEC.ExpressionStatement = {};\n  var ForAwaitStatement = SPEC.ForAwaitStatement = {};\n  var ForInStatement = SPEC.ForInStatement = {};\n  var ForOfStatement = SPEC.ForOfStatement = {};\n  var ForStatement = SPEC.ForStatement = {};\n  var FormalParameters = SPEC.FormalParameters = {};\n  var FunctionBody = SPEC.FunctionBody = {};\n  var FunctionDeclaration = SPEC.FunctionDeclaration = {};\n  var FunctionExpression = SPEC.FunctionExpression = {};\n  var Getter = SPEC.Getter = {};\n  var IdentifierExpression = SPEC.IdentifierExpression = {};\n  var IfStatement = SPEC.IfStatement = {};\n  var Import = SPEC.Import = {};\n  var ImportNamespace = SPEC.ImportNamespace = {};\n  var ImportSpecifier = SPEC.ImportSpecifier = {};\n  var LabeledStatement = SPEC.LabeledStatement = {};\n  var LiteralBooleanExpression = SPEC.LiteralBooleanExpression = {};\n  var LiteralInfinityExpression = SPEC.LiteralInfinityExpression = {};\n  var LiteralNullExpression = SPEC.LiteralNullExpression = {};\n  var LiteralNumericExpression = SPEC.LiteralNumericExpression = {};\n  var LiteralRegExpExpression = SPEC.LiteralRegExpExpression = {};\n  var LiteralStringExpression = SPEC.LiteralStringExpression = {};\n  var Method = SPEC.Method = {};\n  var Module = SPEC.Module = {};\n  var NewExpression = SPEC.NewExpression = {};\n  var NewTargetExpression = SPEC.NewTargetExpression = {};\n  var ObjectAssignmentTarget = SPEC.ObjectAssignmentTarget = {};\n  var ObjectBinding = SPEC.ObjectBinding = {};\n  var ObjectExpression = SPEC.ObjectExpression = {};\n  var ReturnStatement = SPEC.ReturnStatement = {};\n  var Script = SPEC.Script = {};\n  var Setter = SPEC.Setter = {};\n  var ShorthandProperty = SPEC.ShorthandProperty = {};\n  var SpreadElement = SPEC.SpreadElement = {};\n  var SpreadProperty = SPEC.SpreadProperty = {};\n  var StaticMemberAssignmentTarget = SPEC.StaticMemberAssignmentTarget = {};\n  var StaticMemberExpression = SPEC.StaticMemberExpression = {};\n  var StaticPropertyName = SPEC.StaticPropertyName = {};\n  var Super = SPEC.Super = {};\n  var SwitchCase = SPEC.SwitchCase = {};\n  var SwitchDefault = SPEC.SwitchDefault = {};\n  var SwitchStatement = SPEC.SwitchStatement = {};\n  var SwitchStatementWithDefault = SPEC.SwitchStatementWithDefault = {};\n  var TemplateElement = SPEC.TemplateElement = {};\n  var TemplateExpression = SPEC.TemplateExpression = {};\n  var ThisExpression = SPEC.ThisExpression = {};\n  var ThrowStatement = SPEC.ThrowStatement = {};\n  var TryCatchStatement = SPEC.TryCatchStatement = {};\n  var TryFinallyStatement = SPEC.TryFinallyStatement = {};\n  var UnaryExpression = SPEC.UnaryExpression = {};\n  var UpdateExpression = SPEC.UpdateExpression = {};\n  var VariableDeclaration = SPEC.VariableDeclaration = {};\n  var VariableDeclarationStatement = SPEC.VariableDeclarationStatement = {};\n  var VariableDeclarator = SPEC.VariableDeclarator = {};\n  var WhileStatement = SPEC.WhileStatement = {};\n  var WithStatement = SPEC.WithStatement = {};\n  var YieldExpression = SPEC.YieldExpression = {};\n  var YieldGeneratorExpression = SPEC.YieldGeneratorExpression = {};\n  var MemberExpression = Union(ComputedMemberExpression, StaticMemberExpression);\n  var AssignmentTargetProperty = Union(AssignmentTargetPropertyIdentifier, AssignmentTargetPropertyProperty);\n  var Class = Union(ClassDeclaration, ClassExpression);\n  var ExportDeclaration = Union(Export, ExportAllFrom, ExportDefault, ExportFrom, ExportLocals);\n  var PropertyName = Union(ComputedPropertyName, StaticPropertyName);\n  var Function = Union(FunctionDeclaration, FunctionExpression);\n  var ImportDeclaration = Union(Import, ImportNamespace);\n  var IterationStatement = Union(DoWhileStatement, ForAwaitStatement, ForInStatement, ForOfStatement, ForStatement, WhileStatement);\n  var MemberAssignmentTarget = Union(ComputedMemberAssignmentTarget, StaticMemberAssignmentTarget);\n  var BindingProperty = Union(BindingPropertyIdentifier, BindingPropertyProperty);\n  var MethodDefinition = Union(Getter, Method, Setter);\n  var Program = Union(Module, Script);\n  var VariableReference = Union(AssignmentTargetIdentifier, BindingIdentifier, IdentifierExpression);\n  var NamedObjectProperty = Union(DataProperty, MethodDefinition);\n  var Expression = Union(ArrayExpression, ArrowExpression, AssignmentExpression, AwaitExpression, BinaryExpression, CallExpression, ClassExpression, CompoundAssignmentExpression, ConditionalExpression, FunctionExpression, IdentifierExpression, LiteralBooleanExpression, LiteralInfinityExpression, LiteralNullExpression, LiteralNumericExpression, LiteralRegExpExpression, LiteralStringExpression, MemberExpression, NewExpression, NewTargetExpression, ObjectExpression, TemplateExpression, ThisExpression, UnaryExpression, UpdateExpression, YieldExpression, YieldGeneratorExpression);\n  var Statement = Union(BlockStatement, BreakStatement, ClassDeclaration, ContinueStatement, DebuggerStatement, EmptyStatement, ExpressionStatement, FunctionDeclaration, IfStatement, IterationStatement, LabeledStatement, ReturnStatement, SwitchStatement, SwitchStatementWithDefault, ThrowStatement, TryCatchStatement, TryFinallyStatement, VariableDeclarationStatement, WithStatement);\n  var ObjectProperty = Union(NamedObjectProperty, ShorthandProperty, SpreadProperty);\n  var Node = Union(ArrayAssignmentTarget, ArrayBinding, AssignmentTargetProperty, AssignmentTargetWithDefault, BindingProperty, BindingWithDefault, Block, CatchClause, ClassElement, Directive, ExportDeclaration, ExportFromSpecifier, ExportLocalSpecifier, Expression, FormalParameters, FunctionBody, ImportDeclaration, ImportSpecifier, MemberAssignmentTarget, ObjectAssignmentTarget, ObjectBinding, ObjectProperty, Program, PropertyName, SpreadElement, Statement, Super, SwitchCase, SwitchDefault, TemplateElement, VariableDeclaration, VariableDeclarator, VariableReference);\n  ArrayAssignmentTarget.typeName = \"ArrayAssignmentTarget\";\n  ArrayAssignmentTarget.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ArrayAssignmentTarget\"\n  }, {\n    name: \"elements\",\n    type: List(Maybe(Union(AssignmentTargetWithDefault, Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)))))\n  }, {\n    name: \"rest\",\n    type: Maybe(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)))\n  }];\n  ArrayBinding.typeName = \"ArrayBinding\";\n  ArrayBinding.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ArrayBinding\"\n  }, {\n    name: \"elements\",\n    type: List(Maybe(Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))))\n  }, {\n    name: \"rest\",\n    type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))\n  }];\n  ArrayExpression.typeName = \"ArrayExpression\";\n  ArrayExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ArrayExpression\"\n  }, {\n    name: \"elements\",\n    type: List(Maybe(Union(Expression, SpreadElement)))\n  }];\n  ArrowExpression.typeName = \"ArrowExpression\";\n  ArrowExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ArrowExpression\"\n  }, {\n    name: \"isAsync\",\n    type: BOOLEAN\n  }, {\n    name: \"params\",\n    type: FormalParameters\n  }, {\n    name: \"body\",\n    type: Union(Expression, FunctionBody)\n  }];\n  AssignmentExpression.typeName = \"AssignmentExpression\";\n  AssignmentExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"AssignmentExpression\"\n  }, {\n    name: \"binding\",\n    type: Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  AssignmentTargetIdentifier.typeName = \"AssignmentTargetIdentifier\";\n  AssignmentTargetIdentifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"AssignmentTargetIdentifier\"\n  }, {\n    name: \"name\",\n    type: STRING\n  }];\n  AssignmentTargetPropertyIdentifier.typeName = \"AssignmentTargetPropertyIdentifier\";\n  AssignmentTargetPropertyIdentifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"AssignmentTargetPropertyIdentifier\"\n  }, {\n    name: \"binding\",\n    type: AssignmentTargetIdentifier\n  }, {\n    name: \"init\",\n    type: Maybe(Expression)\n  }];\n  AssignmentTargetPropertyProperty.typeName = \"AssignmentTargetPropertyProperty\";\n  AssignmentTargetPropertyProperty.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"AssignmentTargetPropertyProperty\"\n  }, {\n    name: \"name\",\n    type: PropertyName\n  }, {\n    name: \"binding\",\n    type: Union(AssignmentTargetWithDefault, Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)))\n  }];\n  AssignmentTargetWithDefault.typeName = \"AssignmentTargetWithDefault\";\n  AssignmentTargetWithDefault.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"AssignmentTargetWithDefault\"\n  }, {\n    name: \"binding\",\n    type: Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))\n  }, {\n    name: \"init\",\n    type: Expression\n  }];\n  AwaitExpression.typeName = \"AwaitExpression\";\n  AwaitExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"AwaitExpression\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  BinaryExpression.typeName = \"BinaryExpression\";\n  BinaryExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BinaryExpression\"\n  }, {\n    name: \"left\",\n    type: Expression\n  }, {\n    name: \"operator\",\n    type: BinaryOperator\n  }, {\n    name: \"right\",\n    type: Expression\n  }];\n  BindingIdentifier.typeName = \"BindingIdentifier\";\n  BindingIdentifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BindingIdentifier\"\n  }, {\n    name: \"name\",\n    type: STRING\n  }];\n  BindingPropertyIdentifier.typeName = \"BindingPropertyIdentifier\";\n  BindingPropertyIdentifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BindingPropertyIdentifier\"\n  }, {\n    name: \"binding\",\n    type: BindingIdentifier\n  }, {\n    name: \"init\",\n    type: Maybe(Expression)\n  }];\n  BindingPropertyProperty.typeName = \"BindingPropertyProperty\";\n  BindingPropertyProperty.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BindingPropertyProperty\"\n  }, {\n    name: \"name\",\n    type: PropertyName\n  }, {\n    name: \"binding\",\n    type: Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))\n  }];\n  BindingWithDefault.typeName = \"BindingWithDefault\";\n  BindingWithDefault.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BindingWithDefault\"\n  }, {\n    name: \"binding\",\n    type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))\n  }, {\n    name: \"init\",\n    type: Expression\n  }];\n  Block.typeName = \"Block\";\n  Block.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Block\"\n  }, {\n    name: \"statements\",\n    type: List(Statement)\n  }];\n  BlockStatement.typeName = \"BlockStatement\";\n  BlockStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BlockStatement\"\n  }, {\n    name: \"block\",\n    type: Block\n  }];\n  BreakStatement.typeName = \"BreakStatement\";\n  BreakStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"BreakStatement\"\n  }, {\n    name: \"label\",\n    type: Maybe(STRING)\n  }];\n  CallExpression.typeName = \"CallExpression\";\n  CallExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"CallExpression\"\n  }, {\n    name: \"callee\",\n    type: Union(Expression, Super)\n  }, {\n    name: \"arguments\",\n    type: List(Union(Expression, SpreadElement))\n  }];\n  CatchClause.typeName = \"CatchClause\";\n  CatchClause.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"CatchClause\"\n  }, {\n    name: \"binding\",\n    type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))\n  }, {\n    name: \"body\",\n    type: Block\n  }];\n  ClassDeclaration.typeName = \"ClassDeclaration\";\n  ClassDeclaration.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ClassDeclaration\"\n  }, {\n    name: \"name\",\n    type: BindingIdentifier\n  }, {\n    name: \"super\",\n    type: Maybe(Expression)\n  }, {\n    name: \"elements\",\n    type: List(ClassElement)\n  }];\n  ClassElement.typeName = \"ClassElement\";\n  ClassElement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ClassElement\"\n  }, {\n    name: \"isStatic\",\n    type: BOOLEAN\n  }, {\n    name: \"method\",\n    type: MethodDefinition\n  }];\n  ClassExpression.typeName = \"ClassExpression\";\n  ClassExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ClassExpression\"\n  }, {\n    name: \"name\",\n    type: Maybe(BindingIdentifier)\n  }, {\n    name: \"super\",\n    type: Maybe(Expression)\n  }, {\n    name: \"elements\",\n    type: List(ClassElement)\n  }];\n  CompoundAssignmentExpression.typeName = \"CompoundAssignmentExpression\";\n  CompoundAssignmentExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"CompoundAssignmentExpression\"\n  }, {\n    name: \"binding\",\n    type: Union(AssignmentTargetIdentifier, MemberAssignmentTarget)\n  }, {\n    name: \"operator\",\n    type: CompoundAssignmentOperator\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  ComputedMemberAssignmentTarget.typeName = \"ComputedMemberAssignmentTarget\";\n  ComputedMemberAssignmentTarget.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ComputedMemberAssignmentTarget\"\n  }, {\n    name: \"object\",\n    type: Union(Expression, Super)\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  ComputedMemberExpression.typeName = \"ComputedMemberExpression\";\n  ComputedMemberExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ComputedMemberExpression\"\n  }, {\n    name: \"object\",\n    type: Union(Expression, Super)\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  ComputedPropertyName.typeName = \"ComputedPropertyName\";\n  ComputedPropertyName.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ComputedPropertyName\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  ConditionalExpression.typeName = \"ConditionalExpression\";\n  ConditionalExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ConditionalExpression\"\n  }, {\n    name: \"test\",\n    type: Expression\n  }, {\n    name: \"consequent\",\n    type: Expression\n  }, {\n    name: \"alternate\",\n    type: Expression\n  }];\n  ContinueStatement.typeName = \"ContinueStatement\";\n  ContinueStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ContinueStatement\"\n  }, {\n    name: \"label\",\n    type: Maybe(STRING)\n  }];\n  DataProperty.typeName = \"DataProperty\";\n  DataProperty.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"DataProperty\"\n  }, {\n    name: \"name\",\n    type: PropertyName\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  DebuggerStatement.typeName = \"DebuggerStatement\";\n  DebuggerStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"DebuggerStatement\"\n  }];\n  Directive.typeName = \"Directive\";\n  Directive.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Directive\"\n  }, {\n    name: \"rawValue\",\n    type: STRING\n  }];\n  DoWhileStatement.typeName = \"DoWhileStatement\";\n  DoWhileStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"DoWhileStatement\"\n  }, {\n    name: \"body\",\n    type: Statement\n  }, {\n    name: \"test\",\n    type: Expression\n  }];\n  EmptyStatement.typeName = \"EmptyStatement\";\n  EmptyStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"EmptyStatement\"\n  }];\n  Export.typeName = \"Export\";\n  Export.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Export\"\n  }, {\n    name: \"declaration\",\n    type: Union(ClassDeclaration, FunctionDeclaration, VariableDeclaration)\n  }];\n  ExportAllFrom.typeName = \"ExportAllFrom\";\n  ExportAllFrom.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExportAllFrom\"\n  }, {\n    name: \"moduleSpecifier\",\n    type: STRING\n  }];\n  ExportDefault.typeName = \"ExportDefault\";\n  ExportDefault.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExportDefault\"\n  }, {\n    name: \"body\",\n    type: Union(ClassDeclaration, Expression, FunctionDeclaration)\n  }];\n  ExportFrom.typeName = \"ExportFrom\";\n  ExportFrom.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExportFrom\"\n  }, {\n    name: \"namedExports\",\n    type: List(ExportFromSpecifier)\n  }, {\n    name: \"moduleSpecifier\",\n    type: STRING\n  }];\n  ExportFromSpecifier.typeName = \"ExportFromSpecifier\";\n  ExportFromSpecifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExportFromSpecifier\"\n  }, {\n    name: \"name\",\n    type: STRING\n  }, {\n    name: \"exportedName\",\n    type: Maybe(STRING)\n  }];\n  ExportLocalSpecifier.typeName = \"ExportLocalSpecifier\";\n  ExportLocalSpecifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExportLocalSpecifier\"\n  }, {\n    name: \"name\",\n    type: IdentifierExpression\n  }, {\n    name: \"exportedName\",\n    type: Maybe(STRING)\n  }];\n  ExportLocals.typeName = \"ExportLocals\";\n  ExportLocals.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExportLocals\"\n  }, {\n    name: \"namedExports\",\n    type: List(ExportLocalSpecifier)\n  }];\n  ExpressionStatement.typeName = \"ExpressionStatement\";\n  ExpressionStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ExpressionStatement\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  ForAwaitStatement.typeName = \"ForAwaitStatement\";\n  ForAwaitStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ForAwaitStatement\"\n  }, {\n    name: \"left\",\n    type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration)\n  }, {\n    name: \"right\",\n    type: Expression\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  ForInStatement.typeName = \"ForInStatement\";\n  ForInStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ForInStatement\"\n  }, {\n    name: \"left\",\n    type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration)\n  }, {\n    name: \"right\",\n    type: Expression\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  ForOfStatement.typeName = \"ForOfStatement\";\n  ForOfStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ForOfStatement\"\n  }, {\n    name: \"left\",\n    type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration)\n  }, {\n    name: \"right\",\n    type: Expression\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  ForStatement.typeName = \"ForStatement\";\n  ForStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ForStatement\"\n  }, {\n    name: \"init\",\n    type: Maybe(Union(Expression, VariableDeclaration))\n  }, {\n    name: \"test\",\n    type: Maybe(Expression)\n  }, {\n    name: \"update\",\n    type: Maybe(Expression)\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  FormalParameters.typeName = \"FormalParameters\";\n  FormalParameters.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"FormalParameters\"\n  }, {\n    name: \"items\",\n    type: List(Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))))\n  }, {\n    name: \"rest\",\n    type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))\n  }];\n  FunctionBody.typeName = \"FunctionBody\";\n  FunctionBody.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"FunctionBody\"\n  }, {\n    name: \"directives\",\n    type: List(Directive)\n  }, {\n    name: \"statements\",\n    type: List(Statement)\n  }];\n  FunctionDeclaration.typeName = \"FunctionDeclaration\";\n  FunctionDeclaration.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"FunctionDeclaration\"\n  }, {\n    name: \"isAsync\",\n    type: BOOLEAN\n  }, {\n    name: \"isGenerator\",\n    type: BOOLEAN\n  }, {\n    name: \"name\",\n    type: BindingIdentifier\n  }, {\n    name: \"params\",\n    type: FormalParameters\n  }, {\n    name: \"body\",\n    type: FunctionBody\n  }];\n  FunctionExpression.typeName = \"FunctionExpression\";\n  FunctionExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"FunctionExpression\"\n  }, {\n    name: \"isAsync\",\n    type: BOOLEAN\n  }, {\n    name: \"isGenerator\",\n    type: BOOLEAN\n  }, {\n    name: \"name\",\n    type: Maybe(BindingIdentifier)\n  }, {\n    name: \"params\",\n    type: FormalParameters\n  }, {\n    name: \"body\",\n    type: FunctionBody\n  }];\n  Getter.typeName = \"Getter\";\n  Getter.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Getter\"\n  }, {\n    name: \"name\",\n    type: PropertyName\n  }, {\n    name: \"body\",\n    type: FunctionBody\n  }];\n  IdentifierExpression.typeName = \"IdentifierExpression\";\n  IdentifierExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"IdentifierExpression\"\n  }, {\n    name: \"name\",\n    type: STRING\n  }];\n  IfStatement.typeName = \"IfStatement\";\n  IfStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"IfStatement\"\n  }, {\n    name: \"test\",\n    type: Expression\n  }, {\n    name: \"consequent\",\n    type: Statement\n  }, {\n    name: \"alternate\",\n    type: Maybe(Statement)\n  }];\n  Import.typeName = \"Import\";\n  Import.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Import\"\n  }, {\n    name: \"defaultBinding\",\n    type: Maybe(BindingIdentifier)\n  }, {\n    name: \"namedImports\",\n    type: List(ImportSpecifier)\n  }, {\n    name: \"moduleSpecifier\",\n    type: STRING\n  }];\n  ImportNamespace.typeName = \"ImportNamespace\";\n  ImportNamespace.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ImportNamespace\"\n  }, {\n    name: \"defaultBinding\",\n    type: Maybe(BindingIdentifier)\n  }, {\n    name: \"namespaceBinding\",\n    type: BindingIdentifier\n  }, {\n    name: \"moduleSpecifier\",\n    type: STRING\n  }];\n  ImportSpecifier.typeName = \"ImportSpecifier\";\n  ImportSpecifier.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ImportSpecifier\"\n  }, {\n    name: \"name\",\n    type: Maybe(STRING)\n  }, {\n    name: \"binding\",\n    type: BindingIdentifier\n  }];\n  LabeledStatement.typeName = \"LabeledStatement\";\n  LabeledStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LabeledStatement\"\n  }, {\n    name: \"label\",\n    type: STRING\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  LiteralBooleanExpression.typeName = \"LiteralBooleanExpression\";\n  LiteralBooleanExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LiteralBooleanExpression\"\n  }, {\n    name: \"value\",\n    type: BOOLEAN\n  }];\n  LiteralInfinityExpression.typeName = \"LiteralInfinityExpression\";\n  LiteralInfinityExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LiteralInfinityExpression\"\n  }];\n  LiteralNullExpression.typeName = \"LiteralNullExpression\";\n  LiteralNullExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LiteralNullExpression\"\n  }];\n  LiteralNumericExpression.typeName = \"LiteralNumericExpression\";\n  LiteralNumericExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LiteralNumericExpression\"\n  }, {\n    name: \"value\",\n    type: DOUBLE\n  }];\n  LiteralRegExpExpression.typeName = \"LiteralRegExpExpression\";\n  LiteralRegExpExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LiteralRegExpExpression\"\n  }, {\n    name: \"pattern\",\n    type: STRING\n  }, {\n    name: \"global\",\n    type: BOOLEAN\n  }, {\n    name: \"ignoreCase\",\n    type: BOOLEAN\n  }, {\n    name: \"multiLine\",\n    type: BOOLEAN\n  }, {\n    name: \"dotAll\",\n    type: BOOLEAN\n  }, {\n    name: \"unicode\",\n    type: BOOLEAN\n  }, {\n    name: \"sticky\",\n    type: BOOLEAN\n  }];\n  LiteralStringExpression.typeName = \"LiteralStringExpression\";\n  LiteralStringExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"LiteralStringExpression\"\n  }, {\n    name: \"value\",\n    type: STRING\n  }];\n  Method.typeName = \"Method\";\n  Method.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Method\"\n  }, {\n    name: \"isAsync\",\n    type: BOOLEAN\n  }, {\n    name: \"isGenerator\",\n    type: BOOLEAN\n  }, {\n    name: \"name\",\n    type: PropertyName\n  }, {\n    name: \"params\",\n    type: FormalParameters\n  }, {\n    name: \"body\",\n    type: FunctionBody\n  }];\n  Module.typeName = \"Module\";\n  Module.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Module\"\n  }, {\n    name: \"directives\",\n    type: List(Directive)\n  }, {\n    name: \"items\",\n    type: List(Union(ExportDeclaration, ImportDeclaration, Statement))\n  }];\n  NewExpression.typeName = \"NewExpression\";\n  NewExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"NewExpression\"\n  }, {\n    name: \"callee\",\n    type: Expression\n  }, {\n    name: \"arguments\",\n    type: List(Union(Expression, SpreadElement))\n  }];\n  NewTargetExpression.typeName = \"NewTargetExpression\";\n  NewTargetExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"NewTargetExpression\"\n  }];\n  ObjectAssignmentTarget.typeName = \"ObjectAssignmentTarget\";\n  ObjectAssignmentTarget.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ObjectAssignmentTarget\"\n  }, {\n    name: \"properties\",\n    type: List(AssignmentTargetProperty)\n  }, {\n    name: \"rest\",\n    type: Maybe(Union(AssignmentTargetIdentifier, MemberAssignmentTarget))\n  }];\n  ObjectBinding.typeName = \"ObjectBinding\";\n  ObjectBinding.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ObjectBinding\"\n  }, {\n    name: \"properties\",\n    type: List(BindingProperty)\n  }, {\n    name: \"rest\",\n    type: Maybe(BindingIdentifier)\n  }];\n  ObjectExpression.typeName = \"ObjectExpression\";\n  ObjectExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ObjectExpression\"\n  }, {\n    name: \"properties\",\n    type: List(ObjectProperty)\n  }];\n  ReturnStatement.typeName = \"ReturnStatement\";\n  ReturnStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ReturnStatement\"\n  }, {\n    name: \"expression\",\n    type: Maybe(Expression)\n  }];\n  Script.typeName = \"Script\";\n  Script.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Script\"\n  }, {\n    name: \"directives\",\n    type: List(Directive)\n  }, {\n    name: \"statements\",\n    type: List(Statement)\n  }];\n  Setter.typeName = \"Setter\";\n  Setter.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Setter\"\n  }, {\n    name: \"name\",\n    type: PropertyName\n  }, {\n    name: \"param\",\n    type: Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))\n  }, {\n    name: \"body\",\n    type: FunctionBody\n  }];\n  ShorthandProperty.typeName = \"ShorthandProperty\";\n  ShorthandProperty.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ShorthandProperty\"\n  }, {\n    name: \"name\",\n    type: IdentifierExpression\n  }];\n  SpreadElement.typeName = \"SpreadElement\";\n  SpreadElement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"SpreadElement\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  SpreadProperty.typeName = \"SpreadProperty\";\n  SpreadProperty.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"SpreadProperty\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  StaticMemberAssignmentTarget.typeName = \"StaticMemberAssignmentTarget\";\n  StaticMemberAssignmentTarget.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"StaticMemberAssignmentTarget\"\n  }, {\n    name: \"object\",\n    type: Union(Expression, Super)\n  }, {\n    name: \"property\",\n    type: STRING\n  }];\n  StaticMemberExpression.typeName = \"StaticMemberExpression\";\n  StaticMemberExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"StaticMemberExpression\"\n  }, {\n    name: \"object\",\n    type: Union(Expression, Super)\n  }, {\n    name: \"property\",\n    type: STRING\n  }];\n  StaticPropertyName.typeName = \"StaticPropertyName\";\n  StaticPropertyName.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"StaticPropertyName\"\n  }, {\n    name: \"value\",\n    type: STRING\n  }];\n  Super.typeName = \"Super\";\n  Super.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"Super\"\n  }];\n  SwitchCase.typeName = \"SwitchCase\";\n  SwitchCase.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"SwitchCase\"\n  }, {\n    name: \"test\",\n    type: Expression\n  }, {\n    name: \"consequent\",\n    type: List(Statement)\n  }];\n  SwitchDefault.typeName = \"SwitchDefault\";\n  SwitchDefault.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"SwitchDefault\"\n  }, {\n    name: \"consequent\",\n    type: List(Statement)\n  }];\n  SwitchStatement.typeName = \"SwitchStatement\";\n  SwitchStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"SwitchStatement\"\n  }, {\n    name: \"discriminant\",\n    type: Expression\n  }, {\n    name: \"cases\",\n    type: List(SwitchCase)\n  }];\n  SwitchStatementWithDefault.typeName = \"SwitchStatementWithDefault\";\n  SwitchStatementWithDefault.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"SwitchStatementWithDefault\"\n  }, {\n    name: \"discriminant\",\n    type: Expression\n  }, {\n    name: \"preDefaultCases\",\n    type: List(SwitchCase)\n  }, {\n    name: \"defaultCase\",\n    type: SwitchDefault\n  }, {\n    name: \"postDefaultCases\",\n    type: List(SwitchCase)\n  }];\n  TemplateElement.typeName = \"TemplateElement\";\n  TemplateElement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"TemplateElement\"\n  }, {\n    name: \"rawValue\",\n    type: STRING\n  }];\n  TemplateExpression.typeName = \"TemplateExpression\";\n  TemplateExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"TemplateExpression\"\n  }, {\n    name: \"tag\",\n    type: Maybe(Expression)\n  }, {\n    name: \"elements\",\n    type: List(Union(Expression, TemplateElement))\n  }];\n  ThisExpression.typeName = \"ThisExpression\";\n  ThisExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ThisExpression\"\n  }];\n  ThrowStatement.typeName = \"ThrowStatement\";\n  ThrowStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"ThrowStatement\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  TryCatchStatement.typeName = \"TryCatchStatement\";\n  TryCatchStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"TryCatchStatement\"\n  }, {\n    name: \"body\",\n    type: Block\n  }, {\n    name: \"catchClause\",\n    type: CatchClause\n  }];\n  TryFinallyStatement.typeName = \"TryFinallyStatement\";\n  TryFinallyStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"TryFinallyStatement\"\n  }, {\n    name: \"body\",\n    type: Block\n  }, {\n    name: \"catchClause\",\n    type: Maybe(CatchClause)\n  }, {\n    name: \"finalizer\",\n    type: Block\n  }];\n  UnaryExpression.typeName = \"UnaryExpression\";\n  UnaryExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"UnaryExpression\"\n  }, {\n    name: \"operator\",\n    type: UnaryOperator\n  }, {\n    name: \"operand\",\n    type: Expression\n  }];\n  UpdateExpression.typeName = \"UpdateExpression\";\n  UpdateExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"UpdateExpression\"\n  }, {\n    name: \"isPrefix\",\n    type: BOOLEAN\n  }, {\n    name: \"operator\",\n    type: UpdateOperator\n  }, {\n    name: \"operand\",\n    type: Union(AssignmentTargetIdentifier, MemberAssignmentTarget)\n  }];\n  VariableDeclaration.typeName = \"VariableDeclaration\";\n  VariableDeclaration.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"VariableDeclaration\"\n  }, {\n    name: \"kind\",\n    type: VariableDeclarationKind\n  }, {\n    name: \"declarators\",\n    type: List(VariableDeclarator)\n  }];\n  VariableDeclarationStatement.typeName = \"VariableDeclarationStatement\";\n  VariableDeclarationStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"VariableDeclarationStatement\"\n  }, {\n    name: \"declaration\",\n    type: VariableDeclaration\n  }];\n  VariableDeclarator.typeName = \"VariableDeclarator\";\n  VariableDeclarator.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"VariableDeclarator\"\n  }, {\n    name: \"binding\",\n    type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))\n  }, {\n    name: \"init\",\n    type: Maybe(Expression)\n  }];\n  WhileStatement.typeName = \"WhileStatement\";\n  WhileStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"WhileStatement\"\n  }, {\n    name: \"test\",\n    type: Expression\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  WithStatement.typeName = \"WithStatement\";\n  WithStatement.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"WithStatement\"\n  }, {\n    name: \"object\",\n    type: Expression\n  }, {\n    name: \"body\",\n    type: Statement\n  }];\n  YieldExpression.typeName = \"YieldExpression\";\n  YieldExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"YieldExpression\"\n  }, {\n    name: \"expression\",\n    type: Maybe(Expression)\n  }];\n  YieldGeneratorExpression.typeName = \"YieldGeneratorExpression\";\n  YieldGeneratorExpression.fields = [{\n    name: \"type\",\n    type: Const(TYPE_INDICATOR),\n    value: \"YieldGeneratorExpression\"\n  }, {\n    name: \"expression\",\n    type: Expression\n  }];\n  return SPEC;\n}();","map":{"version":3,"names":["module","exports","SPEC","BOOLEAN","typeName","DOUBLE","STRING","Maybe","arg","argument","List","Const","Union","arguments","slice","call","TYPE_INDICATOR","values","BinaryOperator","CompoundAssignmentOperator","UnaryOperator","UpdateOperator","VariableDeclarationKind","ArrayAssignmentTarget","ArrayBinding","ArrayExpression","ArrowExpression","AssignmentExpression","AssignmentTargetIdentifier","AssignmentTargetPropertyIdentifier","AssignmentTargetPropertyProperty","AssignmentTargetWithDefault","AwaitExpression","BinaryExpression","BindingIdentifier","BindingPropertyIdentifier","BindingPropertyProperty","BindingWithDefault","Block","BlockStatement","BreakStatement","CallExpression","CatchClause","ClassDeclaration","ClassElement","ClassExpression","CompoundAssignmentExpression","ComputedMemberAssignmentTarget","ComputedMemberExpression","ComputedPropertyName","ConditionalExpression","ContinueStatement","DataProperty","DebuggerStatement","Directive","DoWhileStatement","EmptyStatement","Export","ExportAllFrom","ExportDefault","ExportFrom","ExportFromSpecifier","ExportLocalSpecifier","ExportLocals","ExpressionStatement","ForAwaitStatement","ForInStatement","ForOfStatement","ForStatement","FormalParameters","FunctionBody","FunctionDeclaration","FunctionExpression","Getter","IdentifierExpression","IfStatement","Import","ImportNamespace","ImportSpecifier","LabeledStatement","LiteralBooleanExpression","LiteralInfinityExpression","LiteralNullExpression","LiteralNumericExpression","LiteralRegExpExpression","LiteralStringExpression","Method","Module","NewExpression","NewTargetExpression","ObjectAssignmentTarget","ObjectBinding","ObjectExpression","ReturnStatement","Script","Setter","ShorthandProperty","SpreadElement","SpreadProperty","StaticMemberAssignmentTarget","StaticMemberExpression","StaticPropertyName","Super","SwitchCase","SwitchDefault","SwitchStatement","SwitchStatementWithDefault","TemplateElement","TemplateExpression","ThisExpression","ThrowStatement","TryCatchStatement","TryFinallyStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarationStatement","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","YieldGeneratorExpression","MemberExpression","AssignmentTargetProperty","Class","ExportDeclaration","PropertyName","Function","ImportDeclaration","IterationStatement","MemberAssignmentTarget","BindingProperty","MethodDefinition","Program","VariableReference","NamedObjectProperty","Expression","Statement","ObjectProperty","Node","fields","name","type","value"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-spec/dist/index.js"],"sourcesContent":["// Generated by src/generate-spec.js. \n\n/**\n * Copyright 2016 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nmodule.exports = (function() {\n  var SPEC = {};\n\n  var BOOLEAN = { typeName: \"Boolean\" };\n  var DOUBLE = { typeName: \"Number\" };\n  var STRING = { typeName: \"String\" };\n  function Maybe(arg) { return { typeName: \"Maybe\", argument: arg }; }\n  function List(arg) { return { typeName: \"List\", argument: arg }; }\n  function Const(arg) { return { typeName: \"Const\", argument: arg }; }\n  function Union() { return { typeName: \"Union\", arguments: [].slice.call(arguments, 0) }; }\n\n\n  var TYPE_INDICATOR = {\n    typeName: \"Enum\",\n    values: [\"ArrayAssignmentTarget\", \"ArrayBinding\", \"ArrayExpression\", \"ArrowExpression\", \"AssignmentExpression\", \"AssignmentTargetIdentifier\", \"AssignmentTargetPropertyIdentifier\", \"AssignmentTargetPropertyProperty\", \"AssignmentTargetWithDefault\", \"AwaitExpression\", \"BinaryExpression\", \"BindingIdentifier\", \"BindingPropertyIdentifier\", \"BindingPropertyProperty\", \"BindingWithDefault\", \"Block\", \"BlockStatement\", \"BreakStatement\", \"CallExpression\", \"CatchClause\", \"ClassDeclaration\", \"ClassElement\", \"ClassExpression\", \"CompoundAssignmentExpression\", \"ComputedMemberAssignmentTarget\", \"ComputedMemberExpression\", \"ComputedPropertyName\", \"ConditionalExpression\", \"ContinueStatement\", \"DataProperty\", \"DebuggerStatement\", \"Directive\", \"DoWhileStatement\", \"EmptyStatement\", \"Export\", \"ExportAllFrom\", \"ExportDefault\", \"ExportFrom\", \"ExportFromSpecifier\", \"ExportLocalSpecifier\", \"ExportLocals\", \"ExpressionStatement\", \"ForAwaitStatement\", \"ForInStatement\", \"ForOfStatement\", \"ForStatement\", \"FormalParameters\", \"FunctionBody\", \"FunctionDeclaration\", \"FunctionExpression\", \"Getter\", \"IdentifierExpression\", \"IfStatement\", \"Import\", \"ImportNamespace\", \"ImportSpecifier\", \"LabeledStatement\", \"LiteralBooleanExpression\", \"LiteralInfinityExpression\", \"LiteralNullExpression\", \"LiteralNumericExpression\", \"LiteralRegExpExpression\", \"LiteralStringExpression\", \"Method\", \"Module\", \"NewExpression\", \"NewTargetExpression\", \"ObjectAssignmentTarget\", \"ObjectBinding\", \"ObjectExpression\", \"ReturnStatement\", \"Script\", \"Setter\", \"ShorthandProperty\", \"SpreadElement\", \"SpreadProperty\", \"StaticMemberAssignmentTarget\", \"StaticMemberExpression\", \"StaticPropertyName\", \"Super\", \"SwitchCase\", \"SwitchDefault\", \"SwitchStatement\", \"SwitchStatementWithDefault\", \"TemplateElement\", \"TemplateExpression\", \"ThisExpression\", \"ThrowStatement\", \"TryCatchStatement\", \"TryFinallyStatement\", \"UnaryExpression\", \"UpdateExpression\", \"VariableDeclaration\", \"VariableDeclarationStatement\", \"VariableDeclarator\", \"WhileStatement\", \"WithStatement\", \"YieldExpression\", \"YieldGeneratorExpression\"]\n  };\n\n  var BinaryOperator = {\n    typeName: \"Enum\",\n    values: [\"==\", \"!=\", \"===\", \"!==\", \"<\", \"<=\", \">\", \">=\", \"in\", \"instanceof\", \"<<\", \">>\", \">>>\", \"+\", \"-\", \"*\", \"/\", \"%\", \"**\", \",\", \"||\", \"&&\", \"|\", \"^\", \"&\"]\n  }\n  \n  var CompoundAssignmentOperator = {\n    typeName: \"Enum\",\n    values: [\"+=\", \"-=\", \"*=\", \"/=\", \"%=\", \"**=\", \"<<=\", \">>=\", \">>>=\", \"|=\", \"^=\", \"&=\"]\n  }\n  \n  var UnaryOperator = {\n    typeName: \"Enum\",\n    values: [\"+\", \"-\", \"!\", \"~\", \"typeof\", \"void\", \"delete\"]\n  }\n  \n  var UpdateOperator = {\n    typeName: \"Enum\",\n    values: [\"++\", \"--\"]\n  }\n  \n  var VariableDeclarationKind = {\n    typeName: \"Enum\",\n    values: [\"var\", \"let\", \"const\"]\n  }\n  \n\n  var ArrayAssignmentTarget = SPEC.ArrayAssignmentTarget = {};\n  var ArrayBinding = SPEC.ArrayBinding = {};\n  var ArrayExpression = SPEC.ArrayExpression = {};\n  var ArrowExpression = SPEC.ArrowExpression = {};\n  var AssignmentExpression = SPEC.AssignmentExpression = {};\n  var AssignmentTargetIdentifier = SPEC.AssignmentTargetIdentifier = {};\n  var AssignmentTargetPropertyIdentifier = SPEC.AssignmentTargetPropertyIdentifier = {};\n  var AssignmentTargetPropertyProperty = SPEC.AssignmentTargetPropertyProperty = {};\n  var AssignmentTargetWithDefault = SPEC.AssignmentTargetWithDefault = {};\n  var AwaitExpression = SPEC.AwaitExpression = {};\n  var BinaryExpression = SPEC.BinaryExpression = {};\n  var BindingIdentifier = SPEC.BindingIdentifier = {};\n  var BindingPropertyIdentifier = SPEC.BindingPropertyIdentifier = {};\n  var BindingPropertyProperty = SPEC.BindingPropertyProperty = {};\n  var BindingWithDefault = SPEC.BindingWithDefault = {};\n  var Block = SPEC.Block = {};\n  var BlockStatement = SPEC.BlockStatement = {};\n  var BreakStatement = SPEC.BreakStatement = {};\n  var CallExpression = SPEC.CallExpression = {};\n  var CatchClause = SPEC.CatchClause = {};\n  var ClassDeclaration = SPEC.ClassDeclaration = {};\n  var ClassElement = SPEC.ClassElement = {};\n  var ClassExpression = SPEC.ClassExpression = {};\n  var CompoundAssignmentExpression = SPEC.CompoundAssignmentExpression = {};\n  var ComputedMemberAssignmentTarget = SPEC.ComputedMemberAssignmentTarget = {};\n  var ComputedMemberExpression = SPEC.ComputedMemberExpression = {};\n  var ComputedPropertyName = SPEC.ComputedPropertyName = {};\n  var ConditionalExpression = SPEC.ConditionalExpression = {};\n  var ContinueStatement = SPEC.ContinueStatement = {};\n  var DataProperty = SPEC.DataProperty = {};\n  var DebuggerStatement = SPEC.DebuggerStatement = {};\n  var Directive = SPEC.Directive = {};\n  var DoWhileStatement = SPEC.DoWhileStatement = {};\n  var EmptyStatement = SPEC.EmptyStatement = {};\n  var Export = SPEC.Export = {};\n  var ExportAllFrom = SPEC.ExportAllFrom = {};\n  var ExportDefault = SPEC.ExportDefault = {};\n  var ExportFrom = SPEC.ExportFrom = {};\n  var ExportFromSpecifier = SPEC.ExportFromSpecifier = {};\n  var ExportLocalSpecifier = SPEC.ExportLocalSpecifier = {};\n  var ExportLocals = SPEC.ExportLocals = {};\n  var ExpressionStatement = SPEC.ExpressionStatement = {};\n  var ForAwaitStatement = SPEC.ForAwaitStatement = {};\n  var ForInStatement = SPEC.ForInStatement = {};\n  var ForOfStatement = SPEC.ForOfStatement = {};\n  var ForStatement = SPEC.ForStatement = {};\n  var FormalParameters = SPEC.FormalParameters = {};\n  var FunctionBody = SPEC.FunctionBody = {};\n  var FunctionDeclaration = SPEC.FunctionDeclaration = {};\n  var FunctionExpression = SPEC.FunctionExpression = {};\n  var Getter = SPEC.Getter = {};\n  var IdentifierExpression = SPEC.IdentifierExpression = {};\n  var IfStatement = SPEC.IfStatement = {};\n  var Import = SPEC.Import = {};\n  var ImportNamespace = SPEC.ImportNamespace = {};\n  var ImportSpecifier = SPEC.ImportSpecifier = {};\n  var LabeledStatement = SPEC.LabeledStatement = {};\n  var LiteralBooleanExpression = SPEC.LiteralBooleanExpression = {};\n  var LiteralInfinityExpression = SPEC.LiteralInfinityExpression = {};\n  var LiteralNullExpression = SPEC.LiteralNullExpression = {};\n  var LiteralNumericExpression = SPEC.LiteralNumericExpression = {};\n  var LiteralRegExpExpression = SPEC.LiteralRegExpExpression = {};\n  var LiteralStringExpression = SPEC.LiteralStringExpression = {};\n  var Method = SPEC.Method = {};\n  var Module = SPEC.Module = {};\n  var NewExpression = SPEC.NewExpression = {};\n  var NewTargetExpression = SPEC.NewTargetExpression = {};\n  var ObjectAssignmentTarget = SPEC.ObjectAssignmentTarget = {};\n  var ObjectBinding = SPEC.ObjectBinding = {};\n  var ObjectExpression = SPEC.ObjectExpression = {};\n  var ReturnStatement = SPEC.ReturnStatement = {};\n  var Script = SPEC.Script = {};\n  var Setter = SPEC.Setter = {};\n  var ShorthandProperty = SPEC.ShorthandProperty = {};\n  var SpreadElement = SPEC.SpreadElement = {};\n  var SpreadProperty = SPEC.SpreadProperty = {};\n  var StaticMemberAssignmentTarget = SPEC.StaticMemberAssignmentTarget = {};\n  var StaticMemberExpression = SPEC.StaticMemberExpression = {};\n  var StaticPropertyName = SPEC.StaticPropertyName = {};\n  var Super = SPEC.Super = {};\n  var SwitchCase = SPEC.SwitchCase = {};\n  var SwitchDefault = SPEC.SwitchDefault = {};\n  var SwitchStatement = SPEC.SwitchStatement = {};\n  var SwitchStatementWithDefault = SPEC.SwitchStatementWithDefault = {};\n  var TemplateElement = SPEC.TemplateElement = {};\n  var TemplateExpression = SPEC.TemplateExpression = {};\n  var ThisExpression = SPEC.ThisExpression = {};\n  var ThrowStatement = SPEC.ThrowStatement = {};\n  var TryCatchStatement = SPEC.TryCatchStatement = {};\n  var TryFinallyStatement = SPEC.TryFinallyStatement = {};\n  var UnaryExpression = SPEC.UnaryExpression = {};\n  var UpdateExpression = SPEC.UpdateExpression = {};\n  var VariableDeclaration = SPEC.VariableDeclaration = {};\n  var VariableDeclarationStatement = SPEC.VariableDeclarationStatement = {};\n  var VariableDeclarator = SPEC.VariableDeclarator = {};\n  var WhileStatement = SPEC.WhileStatement = {};\n  var WithStatement = SPEC.WithStatement = {};\n  var YieldExpression = SPEC.YieldExpression = {};\n  var YieldGeneratorExpression = SPEC.YieldGeneratorExpression = {};\n\n  var MemberExpression = Union(ComputedMemberExpression, StaticMemberExpression);\n  var AssignmentTargetProperty = Union(AssignmentTargetPropertyIdentifier, AssignmentTargetPropertyProperty);\n  var Class = Union(ClassDeclaration, ClassExpression);\n  var ExportDeclaration = Union(Export, ExportAllFrom, ExportDefault, ExportFrom, ExportLocals);\n  var PropertyName = Union(ComputedPropertyName, StaticPropertyName);\n  var Function = Union(FunctionDeclaration, FunctionExpression);\n  var ImportDeclaration = Union(Import, ImportNamespace);\n  var IterationStatement = Union(DoWhileStatement, ForAwaitStatement, ForInStatement, ForOfStatement, ForStatement, WhileStatement);\n  var MemberAssignmentTarget = Union(ComputedMemberAssignmentTarget, StaticMemberAssignmentTarget);\n  var BindingProperty = Union(BindingPropertyIdentifier, BindingPropertyProperty);\n  var MethodDefinition = Union(Getter, Method, Setter);\n  var Program = Union(Module, Script);\n  var VariableReference = Union(AssignmentTargetIdentifier, BindingIdentifier, IdentifierExpression);\n  var NamedObjectProperty = Union(DataProperty, MethodDefinition);\n  var Expression = Union(ArrayExpression, ArrowExpression, AssignmentExpression, AwaitExpression, BinaryExpression, CallExpression, ClassExpression, CompoundAssignmentExpression, ConditionalExpression, FunctionExpression, IdentifierExpression, LiteralBooleanExpression, LiteralInfinityExpression, LiteralNullExpression, LiteralNumericExpression, LiteralRegExpExpression, LiteralStringExpression, MemberExpression, NewExpression, NewTargetExpression, ObjectExpression, TemplateExpression, ThisExpression, UnaryExpression, UpdateExpression, YieldExpression, YieldGeneratorExpression);\n  var Statement = Union(BlockStatement, BreakStatement, ClassDeclaration, ContinueStatement, DebuggerStatement, EmptyStatement, ExpressionStatement, FunctionDeclaration, IfStatement, IterationStatement, LabeledStatement, ReturnStatement, SwitchStatement, SwitchStatementWithDefault, ThrowStatement, TryCatchStatement, TryFinallyStatement, VariableDeclarationStatement, WithStatement);\n  var ObjectProperty = Union(NamedObjectProperty, ShorthandProperty, SpreadProperty);\n  var Node = Union(ArrayAssignmentTarget, ArrayBinding, AssignmentTargetProperty, AssignmentTargetWithDefault, BindingProperty, BindingWithDefault, Block, CatchClause, ClassElement, Directive, ExportDeclaration, ExportFromSpecifier, ExportLocalSpecifier, Expression, FormalParameters, FunctionBody, ImportDeclaration, ImportSpecifier, MemberAssignmentTarget, ObjectAssignmentTarget, ObjectBinding, ObjectProperty, Program, PropertyName, SpreadElement, Statement, Super, SwitchCase, SwitchDefault, TemplateElement, VariableDeclaration, VariableDeclarator, VariableReference);\n\n  ArrayAssignmentTarget.typeName = \"ArrayAssignmentTarget\";\n  ArrayAssignmentTarget.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ArrayAssignmentTarget\" },\n    { name: \"elements\", type: List(Maybe(Union(AssignmentTargetWithDefault, Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))))) },\n    { name: \"rest\", type: Maybe(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))) }\n  ];\n\n  ArrayBinding.typeName = \"ArrayBinding\";\n  ArrayBinding.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ArrayBinding\" },\n    { name: \"elements\", type: List(Maybe(Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))))) },\n    { name: \"rest\", type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }\n  ];\n\n  ArrayExpression.typeName = \"ArrayExpression\";\n  ArrayExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ArrayExpression\" },\n    { name: \"elements\", type: List(Maybe(Union(Expression, SpreadElement))) }\n  ];\n\n  ArrowExpression.typeName = \"ArrowExpression\";\n  ArrowExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ArrowExpression\" },\n    { name: \"isAsync\", type: BOOLEAN },\n    { name: \"params\", type: FormalParameters },\n    { name: \"body\", type: Union(Expression, FunctionBody) }\n  ];\n\n  AssignmentExpression.typeName = \"AssignmentExpression\";\n  AssignmentExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"AssignmentExpression\" },\n    { name: \"binding\", type: Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)) },\n    { name: \"expression\", type: Expression }\n  ];\n\n  AssignmentTargetIdentifier.typeName = \"AssignmentTargetIdentifier\";\n  AssignmentTargetIdentifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"AssignmentTargetIdentifier\" },\n    { name: \"name\", type: STRING }\n  ];\n\n  AssignmentTargetPropertyIdentifier.typeName = \"AssignmentTargetPropertyIdentifier\";\n  AssignmentTargetPropertyIdentifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"AssignmentTargetPropertyIdentifier\" },\n    { name: \"binding\", type: AssignmentTargetIdentifier },\n    { name: \"init\", type: Maybe(Expression) }\n  ];\n\n  AssignmentTargetPropertyProperty.typeName = \"AssignmentTargetPropertyProperty\";\n  AssignmentTargetPropertyProperty.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"AssignmentTargetPropertyProperty\" },\n    { name: \"name\", type: PropertyName },\n    { name: \"binding\", type: Union(AssignmentTargetWithDefault, Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget))) }\n  ];\n\n  AssignmentTargetWithDefault.typeName = \"AssignmentTargetWithDefault\";\n  AssignmentTargetWithDefault.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"AssignmentTargetWithDefault\" },\n    { name: \"binding\", type: Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)) },\n    { name: \"init\", type: Expression }\n  ];\n\n  AwaitExpression.typeName = \"AwaitExpression\";\n  AwaitExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"AwaitExpression\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  BinaryExpression.typeName = \"BinaryExpression\";\n  BinaryExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BinaryExpression\" },\n    { name: \"left\", type: Expression },\n    { name: \"operator\", type: BinaryOperator },\n    { name: \"right\", type: Expression }\n  ];\n\n  BindingIdentifier.typeName = \"BindingIdentifier\";\n  BindingIdentifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BindingIdentifier\" },\n    { name: \"name\", type: STRING }\n  ];\n\n  BindingPropertyIdentifier.typeName = \"BindingPropertyIdentifier\";\n  BindingPropertyIdentifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BindingPropertyIdentifier\" },\n    { name: \"binding\", type: BindingIdentifier },\n    { name: \"init\", type: Maybe(Expression) }\n  ];\n\n  BindingPropertyProperty.typeName = \"BindingPropertyProperty\";\n  BindingPropertyProperty.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BindingPropertyProperty\" },\n    { name: \"name\", type: PropertyName },\n    { name: \"binding\", type: Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }\n  ];\n\n  BindingWithDefault.typeName = \"BindingWithDefault\";\n  BindingWithDefault.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BindingWithDefault\" },\n    { name: \"binding\", type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)) },\n    { name: \"init\", type: Expression }\n  ];\n\n  Block.typeName = \"Block\";\n  Block.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Block\" },\n    { name: \"statements\", type: List(Statement) }\n  ];\n\n  BlockStatement.typeName = \"BlockStatement\";\n  BlockStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BlockStatement\" },\n    { name: \"block\", type: Block }\n  ];\n\n  BreakStatement.typeName = \"BreakStatement\";\n  BreakStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"BreakStatement\" },\n    { name: \"label\", type: Maybe(STRING) }\n  ];\n\n  CallExpression.typeName = \"CallExpression\";\n  CallExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"CallExpression\" },\n    { name: \"callee\", type: Union(Expression, Super) },\n    { name: \"arguments\", type: List(Union(Expression, SpreadElement)) }\n  ];\n\n  CatchClause.typeName = \"CatchClause\";\n  CatchClause.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"CatchClause\" },\n    { name: \"binding\", type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) },\n    { name: \"body\", type: Block }\n  ];\n\n  ClassDeclaration.typeName = \"ClassDeclaration\";\n  ClassDeclaration.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ClassDeclaration\" },\n    { name: \"name\", type: BindingIdentifier },\n    { name: \"super\", type: Maybe(Expression) },\n    { name: \"elements\", type: List(ClassElement) }\n  ];\n\n  ClassElement.typeName = \"ClassElement\";\n  ClassElement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ClassElement\" },\n    { name: \"isStatic\", type: BOOLEAN },\n    { name: \"method\", type: MethodDefinition }\n  ];\n\n  ClassExpression.typeName = \"ClassExpression\";\n  ClassExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ClassExpression\" },\n    { name: \"name\", type: Maybe(BindingIdentifier) },\n    { name: \"super\", type: Maybe(Expression) },\n    { name: \"elements\", type: List(ClassElement) }\n  ];\n\n  CompoundAssignmentExpression.typeName = \"CompoundAssignmentExpression\";\n  CompoundAssignmentExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"CompoundAssignmentExpression\" },\n    { name: \"binding\", type: Union(AssignmentTargetIdentifier, MemberAssignmentTarget) },\n    { name: \"operator\", type: CompoundAssignmentOperator },\n    { name: \"expression\", type: Expression }\n  ];\n\n  ComputedMemberAssignmentTarget.typeName = \"ComputedMemberAssignmentTarget\";\n  ComputedMemberAssignmentTarget.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ComputedMemberAssignmentTarget\" },\n    { name: \"object\", type: Union(Expression, Super) },\n    { name: \"expression\", type: Expression }\n  ];\n\n  ComputedMemberExpression.typeName = \"ComputedMemberExpression\";\n  ComputedMemberExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ComputedMemberExpression\" },\n    { name: \"object\", type: Union(Expression, Super) },\n    { name: \"expression\", type: Expression }\n  ];\n\n  ComputedPropertyName.typeName = \"ComputedPropertyName\";\n  ComputedPropertyName.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ComputedPropertyName\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  ConditionalExpression.typeName = \"ConditionalExpression\";\n  ConditionalExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ConditionalExpression\" },\n    { name: \"test\", type: Expression },\n    { name: \"consequent\", type: Expression },\n    { name: \"alternate\", type: Expression }\n  ];\n\n  ContinueStatement.typeName = \"ContinueStatement\";\n  ContinueStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ContinueStatement\" },\n    { name: \"label\", type: Maybe(STRING) }\n  ];\n\n  DataProperty.typeName = \"DataProperty\";\n  DataProperty.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"DataProperty\" },\n    { name: \"name\", type: PropertyName },\n    { name: \"expression\", type: Expression }\n  ];\n\n  DebuggerStatement.typeName = \"DebuggerStatement\";\n  DebuggerStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"DebuggerStatement\" }\n  ];\n\n  Directive.typeName = \"Directive\";\n  Directive.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Directive\" },\n    { name: \"rawValue\", type: STRING }\n  ];\n\n  DoWhileStatement.typeName = \"DoWhileStatement\";\n  DoWhileStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"DoWhileStatement\" },\n    { name: \"body\", type: Statement },\n    { name: \"test\", type: Expression }\n  ];\n\n  EmptyStatement.typeName = \"EmptyStatement\";\n  EmptyStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"EmptyStatement\" }\n  ];\n\n  Export.typeName = \"Export\";\n  Export.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Export\" },\n    { name: \"declaration\", type: Union(ClassDeclaration, FunctionDeclaration, VariableDeclaration) }\n  ];\n\n  ExportAllFrom.typeName = \"ExportAllFrom\";\n  ExportAllFrom.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExportAllFrom\" },\n    { name: \"moduleSpecifier\", type: STRING }\n  ];\n\n  ExportDefault.typeName = \"ExportDefault\";\n  ExportDefault.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExportDefault\" },\n    { name: \"body\", type: Union(ClassDeclaration, Expression, FunctionDeclaration) }\n  ];\n\n  ExportFrom.typeName = \"ExportFrom\";\n  ExportFrom.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExportFrom\" },\n    { name: \"namedExports\", type: List(ExportFromSpecifier) },\n    { name: \"moduleSpecifier\", type: STRING }\n  ];\n\n  ExportFromSpecifier.typeName = \"ExportFromSpecifier\";\n  ExportFromSpecifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExportFromSpecifier\" },\n    { name: \"name\", type: STRING },\n    { name: \"exportedName\", type: Maybe(STRING) }\n  ];\n\n  ExportLocalSpecifier.typeName = \"ExportLocalSpecifier\";\n  ExportLocalSpecifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExportLocalSpecifier\" },\n    { name: \"name\", type: IdentifierExpression },\n    { name: \"exportedName\", type: Maybe(STRING) }\n  ];\n\n  ExportLocals.typeName = \"ExportLocals\";\n  ExportLocals.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExportLocals\" },\n    { name: \"namedExports\", type: List(ExportLocalSpecifier) }\n  ];\n\n  ExpressionStatement.typeName = \"ExpressionStatement\";\n  ExpressionStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ExpressionStatement\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  ForAwaitStatement.typeName = \"ForAwaitStatement\";\n  ForAwaitStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ForAwaitStatement\" },\n    { name: \"left\", type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration) },\n    { name: \"right\", type: Expression },\n    { name: \"body\", type: Statement }\n  ];\n\n  ForInStatement.typeName = \"ForInStatement\";\n  ForInStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ForInStatement\" },\n    { name: \"left\", type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration) },\n    { name: \"right\", type: Expression },\n    { name: \"body\", type: Statement }\n  ];\n\n  ForOfStatement.typeName = \"ForOfStatement\";\n  ForOfStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ForOfStatement\" },\n    { name: \"left\", type: Union(Union(Union(ArrayAssignmentTarget, ObjectAssignmentTarget), Union(AssignmentTargetIdentifier, MemberAssignmentTarget)), VariableDeclaration) },\n    { name: \"right\", type: Expression },\n    { name: \"body\", type: Statement }\n  ];\n\n  ForStatement.typeName = \"ForStatement\";\n  ForStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ForStatement\" },\n    { name: \"init\", type: Maybe(Union(Expression, VariableDeclaration)) },\n    { name: \"test\", type: Maybe(Expression) },\n    { name: \"update\", type: Maybe(Expression) },\n    { name: \"body\", type: Statement }\n  ];\n\n  FormalParameters.typeName = \"FormalParameters\";\n  FormalParameters.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"FormalParameters\" },\n    { name: \"items\", type: List(Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)))) },\n    { name: \"rest\", type: Maybe(Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) }\n  ];\n\n  FunctionBody.typeName = \"FunctionBody\";\n  FunctionBody.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"FunctionBody\" },\n    { name: \"directives\", type: List(Directive) },\n    { name: \"statements\", type: List(Statement) }\n  ];\n\n  FunctionDeclaration.typeName = \"FunctionDeclaration\";\n  FunctionDeclaration.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"FunctionDeclaration\" },\n    { name: \"isAsync\", type: BOOLEAN },\n    { name: \"isGenerator\", type: BOOLEAN },\n    { name: \"name\", type: BindingIdentifier },\n    { name: \"params\", type: FormalParameters },\n    { name: \"body\", type: FunctionBody }\n  ];\n\n  FunctionExpression.typeName = \"FunctionExpression\";\n  FunctionExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"FunctionExpression\" },\n    { name: \"isAsync\", type: BOOLEAN },\n    { name: \"isGenerator\", type: BOOLEAN },\n    { name: \"name\", type: Maybe(BindingIdentifier) },\n    { name: \"params\", type: FormalParameters },\n    { name: \"body\", type: FunctionBody }\n  ];\n\n  Getter.typeName = \"Getter\";\n  Getter.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Getter\" },\n    { name: \"name\", type: PropertyName },\n    { name: \"body\", type: FunctionBody }\n  ];\n\n  IdentifierExpression.typeName = \"IdentifierExpression\";\n  IdentifierExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"IdentifierExpression\" },\n    { name: \"name\", type: STRING }\n  ];\n\n  IfStatement.typeName = \"IfStatement\";\n  IfStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"IfStatement\" },\n    { name: \"test\", type: Expression },\n    { name: \"consequent\", type: Statement },\n    { name: \"alternate\", type: Maybe(Statement) }\n  ];\n\n  Import.typeName = \"Import\";\n  Import.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Import\" },\n    { name: \"defaultBinding\", type: Maybe(BindingIdentifier) },\n    { name: \"namedImports\", type: List(ImportSpecifier) },\n    { name: \"moduleSpecifier\", type: STRING }\n  ];\n\n  ImportNamespace.typeName = \"ImportNamespace\";\n  ImportNamespace.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ImportNamespace\" },\n    { name: \"defaultBinding\", type: Maybe(BindingIdentifier) },\n    { name: \"namespaceBinding\", type: BindingIdentifier },\n    { name: \"moduleSpecifier\", type: STRING }\n  ];\n\n  ImportSpecifier.typeName = \"ImportSpecifier\";\n  ImportSpecifier.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ImportSpecifier\" },\n    { name: \"name\", type: Maybe(STRING) },\n    { name: \"binding\", type: BindingIdentifier }\n  ];\n\n  LabeledStatement.typeName = \"LabeledStatement\";\n  LabeledStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LabeledStatement\" },\n    { name: \"label\", type: STRING },\n    { name: \"body\", type: Statement }\n  ];\n\n  LiteralBooleanExpression.typeName = \"LiteralBooleanExpression\";\n  LiteralBooleanExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LiteralBooleanExpression\" },\n    { name: \"value\", type: BOOLEAN }\n  ];\n\n  LiteralInfinityExpression.typeName = \"LiteralInfinityExpression\";\n  LiteralInfinityExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LiteralInfinityExpression\" }\n  ];\n\n  LiteralNullExpression.typeName = \"LiteralNullExpression\";\n  LiteralNullExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LiteralNullExpression\" }\n  ];\n\n  LiteralNumericExpression.typeName = \"LiteralNumericExpression\";\n  LiteralNumericExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LiteralNumericExpression\" },\n    { name: \"value\", type: DOUBLE }\n  ];\n\n  LiteralRegExpExpression.typeName = \"LiteralRegExpExpression\";\n  LiteralRegExpExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LiteralRegExpExpression\" },\n    { name: \"pattern\", type: STRING },\n    { name: \"global\", type: BOOLEAN },\n    { name: \"ignoreCase\", type: BOOLEAN },\n    { name: \"multiLine\", type: BOOLEAN },\n    { name: \"dotAll\", type: BOOLEAN },\n    { name: \"unicode\", type: BOOLEAN },\n    { name: \"sticky\", type: BOOLEAN }\n  ];\n\n  LiteralStringExpression.typeName = \"LiteralStringExpression\";\n  LiteralStringExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"LiteralStringExpression\" },\n    { name: \"value\", type: STRING }\n  ];\n\n  Method.typeName = \"Method\";\n  Method.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Method\" },\n    { name: \"isAsync\", type: BOOLEAN },\n    { name: \"isGenerator\", type: BOOLEAN },\n    { name: \"name\", type: PropertyName },\n    { name: \"params\", type: FormalParameters },\n    { name: \"body\", type: FunctionBody }\n  ];\n\n  Module.typeName = \"Module\";\n  Module.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Module\" },\n    { name: \"directives\", type: List(Directive) },\n    { name: \"items\", type: List(Union(ExportDeclaration, ImportDeclaration, Statement)) }\n  ];\n\n  NewExpression.typeName = \"NewExpression\";\n  NewExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"NewExpression\" },\n    { name: \"callee\", type: Expression },\n    { name: \"arguments\", type: List(Union(Expression, SpreadElement)) }\n  ];\n\n  NewTargetExpression.typeName = \"NewTargetExpression\";\n  NewTargetExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"NewTargetExpression\" }\n  ];\n\n  ObjectAssignmentTarget.typeName = \"ObjectAssignmentTarget\";\n  ObjectAssignmentTarget.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ObjectAssignmentTarget\" },\n    { name: \"properties\", type: List(AssignmentTargetProperty) },\n    { name: \"rest\", type: Maybe(Union(AssignmentTargetIdentifier, MemberAssignmentTarget)) }\n  ];\n\n  ObjectBinding.typeName = \"ObjectBinding\";\n  ObjectBinding.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ObjectBinding\" },\n    { name: \"properties\", type: List(BindingProperty) },\n    { name: \"rest\", type: Maybe(BindingIdentifier) }\n  ];\n\n  ObjectExpression.typeName = \"ObjectExpression\";\n  ObjectExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ObjectExpression\" },\n    { name: \"properties\", type: List(ObjectProperty) }\n  ];\n\n  ReturnStatement.typeName = \"ReturnStatement\";\n  ReturnStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ReturnStatement\" },\n    { name: \"expression\", type: Maybe(Expression) }\n  ];\n\n  Script.typeName = \"Script\";\n  Script.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Script\" },\n    { name: \"directives\", type: List(Directive) },\n    { name: \"statements\", type: List(Statement) }\n  ];\n\n  Setter.typeName = \"Setter\";\n  Setter.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Setter\" },\n    { name: \"name\", type: PropertyName },\n    { name: \"param\", type: Union(BindingWithDefault, Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding))) },\n    { name: \"body\", type: FunctionBody }\n  ];\n\n  ShorthandProperty.typeName = \"ShorthandProperty\";\n  ShorthandProperty.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ShorthandProperty\" },\n    { name: \"name\", type: IdentifierExpression }\n  ];\n\n  SpreadElement.typeName = \"SpreadElement\";\n  SpreadElement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"SpreadElement\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  SpreadProperty.typeName = \"SpreadProperty\";\n  SpreadProperty.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"SpreadProperty\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  StaticMemberAssignmentTarget.typeName = \"StaticMemberAssignmentTarget\";\n  StaticMemberAssignmentTarget.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"StaticMemberAssignmentTarget\" },\n    { name: \"object\", type: Union(Expression, Super) },\n    { name: \"property\", type: STRING }\n  ];\n\n  StaticMemberExpression.typeName = \"StaticMemberExpression\";\n  StaticMemberExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"StaticMemberExpression\" },\n    { name: \"object\", type: Union(Expression, Super) },\n    { name: \"property\", type: STRING }\n  ];\n\n  StaticPropertyName.typeName = \"StaticPropertyName\";\n  StaticPropertyName.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"StaticPropertyName\" },\n    { name: \"value\", type: STRING }\n  ];\n\n  Super.typeName = \"Super\";\n  Super.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"Super\" }\n  ];\n\n  SwitchCase.typeName = \"SwitchCase\";\n  SwitchCase.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"SwitchCase\" },\n    { name: \"test\", type: Expression },\n    { name: \"consequent\", type: List(Statement) }\n  ];\n\n  SwitchDefault.typeName = \"SwitchDefault\";\n  SwitchDefault.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"SwitchDefault\" },\n    { name: \"consequent\", type: List(Statement) }\n  ];\n\n  SwitchStatement.typeName = \"SwitchStatement\";\n  SwitchStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"SwitchStatement\" },\n    { name: \"discriminant\", type: Expression },\n    { name: \"cases\", type: List(SwitchCase) }\n  ];\n\n  SwitchStatementWithDefault.typeName = \"SwitchStatementWithDefault\";\n  SwitchStatementWithDefault.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"SwitchStatementWithDefault\" },\n    { name: \"discriminant\", type: Expression },\n    { name: \"preDefaultCases\", type: List(SwitchCase) },\n    { name: \"defaultCase\", type: SwitchDefault },\n    { name: \"postDefaultCases\", type: List(SwitchCase) }\n  ];\n\n  TemplateElement.typeName = \"TemplateElement\";\n  TemplateElement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"TemplateElement\" },\n    { name: \"rawValue\", type: STRING }\n  ];\n\n  TemplateExpression.typeName = \"TemplateExpression\";\n  TemplateExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"TemplateExpression\" },\n    { name: \"tag\", type: Maybe(Expression) },\n    { name: \"elements\", type: List(Union(Expression, TemplateElement)) }\n  ];\n\n  ThisExpression.typeName = \"ThisExpression\";\n  ThisExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ThisExpression\" }\n  ];\n\n  ThrowStatement.typeName = \"ThrowStatement\";\n  ThrowStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"ThrowStatement\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  TryCatchStatement.typeName = \"TryCatchStatement\";\n  TryCatchStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"TryCatchStatement\" },\n    { name: \"body\", type: Block },\n    { name: \"catchClause\", type: CatchClause }\n  ];\n\n  TryFinallyStatement.typeName = \"TryFinallyStatement\";\n  TryFinallyStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"TryFinallyStatement\" },\n    { name: \"body\", type: Block },\n    { name: \"catchClause\", type: Maybe(CatchClause) },\n    { name: \"finalizer\", type: Block }\n  ];\n\n  UnaryExpression.typeName = \"UnaryExpression\";\n  UnaryExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"UnaryExpression\" },\n    { name: \"operator\", type: UnaryOperator },\n    { name: \"operand\", type: Expression }\n  ];\n\n  UpdateExpression.typeName = \"UpdateExpression\";\n  UpdateExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"UpdateExpression\" },\n    { name: \"isPrefix\", type: BOOLEAN },\n    { name: \"operator\", type: UpdateOperator },\n    { name: \"operand\", type: Union(AssignmentTargetIdentifier, MemberAssignmentTarget) }\n  ];\n\n  VariableDeclaration.typeName = \"VariableDeclaration\";\n  VariableDeclaration.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"VariableDeclaration\" },\n    { name: \"kind\", type: VariableDeclarationKind },\n    { name: \"declarators\", type: List(VariableDeclarator) }\n  ];\n\n  VariableDeclarationStatement.typeName = \"VariableDeclarationStatement\";\n  VariableDeclarationStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"VariableDeclarationStatement\" },\n    { name: \"declaration\", type: VariableDeclaration }\n  ];\n\n  VariableDeclarator.typeName = \"VariableDeclarator\";\n  VariableDeclarator.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"VariableDeclarator\" },\n    { name: \"binding\", type: Union(BindingIdentifier, Union(ArrayBinding, ObjectBinding)) },\n    { name: \"init\", type: Maybe(Expression) }\n  ];\n\n  WhileStatement.typeName = \"WhileStatement\";\n  WhileStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"WhileStatement\" },\n    { name: \"test\", type: Expression },\n    { name: \"body\", type: Statement }\n  ];\n\n  WithStatement.typeName = \"WithStatement\";\n  WithStatement.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"WithStatement\" },\n    { name: \"object\", type: Expression },\n    { name: \"body\", type: Statement }\n  ];\n\n  YieldExpression.typeName = \"YieldExpression\";\n  YieldExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"YieldExpression\" },\n    { name: \"expression\", type: Maybe(Expression) }\n  ];\n\n  YieldGeneratorExpression.typeName = \"YieldGeneratorExpression\";\n  YieldGeneratorExpression.fields = [\n    { name: \"type\", type: Const(TYPE_INDICATOR), value: \"YieldGeneratorExpression\" },\n    { name: \"expression\", type: Expression }\n  ];\n\n  return SPEC;\n}());\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}