{"ast":null,"code":"/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass DeclarationType {\n  constructor(name, isBlockScoped) {\n    this.name = name;\n    this.isBlockScoped = !!isBlockScoped;\n    this.isFunctionScoped = !isBlockScoped;\n  }\n}\nclass BlockScopedDeclaration extends DeclarationType {\n  constructor(name) {\n    super(name, true);\n  }\n}\nclass FunctionScopedDeclaration extends DeclarationType {\n  constructor(name) {\n    super(name, false);\n  }\n}\nDeclarationType.VAR = new FunctionScopedDeclaration('Var');\nDeclarationType.CONST = new BlockScopedDeclaration('Const');\nDeclarationType.LET = new BlockScopedDeclaration('Let');\nDeclarationType.FUNCTION_DECLARATION = new BlockScopedDeclaration('FunctionDeclaration'); // potentially also `FunctionScoped` versions of this, for functions at top of functions/etc?\nDeclarationType.FUNCTION_VAR_DECLARATION = new FunctionScopedDeclaration('FunctionB33'); // The additional variable created by B.3.3.\nDeclarationType.FUNCTION_NAME = new BlockScopedDeclaration('FunctionExpressionName');\nDeclarationType.CLASS_DECLARATION = new BlockScopedDeclaration('ClassDeclaration');\nDeclarationType.CLASS_NAME = new BlockScopedDeclaration('ClassName');\nDeclarationType.PARAMETER = new FunctionScopedDeclaration('Parameter');\nDeclarationType.CATCH_PARAMETER = new BlockScopedDeclaration('CatchParam');\nDeclarationType.IMPORT = new BlockScopedDeclaration('Import');\nDeclarationType.fromVarDeclKind = function (variableDeclarationKind) {\n  switch (variableDeclarationKind) {\n    case 'var':\n      return DeclarationType.VAR;\n    case 'const':\n      return DeclarationType.CONST;\n    case 'let':\n      return DeclarationType.LET;\n    default:\n      throw new Error('Invalid VariableDeclarationKind: ' + JSON.stringify(variableDeclarationKind));\n  }\n};\nclass Declaration {\n  constructor(node, type) {\n    this.node = node;\n    this.type = type;\n  }\n}\nmodule.exports = {\n  DeclarationType,\n  BlockScopedDeclaration,\n  FunctionScopedDeclaration,\n  Declaration\n};","map":{"version":3,"names":["DeclarationType","constructor","name","isBlockScoped","isFunctionScoped","BlockScopedDeclaration","FunctionScopedDeclaration","VAR","CONST","LET","FUNCTION_DECLARATION","FUNCTION_VAR_DECLARATION","FUNCTION_NAME","CLASS_DECLARATION","CLASS_NAME","PARAMETER","CATCH_PARAMETER","IMPORT","fromVarDeclKind","variableDeclarationKind","Error","JSON","stringify","Declaration","node","type","module","exports"],"sources":["/Users/binarychai3/Documents/React js Projects/first-react/node_modules/shift-scope/src/declaration.js"],"sourcesContent":["/**\n * Copyright 2015 Shape Security, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\")\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass DeclarationType {\n  constructor(name, isBlockScoped) {\n    this.name = name;\n    this.isBlockScoped = !!isBlockScoped;\n    this.isFunctionScoped = !isBlockScoped;\n  }\n}\n\nclass BlockScopedDeclaration extends DeclarationType {\n  constructor(name) {\n    super(name, true);\n  }\n}\n\nclass FunctionScopedDeclaration extends DeclarationType {\n  constructor(name) {\n    super(name, false);\n  }\n}\n\nDeclarationType.VAR = new FunctionScopedDeclaration('Var');\nDeclarationType.CONST = new BlockScopedDeclaration('Const');\nDeclarationType.LET = new BlockScopedDeclaration('Let');\nDeclarationType.FUNCTION_DECLARATION = new BlockScopedDeclaration('FunctionDeclaration'); // potentially also `FunctionScoped` versions of this, for functions at top of functions/etc?\nDeclarationType.FUNCTION_VAR_DECLARATION = new FunctionScopedDeclaration('FunctionB33'); // The additional variable created by B.3.3.\nDeclarationType.FUNCTION_NAME = new BlockScopedDeclaration('FunctionExpressionName');\nDeclarationType.CLASS_DECLARATION = new BlockScopedDeclaration('ClassDeclaration');\nDeclarationType.CLASS_NAME = new BlockScopedDeclaration('ClassName');\nDeclarationType.PARAMETER = new FunctionScopedDeclaration('Parameter');\nDeclarationType.CATCH_PARAMETER = new BlockScopedDeclaration('CatchParam');\nDeclarationType.IMPORT = new BlockScopedDeclaration('Import');\n\nDeclarationType.fromVarDeclKind = function (variableDeclarationKind) {\n  switch (variableDeclarationKind) {\n    case 'var':\n      return DeclarationType.VAR;\n    case 'const':\n      return DeclarationType.CONST;\n    case 'let':\n      return DeclarationType.LET;\n    default:\n      throw new Error('Invalid VariableDeclarationKind: ' + JSON.stringify(variableDeclarationKind));\n  }\n};\n\nclass Declaration {\n  constructor(node, type) {\n    this.node = node;\n    this.type = type;\n  }\n}\n\nmodule.exports = {\n  DeclarationType,\n  BlockScopedDeclaration,\n  FunctionScopedDeclaration,\n  Declaration,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,eAAe,CAAC;EACpBC,WAAWA,CAACC,IAAI,EAAEC,aAAa,EAAE;IAC/B,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,aAAa,GAAG,CAAC,CAACA,aAAa;IACpC,IAAI,CAACC,gBAAgB,GAAG,CAACD,aAAa;EACxC;AACF;AAEA,MAAME,sBAAsB,SAASL,eAAe,CAAC;EACnDC,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAACA,IAAI,EAAE,IAAI,CAAC;EACnB;AACF;AAEA,MAAMI,yBAAyB,SAASN,eAAe,CAAC;EACtDC,WAAWA,CAACC,IAAI,EAAE;IAChB,KAAK,CAACA,IAAI,EAAE,KAAK,CAAC;EACpB;AACF;AAEAF,eAAe,CAACO,GAAG,GAAG,IAAID,yBAAyB,CAAC,KAAK,CAAC;AAC1DN,eAAe,CAACQ,KAAK,GAAG,IAAIH,sBAAsB,CAAC,OAAO,CAAC;AAC3DL,eAAe,CAACS,GAAG,GAAG,IAAIJ,sBAAsB,CAAC,KAAK,CAAC;AACvDL,eAAe,CAACU,oBAAoB,GAAG,IAAIL,sBAAsB,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAC1FL,eAAe,CAACW,wBAAwB,GAAG,IAAIL,yBAAyB,CAAC,aAAa,CAAC,CAAC,CAAC;AACzFN,eAAe,CAACY,aAAa,GAAG,IAAIP,sBAAsB,CAAC,wBAAwB,CAAC;AACpFL,eAAe,CAACa,iBAAiB,GAAG,IAAIR,sBAAsB,CAAC,kBAAkB,CAAC;AAClFL,eAAe,CAACc,UAAU,GAAG,IAAIT,sBAAsB,CAAC,WAAW,CAAC;AACpEL,eAAe,CAACe,SAAS,GAAG,IAAIT,yBAAyB,CAAC,WAAW,CAAC;AACtEN,eAAe,CAACgB,eAAe,GAAG,IAAIX,sBAAsB,CAAC,YAAY,CAAC;AAC1EL,eAAe,CAACiB,MAAM,GAAG,IAAIZ,sBAAsB,CAAC,QAAQ,CAAC;AAE7DL,eAAe,CAACkB,eAAe,GAAG,UAAUC,uBAAuB,EAAE;EACnE,QAAQA,uBAAuB;IAC7B,KAAK,KAAK;MACR,OAAOnB,eAAe,CAACO,GAAG;IAC5B,KAAK,OAAO;MACV,OAAOP,eAAe,CAACQ,KAAK;IAC9B,KAAK,KAAK;MACR,OAAOR,eAAe,CAACS,GAAG;IAC5B;MACE,MAAM,IAAIW,KAAK,CAAC,mCAAmC,GAAGC,IAAI,CAACC,SAAS,CAACH,uBAAuB,CAAC,CAAC;EAClG;AACF,CAAC;AAED,MAAMI,WAAW,CAAC;EAChBtB,WAAWA,CAACuB,IAAI,EAAEC,IAAI,EAAE;IACtB,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;AACF;AAEAC,MAAM,CAACC,OAAO,GAAG;EACf3B,eAAe;EACfK,sBAAsB;EACtBC,yBAAyB;EACzBiB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}